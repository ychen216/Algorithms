671.Second Minimum Node In a Binary Tree

/*
Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.

Example 1:
Input: 
    2
   / \
  2   5
     / \
    5   7

Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.
Example 2:
Input: 
    2
   / \
  2   2

Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.
*/

Wrong Answer case:
Input:
[2,2,5,null,null,5,5]
Output:
2
Expected:
5
 I think the case is wrong


Solution 1:Wrong Answer
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    根据题中树的性质 任意一个节点X 有两个子树或者没有子树 如果有两个子树那么X比两个子树都要小
    以节点X为根的数 最小值就是X 次小值从两个子树中找
    可以递归求解
    */
    int findSecondMinimumValue(TreeNode* root) {
        if(!root)
           return -1;
        if(root->right==NULL&&root->left==NULL)
            return -1;
        int left=root->left->val,right=root->right->val;
        if(root->val!=left)
            left=findSecondMinimumValue(root->left);
        if(root->val!=right)
            right=findSecondMinimumValue(root->right);
        if(left!=-1&&right!=-1)
            return min(left,right);
        else if(left!=-1)
            return left;
        else
            return right;
    }
};
Solution 2: 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {

public:
    void travel(set<int>&s,TreeNode* root){
        if(root==NULL)
            return;
        s.insert(root->val);
        travel(s,root->left);
        travel(s,root->right);
    }
    int findSecondMinimumValue(TreeNode* root) {
        set<int> s;
        travel(s,root);
        int cnt=0;
        for(set<int>::reverse_iterator it=s.rbegin();it!=s.rend();it++){
            cnt++;
            if(cnt==2)
                return *it;
        }
        return -1;
    }
};
