382. Linked List Random Node
/*
Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();
*/

Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        list=new ArrayList<Integer>();
        while(head!=null){
            list.add(head.val);
            head=head.next;
        }
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int len=list.size();
        Random r=new Random();
        int index=r.nextInt(len);
        return list.get(index).intValue();
    }
    private ArrayList<Integer> list;
}


 Solution 2:  
 参考http://blog.jobbole.com/42550/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    private ListNode node;
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        node=head;
    }
    //要求任何一个元素被留下的概率为 1/n 用到了蓄水池算法
    /** Returns a random node's value. */
    public int getRandom() {
        Random r=new Random();
        ListNode cur=node;
        int res=cur.val;
        for(int i=1;cur.next!=null;i++){
            cur=cur.next;
            //选第i个元素
            if(r.nextInt(i+1)==i)
                res=cur.val;
        }
        return res;
    }
}


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    // 利用蓄水池算法 等概率随机选取k个元素 
    // 遍历链表 遍历到第i个元素时
    // i<=k时 保留的概率为1
    // i>k时 其有k/i的概率被保留 即产生0~i-1的随机数x时 x<k则保留该元素 
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    Solution(ListNode* head) {
        this->head=head;
    }
    
    /** Returns a random node's value. */
    int getRandom() {
        // head must not be null
        int res=this->head->val;
        int len=1;
        ListNode *cur=this->head->next;
        while(cur){
            len++;
            int rate=rand()%len;
            if(rate<1)
                res=cur->val;
            cur=cur->next;
        }
        return res;
    }
private:
    ListNode *head=NULL;
};
