148. Sort List
/*
Sort a linked list in O(n log n) time using constant space complexity.

*/

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //MergeSort 利用快慢指针找到链表中点
    ListNode* sortList(ListNode* head) {
        if(head==NULL||head->next==NULL)
            return head;
        ListNode *pre=NULL,*fp=head,*sp=head;
        //快慢指针找到链表中点
        while(fp!=NULL&&fp->next!=NULL){
            pre=sp;
            sp=sp->next;
            fp=fp->next->next;
        }
        pre->next=NULL;
        //两部分排序
        ListNode *h1=sortList(head);
        ListNode *h2=sortList(sp);
        //归并
        return merge(h1,h2);
    }
    ListNode *merge(ListNode *h1,ListNode *h2){
        ListNode* feakHead=new ListNode(0);
        ListNode*cur=feakHead;
        while(h1!=NULL&&h2!=NULL){
            if(h1->val<h2->val){
                cur->next=h1;
                h1=h1->next;
            }
            else{
                cur->next=h2;
                h2=h2->next;
            }
            cur=cur->next;
        }
        if(h1)
            cur->next=h1;
        if(h2)
            cur->next=h2;
        return feakHead->next;
    }
};


update:
class Solution {
public:
    // 利用merge sort思想排序 基于快慢指针找到中点
    ListNode* sortList(ListNode* head) {
        // 头指针为空或只有一个节点 无序排序直接返回
        if(!head || !head->next)
            return head;
        // 将原链表平均拆分成两半
        ListNode *fast=head,*slow=head;
        while(fast->next&&fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        // slow指向第一个链表的最后一个节点 fast指向最后一个节点
        ListNode *head2=slow->next;
        slow->next=NULL; // 拆分 要将第一个链表的尾部置为NULL
        ListNode *l1=sortList(head);
        ListNode *l2=sortList(head2);
        return merge(l1,l2);
    }
private:
    ListNode *merge(ListNode *l1,ListNode *l2){
        ListNode *feakNode=new ListNode(0);
        ListNode *cur=feakNode;
        while(l1&&l2){
            if(l1->val<l2->val){
                cur->next=l1;
                l1=l1->next;
            }
            else{
                cur->next=l2;
                l2=l2->next;
            }
            cur=cur->next;
        }
        if(l1)
            cur->next=l1;
        if(l2)
            cur->next=l2;
        return feakNode->next;
    }
};
