148. Sort List
/*
Sort a linked list in O(n log n) time using constant space complexity.

*/

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //MergeSort 利用快慢指针找到链表中点
    ListNode* sortList(ListNode* head) {
        if(head==NULL||head->next==NULL)
            return head;
        ListNode *pre=NULL,*fp=head,*sp=head;
        //快慢指针找到链表中点
        while(fp!=NULL&&fp->next!=NULL){
            pre=sp;
            sp=sp->next;
            fp=fp->next->next;
        }
        pre->next=NULL;
        //两部分排序
        ListNode *h1=sortList(head);
        ListNode *h2=sortList(sp);
        //归并
        return merge(h1,h2);
    }
    ListNode *merge(ListNode *h1,ListNode *h2){
        ListNode* feakHead=new ListNode(0);
        ListNode*cur=feakHead;
        while(h1!=NULL&&h2!=NULL){
            if(h1->val<h2->val){
                cur->next=h1;
                h1=h1->next;
            }
            else{
                cur->next=h2;
                h2=h2->next;
            }
            cur=cur->next;
        }
        if(h1)
            cur->next=h1;
        if(h2)
            cur->next=h2;
        return feakHead->next;
    }
};
