593. Valid Square

/*
Given the coordinates of four points in 2D space, return whether the four points could construct a square.
The coordinate (x,y) of a point is represented by an integer array with two integers.

Example:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: True

Note:
  All the input integers are in the range [-10000, 10000].
  A valid square has four equal sides with positive length and four equal angles (90-degree angles).
  Input points have no order.

*/

Solution:
class Solution {
public:
    //计算所有点之间的距离 四条最短的边要相等 两条最长的要相等 对角线
    //还要考虑不应该有重合的点(距离为0)
    int dis(vector<int>&p1,vector<int>&p2){
        return pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2);
    }
    
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        unordered_set<int> s({dis(p1,p2),dis(p1,p3),dis(p1,p4),dis(p2,p3),dis(p2,p4),dis(p3,p4)});
        return !s.count(0)&&s.size()==2;
    }
};
