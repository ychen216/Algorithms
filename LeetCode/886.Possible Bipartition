886. Possible Bipartition
/*
Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.

Each person may dislike some other people, and they should not go into the same group. 

Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.

Return true if and only if it is possible to split everyone into two groups in this way.

Example 1:
Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]

Example 2:
Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false

Example 3:
Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false

Note:
  1 <= N <= 2000
  0 <= dislikes.length <= 10000
  1 <= dislikes[i][j] <= N
  dislikes[i][0] < dislikes[i][1]
  There does not exist i != j for which dislikes[i] == dislikes[j].
*/

Solution 1:
class Solution {
public:
    // 染色法 利用dfs或bfs -1未染色 0,1分别为两个group的颜色
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        vector<int> color(N+1,-1);
        unordered_map<int,vector<int>> graph;
        // 存储无向图 一定要是无向图 不能当做有向图来处理 不然会出错
        // 想象一下 这里的dislike应该是双向的
        for(auto &edge: dislikes){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        
        for(int i=1;i<=N;i++){
            if(color[i]==-1){
                color[i]=0;
                queue<int> q;
                q.push(i);
                while(!q.empty()){
                    int cur=q.front();
                    q.pop();
                    for(auto j:graph[cur]){
                        if(color[j]==-1){
                            color[j]=1-color[cur];
                            q.push(j);
                        }
                       
                        else if(color[j]==color[cur])
                            return false;
                    }
                }
            }
        }
        return true;
    }
};

Solution 2:dfs
class Solution {
public:
    // 染色法 利用dfs或bfs -1未染色 0,1分别为两个group的颜色
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        vector<int> color(N+1,-1);
        unordered_map<int,vector<int>> graph;
        // 存储无向图 一定要是无向图 不能当做有向图来处理 不然会出错
        // 想象一下 这里的dislike应该是双向的
        for(auto &edge: dislikes){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        
        for(int i=1;i<=N;i++){
            if(color[i]==-1){
                if(!isValid(i,color,graph,0))
                    return false;
            }
        }
        return true;
    }
private:
    bool isValid(int cur,vector<int>&color,unordered_map<int,vector<int>> &graph,int parent_color){
        // cur 已经染色了
        if(color[cur]!=-1)
            return color[cur]!=parent_color;
        // cur染色
        color[cur]=1-parent_color;
        for(auto next:graph[cur]){
            if(!isValid(next,color,graph,color[cur]))
                return false;
        }
        return true;
    }
};
