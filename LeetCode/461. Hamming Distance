461. Hamming Distance
/*
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.

*/

Solution 1:
class Solution  {
public:
    int hammingDistance(int x, int y) {
        int count=0;
        while(x!=0&&y!=0){
            if((x%2)!=(y%2))
                count++;
            x/=2;
            y/=2;
        }
        
        while(x!=0){
            //为1的情况下不同
            if(x%2==1)
                count++;
            x/=2;
        }
        while(y!=0){
            if(y%2==1)
                count++;
            y/=2;
        }
        return count;
    }
};


Solution 2:
class Solution {
public:
    /*
        求两个数二进制表示中不同的位数
        可以利用异或操作 A^B中 A和B不同的二进制位将会置为1
        然后可以求C=A^B中1的个数
        可以利用C&(C-1)求1的个数
    */
    int hammingDistance(int x, int y) {
        int C=x^y;
        int cnt=0;
        while(C!=0){
            cnt++;
            C&=(C-1);
        }
        return cnt;
    }
};
