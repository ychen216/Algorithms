525. Contiguous Array

/*
Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.
Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.
Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
*/

Solution:
class Solution {
public:
    //nums中值为0的元素 转化为-1,那么就转化为sum[i,j]=0的问题
    //利用map记录sum出现的下标i，如果在j处sum继续出现 那么说明sum[i+1,j]=0 
    int findMaxLength(vector<int>& nums) {
        int size=nums.size();
        if(size<2)
            return 0;
        int sum=0,maxLen=0;
        map<int,int> mmap;
        mmap[0]=-1;//初始化必须
        for(int i=0;i<size;i++){
            if(nums[i]==0)
                sum--;
            else
                sum++;
            if(mmap.count(sum)==0)
                mmap[sum]=i;
            else
                maxLen=max(maxLen,i-mmap[sum]);
        }
        return maxLen;
    
    }
};

update: unordered_map
class Solution {
public:
    /*
        求拥有相同0,1个数的最长子字符串长度
        可以转化为求区间元素和为0的最长子区间:遇到0则减1 遇到1加1 那么当一个区间的元素和为0的时候表示0,1个数相同
        再进行一次转化 如果sum[0~i]==sum[0,j] 那么说明 sum[i+1,j]=0 即[i+1,j]是满足要求的区间
        所以只需要记录最早产生的sum的下标即可
        初始化 map[0]=-1
    */
    int findMaxLength(vector<int>& nums) {
        int size=nums.size();
        if(size<2)
            return 0;
        unordered_map<int,int> mmp;
        int sum=0,maxLen=0;
        mmp[0]=-1;
        for(int i=0;i<size;i++){
            if(nums[i]==0)
                sum--;
            else
                sum++;
            if(mmp.find(sum)==mmp.end())
                mmp[sum]=i;
            else
                maxLen=max(maxLen,i-mmp[sum]);
        }
        return maxLen;
    }
};
