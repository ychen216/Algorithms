268. Missing Number

/*
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
  Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
*/

Solution 1:
class Solution {
public:
    /*
    利用所有数的和 没有出现的数一定是[0..n]这n+1个数的和减去出现的数 余下的
    */
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int sum=n*(n+1)/2;
        for(int i=0;i<n;i++)
            sum-=nums[i];
        return sum;
        
    }
};

Solution 2:
class Solution {
public:
    /* 
        还可以利用异或 数字0~n刚好和下标0~n一一对应 相当于找2n-1中只出现一次的数
        如果数字i出现过 那么和下标i异或后得到0 两两异或得到0
        将所有数字和下标都异或上 那么最后得到的数就是未出现的数(即只出现一次的数,在下标中出现)
    */
    int missingNumber(vector<int>& nums) {
        int res=nums.size();// 异或上n
        for(int i=0;i<nums.size();i++){
            res^=i;
            res^=nums[i];
        }
        return res;
    }
};
