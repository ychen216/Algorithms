22. Generate Parentheses

/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
*/

Solution:recursive
class Solution {
public:
    void helper(vector<string>&res,string str,int left,int right){
        if(left==0&&right==0){
            res.push_back(str);
            return;
        }
        //还有左括号可以放
        if(left>0)
            helper(res,str+"(",left-1,right+1);
        if(right>0)
            helper(res,str+")",left,right-1);
            
    }
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        helper(res,"",n,0);
        return res;
    }
};


Solution 2:
class Solution {
public:
    // 时刻保持左括号不少于右括号
    vector<string> generateParenthesis(int n) {
        int left=0,right=0;
        vector<string> res;
        generator(res,"",left,right,n);
        return res;
    }
    
private:
    void generator(vector<string> &res,string format,int left,int right,int n){
        if(left>n||right>n)
            return;
        if(left==n&&right==n){
            res.push_back(format);
            return;
        }
        if(left>right)
            generator(res,format+")",left,right+1,n);
        generator(res,format+"(",left+1,right,n);
    }
};
