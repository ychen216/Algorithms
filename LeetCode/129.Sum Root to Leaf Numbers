129.Sum Root to Leaf Numbers

/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //sum代表上层路径之和
    int helper(TreeNode*root,int sum){
        if(root==NULL)
            return 0;
        sum=sum*10+root->val;
        if(!root->left&&!root->right)
            return sum;
        else
            return helper(root->left,sum)+helper(root->right,sum);
    }
    
    int sumNumbers(TreeNode* root) {
        return helper(root,0);
    }
};

update:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int res=0;
        helper(root,0,res);
        return res;
    }
private:
    void helper(TreeNode *root,int preSum,int &res){
        if(!root)
            return;
        // update preSum
        preSum=preSum*10+root->val;
        if(!root->left&&!root->right){
            res+=preSum;
            return;
        }
        if(root->left)
            helper(root->left,preSum,res);   
        if(root->right)
            helper(root->right,preSum,res);
    }
};
