652.Find Duplicate Subtrees

/*
Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, 
you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with same node values.

Example 1: 
        1
       / \
      2   3
     /   / \
    4   2   4
       /
      4
The following are two duplicate subtrees:
      2
     /
    4
and
    4
Therefore, you need to return above trees' root in the form of a list.
*/
Solution:/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    利用map记录每一棵子树的前序或后序遍历结果
    为了避免NULL造成不同的子树的遍历输出是相同的,遍历到空树时用#代替该树 那么这样对树遍历的结果可以唯一确定一棵树
    如果已经出现过那么这棵树是重复的子树
    */
    string helper(TreeNode *root,unordered_map<string,int>&mmap,vector<TreeNode *>&res){
        if(root==NULL)
            return "#";
        string order=to_string(root->val)+","+helper(root->left,mmap,res)+","+helper(root->right,mmap,res);
        //相同的重复子树 只加入第一个
        if(mmap.count(order)&&mmap[order]==1)
            res.push_back(root);
        mmap[order]++;
        return order;
    }
    
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string,int> mmap;
        vector<TreeNode *> res;
        helper(root,mmap,res);
        return res;
    }
};

update 解释
class Solution {
public:
    /*
        利用包含空节点的前序或者后序遍历唯一确定、表示一棵树
        Two trees are duplicate if they have the same structure with same node values.
        如果两个节点有相同的结构(即,他们及他们的子树完全相同) 那么他们的前序,后序表示是相同的
        利用map记录前序or后序表示出现的次数 如果出现超过一次那么即为duplicate node
    */
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode *> res;
        unordered_map<string,int> mmp;
        preOrder(root,mmp,res);
        return res;
    }
    
private:
    string preOrder(TreeNode *root,unordered_map<string,int> &mmp, vector<TreeNode *>&res){
        if(root==nullptr)
            return "#";
        string order=to_string(root->val)+","+preOrder(root->left,mmp,res)+","+preOrder(root->right,mmp,res);
        // 已经出现过一次 那么是duplicate node 如果mmp[order]>1说明是有多个重复的 只需要加入一次
        if(mmp.find(order)!=mmp.end()&&mmp[order]==1)
            res.push_back(root);
        mmp[order]++;
        return order;
    }
};
