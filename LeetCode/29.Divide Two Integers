29. Divide Two Integers
/*
    Divide two integers without using multiplication, division and mod operator.

    If it is overflow, return MAX_INT.
*/

Solution 1:TLE 当dividend==INT_MAX divisor==2
class Solution {
public:
    // 最直接的想法就是转化为减法 判断dividend可以减掉多少个divisor
    int divide(int dividend, int divisor) {
        if(divisor==0||dividend==INT_MIN&&divisor==-1)
            return INT_MAX;
        bool negative=(dividend<0) != (divisor<0);
        long dd=labs(dividend),dr=labs(divisor); //避免dividend==INT_MIN转化后超出INT
        int res=0;
        while(dd>=dr){
            res++;
            dd-=dr;
        }
        return negative?-res:res;
    }
};

Solution 2:
class Solution {
public:
    /*
        利用位移操作 来实现dividend能够减多少个divisor
        f(24,5)=24/5=20/5+4/5=4+0=4
        5左移2位就是20，而左移3位就是40超过了24，因此第一部分商为2^2=4(相当于减了4个5).
        对余数4再进行分析，发现5不需要移位就比4大，因此第二部分商为0. 加和可得，商为4.
    */
    int divide(int dividend, int divisor) {
        if(divisor==0||dividend==INT_MIN&&divisor==-1)
            return INT_MAX;
        bool negative=(dividend<0) != (divisor<0);
        long dd=labs(dividend),dr=labs(divisor); //避免dividend==INT_MIN转化后超出INT
        long res=0; //不能用int 避免测试用例 INT_MIN / 1 这样的话res=abs(INT_MIN)超出了INT_MAX的表示范围 无法表示
        while(dd>=dr){
            long tmp_dr=dr, multiple=1;//dd至少是dr的一倍 dr和mutiple每次都翻倍
            while(dd>=(tmp_dr<<1)){
                tmp_dr<<=1;
                multiple<<=1;
            }
            res+=multiple;
            dd-=tmp_dr;
        }
        return negative?-res:res;
    }
};
