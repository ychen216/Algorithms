39. Combination Sum

/*
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
  All numbers (including target) will be positive integers.
  The solution set must not contain duplicate combinations.
  For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

*/

Solution 1:

class Solution {
public:
    void helper(vector<vector<int>> &res,vector<int> &temp,vector<int> candidates,int start,int target){
        if(target<=0){
            if(target==0)
                res.push_back(temp);
            return;
        }
        for(int i=start;i<candidates.size();i++){
            temp.push_back(candidates[i]);
            helper(res,temp,candidates,i,target-candidates[i]);
            temp.pop_back();
                
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> temp;
        sort(candidates.begin(),candidates.end());
        helper(res,temp,candidates,0,target);
        return res;
    }
};

update:
class Solution {
public:
    // 本题中 candidates without duplicates 不需要对candidates进行排序来保证结果中没有重复的combinations
    // 且本题中一个数字可以多次使用所以每一次从start从再次搜索
    // temp用引用避免重复复制操作
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> temp;
        helper(res,candidates,temp,target,0);
        return res;
    }
private:
    void helper(vector<vector<int>> &res,vector<int> &nums,vector<int> &temp,int leftNum,int start){
        if(leftNum<=0){
            if(leftNum==0)
                res.push_back(temp);
            return;
        }
        for(int i=start;i<nums.size();i++){
            temp.push_back(nums[i]);
            helper(res,nums,temp,leftNum-nums[i],i);
            temp.pop_back();
        }
    }
};

update: 可以利用sort来完成剪枝
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        sort(candidates.begin(),candidates.end());
        vector<int> v;
        helper(candidates,0,target,v,res);
        return res;
    }
private:
    void helper(vector<int>& nums,int start,int leftSum,vector<int> &cand,vector<vector<int>>&res){
        if(leftSum<=0){
            if(leftSum==0)
                res.push_back(cand);
            return;
        }
        for(int i=start;i<nums.size();i++){
            //剪枝 num经过排序 如果当前位置加入nums[i]已经超过target那么加入后面的元素只会更大
            if(leftSum-nums[i]<0)
                break;
            cand.push_back(nums[i]);
            helper(nums,i,leftSum-nums[i],cand,res);
            cand.pop_back();
        }
    }
};

Solution 2:
class Solution {
public:
    /*  本题中 candidates without duplicates 不需要对candidates进行排序来保证结果中没有重复的combinations
        DP  状态可以利用map存储
        dp[j]=dp[j-num]中的所有combination 都push_back num 的结果
        每一个数字可以无限次使用 类似于完全背包 内层循环从num到target即从该物体积到背包容积
    */
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        unordered_map<int,vector<vector<int>>> mmp;
        mmp[0]={{}};// 初始化{{}}不能是{} 
        for(auto num:candidates){
            for(int i=num;i<=target;i++){
                if(mmp.find(i-num)==mmp.end()||mmp[i-num].size()==0) continue;
                if(mmp.find(i)==mmp.end())
                    mmp[i]={};
                for(auto v:mmp[i-num]){
                    v.push_back(num);
                    mmp[i].push_back(v);
                }
            }
        }
        if(mmp.find(target)==mmp.end())
            return {};
        return mmp[target];
    }
};
