230. Kth Smallest Element in a BST

/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //中序遍历得到的是从小到大排列的顺序
    void travel(TreeNode *root,vector<int>&v){
        if(root->left)travel(root->left,v);
        v.push_back(root->val);
        if(root->right)travel(root->right,v);
    }
    
    int kthSmallest(TreeNode* root, int k) {
        if(root==NULL)
            return NULL;
        vector<int> res;
        travel(root,res);
        return res[k-1];
    }
};

Solution 2:

class Solution {
public:
    //改进 找到第k个就返回
    int cnt,ksmall;
    void travel(TreeNode *root){
        if(root->left)travel(root->left);
        cnt--;
        if(cnt==0){
            ksmall=root->val;
            return;
        }
        if(root->right)travel(root->right);
    }
    
    int kthSmallest(TreeNode* root, int k) {
        cnt=k;
        travel(root);
        return ksmall;
    }
};

update:全局变量->引用
class Solution {
public:
    /*
        BST中序遍历的结果是递增序列所以遍历的第k个数就是Kth smallest element
        k必须用引用或是全局变量 要将先遍历左节点排除的small element从k里减掉 而不是保持原来的大小
    */
    int kthSmallest(TreeNode* root, int k) {
        int res;
        helper(root,k,res);
        return res;
    }
private:
    void helper(TreeNode *node,int& cnt,int &res){
        if(!node){
            res=-1;
            return;
        }
        if(node->left)
            helper(node->left,cnt,res);
        cnt--;
        if(cnt==0){
            res=node->val;
            return;
        }
        if(node->right)
            helper(node->right,cnt,res);
    }
};

Solution 3:
class Solution {
public:
    //利用栈将左孩子都压入栈 栈顶元素p是最小的元素
    //出栈后 将p->right及其左孩子都压入栈 栈顶为次小元素
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *> st;
        pushLeftNode(st,root);
        for(int i=1;i<k;i++){
            TreeNode *small=st.top();
            st.pop();
            pushLeftNode(st,small->right);
        }
        return st.top()->val;        
    }
private:
    void pushLeftNode(stack<TreeNode *> &st,TreeNode *root){
        while(root){
            st.push(root);
            root=root->left;
        };
    }
};

update:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // 利用中序遍历找到第k小的元素
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *>st;
        TreeNode *cur=root;
        int res=0;
        while(cur || !st.empty()){
            if(cur){
                st.push(cur);
                cur=cur->left;
            }else{
                cur=st.top();
                st.pop();
                k--;
                if(k==0){
                    res=cur->val;
                    break;
                }
                cur=cur->right;
            }
        }
        return res;
    }
};
