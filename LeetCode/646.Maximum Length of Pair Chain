646. Maximum Length of Pair Chain
/*
You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.
Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.
Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. 
You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
  The number of given pairs will be in the range [1, 1000].
*/

Solution：
class Solution {
public:
    //贪心 按照结尾元素从小到大排序 每次选择结尾元素最小的 类似活动安排
    static bool cmp(const vector<int>&a,const vector<int>&b){
        return a[1]<b[1];
    }
    int findLongestChain(vector<vector<int>>& pairs) {
        int size=pairs.size();
        if(size<=1)
            return size;
        sort(pairs.begin(),pairs.end(),cmp);
        int res=0;
        int last=INT_MIN;
        for(auto &p:pairs){
            if(p[0]>last){
                res++;
                last=p[1];
            }
        }
        return res;
    }
};

update compare function in sort
class Solution {
public:
    // 对pair(a,b)按照b从小到大排序 greedy选择
    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin(),pairs.end(),
             [&](auto &a,auto &b){
                 return a[1]<b[1];
             });
        int ans=0;
        int pre=INT_MIN;
        for(auto &p:pairs){
            if(p[0]>pre){
                ans++;
                pre=p[1];
            }
        }
        return ans;
    }
};

Solution 2:
class Solution {
public:
    // 除了贪心的做法也可以用dp
    int findLongestChain(vector<vector<int>>& pairs) {
        int n=pairs.size();
        if(n<2)
            return n;
        // [a,b]按照b从小打到大排序
        sort(pairs.begin(),pairs.end(),[](vector<int>&p1,vector<int>&p2){
            return p1[1]<p2[1];
        });
        vector<int> dp(n,1);
        int res=1;
        for(int i=1;i<n;i++){
            int cur=0;
            for(int j=0;j<i;j++){
                if(pairs[j][1]<pairs[i][0]&&dp[j]>cur)
                    cur=dp[j];
            }
            dp[i]=cur+1;
            res=max(res,dp[i]);
        }
        return res;
    }
};
