290. Word Pattern

/*
Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Examples:
pattern = "abba", str = "dog cat cat dog" should return true.
pattern = "abba", str = "dog cat cat fish" should return false.
pattern = "aaaa", str = "dog cat cat dog" should return false.
pattern = "abba", str = "dog dog dog dog" should return false.
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.
*/

Solution:
class Solution {
    //一一映射的关系
    public boolean wordPattern(String pattern, String str) {
        String []sarray=str.split(" ");
        int lenp=pattern.length();
        int lens=sarray.length;
        if(lenp!=lens)
            return false;
        Map<String,String> map1=new HashMap<String,String>();
        Map<String,String> map2=new HashMap<String,String>();
        for(int i=0;i<lens;i++){
            String k=String.valueOf(pattern.charAt(i));
            if(!map1.containsKey(k)&&!map2.containsKey(sarray[i])){
                map1.put(k,sarray[i]);
                map2.put(sarray[i],k);
            }
            else{
                if(map1.containsKey(k)&&map1.get(k).equals(sarray[i])==false)
                    return false;
                if(map2.containsKey(sarray[i])&&map2.get(sarray[i]).equals(k)==false)
                    return false;
            }
        }
        return true;
    }
}

Solution 2:
class Solution {
    // 一一对应
    public boolean wordPattern(String pattern, String str) {
        Map<Character,Integer> map1=new HashMap<Character,Integer>();// Character最后映射的字符串下标
        Map<String,Integer> map2=new HashMap<String,Integer>();// String最后映射的字符下标
        String[] words=str.split("\\s+");
        char [] pArray=pattern.toCharArray();
        if(pArray.length!=words.length)
            return false;
        for(int i=0;i<pArray.length;i++){
            if(!map1.containsKey(pArray[i])&&!map2.containsKey(words[i])){
                map1.put(pArray[i],i);
                map2.put(words[i],i);
            }
            else{
                if(!map1.containsKey(pArray[i])||!map2.containsKey(words[i]))
                    return false;
                if(!map1.get(pArray[i]).equals(map2.get(words[i])))
                   return false;
            }
        }
        return true;
    }
}

update:C++ version
class Solution {
public:
    // 字母和字符串要一一映射
    bool wordPattern(string pattern, string str) {
        unordered_map<char,int> mmp1;
        unordered_map<string,int> mmp2;
        stringstream ss(str);
        string cur;
        for(int i=0;i<pattern.length();i++){
            if(ss>>cur){
                if(mmp1.find(pattern[i])==mmp1.end()&&mmp2.find(cur)==mmp2.end()){
                    mmp1[pattern[i]]=i;
                    mmp2[cur]=i;
                }else if(mmp1.find(pattern[i])==mmp1.end()||mmp2.find(cur)==mmp2.end()){
                    return false;       
                }
                else if(mmp2[cur]!=mmp1[pattern[i]]){
                    return false;
                }
            }
            else{
                return false;
            }
        }
        //还有多余的词
        if(ss>>cur){
            return false;
        }
        return true;
        
    }
};

update:
pattern和str中的letter一一映射，只是现在把它们映射到最早配对上的位置
同时要考虑pattern长度和letter数目是否一致
class Solution {
public:
    bool wordPattern(string pattern, string str) {
        int len=pattern.length();
        stringstream ss(str);
        string cur;
        int i=0;
        unordered_map<char,int> map1;//映射到出现的位置
        unordered_map<string,int> map2;//映射到位置
        while(ss>>cur){
            //str中单词多于pattern
            if(i>=len){
                return false;
            }
            //pattern[i]和当前letter都没有使用过 匹配在一起 映射到同一个位置
            if(map1.find(pattern[i])==map1.end()&&map2.find(cur)==map2.end()){
                map1[pattern[i]]=i;
                map2[cur]=i;
            }
            //pattern[i]和当前letter都匹配过了
            else if(map1.find(pattern[i])!=map1.end()&&map2.find(cur)!=map2.end()){
                //如果pattern[i]和letter不是映射到同一个位置 则不匹配
                if(map1[pattern[i]]!=map2[cur]){
                    return false;
                }
            }
            //一个匹配过 一个未匹配过
            else{
                return false;
            }
            i++;
        }
        //保证patter的长度和str中letter长度一致
        return i==len;
    }
};
