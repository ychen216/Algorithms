515. Find Largest Value in Each Tree Row

/*
You need to find the largest value in each row of a binary tree.

Example:
Input: 

          1
         / \
        3   2
       / \   \  
      5   3   9 

Output: [1, 3, 9]

*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

struct Node{
    TreeNode *root;
    int floor;
    Node(TreeNode *r,int f):root(r),floor(f){}
};
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        if(root==NULL)
            return {};
        queue<Node> q;
        Node node(root,0);
        q.push(node);
        int maxFloor=-1;
        vector<int> res;
        while(!q.empty()){
            node=q.front();
            q.pop();
            if(node.floor>maxFloor){
                maxFloor=node.floor;
                res.push_back(node.root->val);
            }
            else{
                res[node.floor]=max(res[node.floor],node.root->val);
            }
            if(node.root->left){
                Node n1(node.root->left,node.floor+1);
                q.push(n1);
            }
            if(node.root->right){
                Node n1(node.root->right,node.floor+1);
                q.push(n1);
            }
        }
        return res;
    }
};

Solution 2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> res;
        if(root==NULL)
            return res;
        queue<TreeNode *> q;
        q.push(root);
        TreeNode *cur=NULL;
        while(!q.empty()){
            int n=q.size();
            int maxVal=INT_MIN;
            for(int i=0;i<n;i++){
                cur=q.front();
                q.pop();
                maxVal=max(maxVal,cur->val);
                if(cur->left)
                    q.push(cur->left);
                if(cur->right)
                    q.push(cur->right);
            }
            res.push_back(maxVal);
        }
        return res;
    }
};

Solution 3:recursive
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int>res;
        travel(res,root,0);
        return res;
    }
private:
    void travel(vector<int>&res,TreeNode *root,int level){
        if(root==NULL)
            return;
        if(res.size()<=level)
            res.push_back(root->val);
        else
            res[level]=max(res[level],root->val);
        if(root->left)
            travel(res,root->left,level+1);
        if(root->right)
            travel(res,root->right,level+1);
    }
};
