79. Word Search
/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
  word = "ABCCED", -> returns true,
  word = "SEE", -> returns true,
  word = "ABCB", -> returns false.
*/

Solution:
class Solution {
public:
    bool helper(vector<vector<char>>& board,string &word,int row,int col,int x,int y,int pos){
        if(pos==word.length())
            return true;
        if(x<0||x>=row||y<0||y>=col||board[x][y]=='#')
            return false;
        //board[x][y]在本轮递归中没有访问
        if(board[x][y]==word[pos]){
            char temp=board[x][y];
            board[x][y]='#';
            bool res=helper(board,word,row,col,x-1,y,pos+1)||helper(board,word,row,col,x+1,y,pos+1)
                ||helper(board,word,row,col,x,y-1,pos+1)||helper(board,word,row,col,x,y+1,pos+1);
            board[x][y]=temp;
            return res;
        }
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int row=board.size();
        int col=board[0].size();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++)
                if(helper(board,word,row,col,i,j,0))
                    return true;
        }
        return false;
    }
};
