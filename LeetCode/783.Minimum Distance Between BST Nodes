783. Minimum Distance Between BST Nodes

/*
Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \    
    1   3  

while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.
Note:
  The size of the BST will be between 2 and 100.
  The BST is always valid, each node's value is an integer, and each node's value is different.
*/

Solution 1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // 利用中序遍历得到递增数组
    int minDiffInBST(TreeNode* root) {
        vector<int> node;
        helper(root,node);
        int res=INT_MAX;
        for(int i=1;i<node.size();i++)
            res=min(res,node[i]-node[i-1]);
        return res;
    }
private:
    void helper(TreeNode *root,vector<int>&node){
        if(root==NULL)
            return;
        helper(root->left,node);
        node.push_back(root->val);
        helper(root->right,node);
    }
};

Solution 2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // 利用中序遍历
    int minDiffInBST(TreeNode* root) {
        if(root->left) minDiffInBST(root->left);
        if(pre>0) res=min(res,root->val-pre);
        pre=root->val;
        if(root->right) minDiffInBST(root->right);
        return res;
    }
private:
    int pre=-1,res=INT_MAX;
};
