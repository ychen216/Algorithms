299. Bulls and Cows
/*
You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess 
what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess 
match your secret number exactly in both digit and position (called "bulls") and how many digits match the secret number 
but locate in the wrong position (called "cows"). Your friend will use successive guesses and hints to eventually derive 
the secret number.

For example:

Secret number:  "1807"
Friend's guess: "7810"
Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)
Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return "1A3B".

Please note that both secret number and friend's guess may contain duplicate digits, for example:

Secret number:  "1123"
Friend's guess: "0111"
In this case, the 1st 1 in friend's guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return "1A1B".
You may assume that the secret number and your friend's guess only contain digits, and their lengths are always equal.
*/

Solution 1: two pass
class Solution {
public:
    //数字正确但是位置不正确的数字个数为 两个字符串中该字符除去正确位置的个数后 最小的个数
    string getHint(string secret, string guess) {
        int len=secret.length();
        if(len==0)
            return "0A0B";
        int map1[10]={0},map2[10]={0};
        int A=0;
        for(int i=0;i<len;i++){
            if(secret[i]==guess[i])
                A++;
            else{
                map1[secret[i]-'0']++;
                map2[guess[i]-'0']++;
            }
        }
        int B=0;
        for(int i=0;i<10;i++){
            if(map1[i]>0&&map2[i]>0)
                B+=min(map1[i],map2[i]);
        }
        return to_string(A)+"A"+to_string(B)+"B";
    }
};

update:
class Solution {
public:
    string getHint(string secret, string guess) {
        int bull=0,cow=0;
        vector<int> cnts(10,0), cntg(10,0);
        for(int i=0;i<secret.size();i++){
            if(secret[i]==guess[i]){
                bull++;
            }
            else{
                cnts[secret[i]-'0']++;
                cntg[guess[i]-'0']++;
            }
        }
        for(int i=0;i<10;i++){
            if(cnts[i]>0&&cntg[i]>0) // 也可以不加判断
                cow+=min(cnts[i],cntg[i]);
        }
        return to_string(bull)+"A"+to_string(cow)+"B";
    }
};

Solution 2:
class Solution {
public:
    /*
        改进 one-pass
        利用一个counter记录访问过的数字 secret++ 说明对secret的数字需求增加 guess-- guess的需求满足了一个
        如果counter[secret]<0 那么cow++ 说明之前已经有guess满足了该位secret的需求
        如果counter[guess]>0 cwo++ 说明之前存在对guess的需求 现在满足了
    */
    string getHint(string secret, string guess) {
        int bull=0,cow=0;
        vector<int> cnt(10,0);
        for(int i=0;i<secret.size();i++){
            if(secret[i]==guess[i]){
                bull++;
            }
            else{
                if(cnt[secret[i]-'0']<0) cow++;
                if(cnt[guess[i]-'0']>0) cow++;
                cnt[secret[i]-'0']++;
                cnt[guess[i]-'0']--;
            }
        }
        return to_string(bull)+"A"+to_string(cow)+"B";
    }
};

Solution 3:
class Solution {
public:
    /*
        记录secret每个字符出现的次数
        然后两次遍历 第一次将bull选出来 
        第二次检验是否存在cow 不能同时进行 否则 可能先把应该assign给bull的数字当成bull
        eg. secret 1231  guess 1334
        同时找的话 会将第一个3当做cow 其实应该是第二个3是bull
    */
    string getHint(string secret, string guess) {
        int cow=0,bull=0;
        unordered_map<char,int> cnt;
        for(auto c:secret)
            cnt[c]++;
        for(int i=0;i<secret.length();i++){
            if(secret[i]==guess[i]){
                cnt[secret[i]]--;
                bull++;
            }
        }
        for(int i=0;i<guess.length();i++){
            if(secret[i]!=guess[i]){
                if(cnt[guess[i]]>0){
                    cow++;
                    cnt[guess[i]]--;
                }
            }
        }
        return to_string(bull)+"A"+to_string(cow)+"B";
    }
};

update: 将记录cnt的操作合并到第一轮遍历中
class Solution {
public:
    /*
        记录secret每个字符出现的次数
        然后两次遍历 第一次将bull选出来 
        第二次检验是否存在cow 不能同时进行 否则 可能先把应该assign给bull的数字当成bull
        eg. secret 1231  guess 1334
        同时找的话 会将第一个3当做cow 其实应该是第二个3是bull
    */
    string getHint(string secret, string guess) {
        int cow=0,bull=0;
        unordered_map<char,int> cnt;
        for(int i=0;i<secret.length();i++){
            if(secret[i]==guess[i]){
                bull++;
            }else{
                cnt[secret[i]]++;
            }
        }
        for(int i=0;i<guess.length();i++){
            if(secret[i]!=guess[i]){
                if(cnt[guess[i]]>0){
                    cow++;
                    cnt[guess[i]]--;
                }
            }
        }
        return to_string(bull)+"A"+to_string(cow)+"B";
    }
};
