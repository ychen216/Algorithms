441. Arranging Coins

/*
You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Given n, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.

Example 1:

n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤

Because the 3rd row is incomplete, we return 2.
Example 2:

n = 8

The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤

Because the 4th row is incomplete, we return 3.
*/

Solution 1:
class Solution {
public:
    int arrangeCoins(int n) {
        int i=0;
        while(n>=i){
            n-=i;
            i++;
        }
        i--;
        return i; 
    }
};

update:
class Solution {
public:
    int arrangeCoins(int n) {
        int row=0;//第i层实际有i+1个cell
        while(row<n){
            row++;//得到该层的元素个数 以及当前合法层数
            n-=row;
        }
        return row;
    }
};

Solution 2：
class Solution {
public:
    // 找到1+2+3+4+..+k<=n的最大的k 利用二分搜索
    // (1+k)k<=2n
    int arrangeCoins(int n) {
        long low=1,high=sqrt(2.0*n);// 避免int溢出
        long mid,sum;
        while(low<=high){
            mid=low+(high-low)/2;
            sum=(1+mid)*mid/2;
            if(sum<=n)
                low=mid+1;
            else
                high=mid-1;
        }
        return low-1;
    }
};

update:BS新模板。。。写了好几次才通过 要注意边界条件 即跳出循环之后的start end的判断
class Solution {
public:
    //找到第一个0.5*k*(1+k) >n 那么符合条件的行数=k-1
    int arrangeCoins(long n) {
        long start=1,end=sqrt(2*n),mid,tmp;
        while(start+1<end){
            mid=start+(end-start)/2;
            tmp=mid*(mid+1)/2;
            if(tmp>n){
                end=mid;
            }
            else{
                start=mid;
            }
        }
        long res1=start*(start+1)/2,res2=end*(end+1)/2;
        if(res1>=n){
            if(res1==n)
                return start;
            return start-1;
        }
        if(res2>=n){
            if(res2==n)
                return end;
            return end-1;
        }
        // res2<n
        return end;
    }
};

Solution 3：
class Solution {
public:
    /*
    一种数学解法O(1)，充分利用了等差数列的性质，我们建立等式, n = (1 + x) * x / 2,
    用一元二次方程的求根公式可以得到 x = (-1 + sqrt(8 * n + 1)) / 2, 然后取整后就是能填满的行
    */
    int arrangeCoins(int n) {
        return (int)((-1 + sqrt(1 + 8 * (long)n)) / 2);
    }
};
