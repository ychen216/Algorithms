53. Maximum Subarray

/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
*/

Solution 1:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int size=nums.size();
        int dp[size];
        dp[0]=nums[0];
        int maxSum=dp[0];
        for(int i=1;i<size;i++){
            dp[i]=max(dp[i-1]+nums[i],nums[i]);
            maxSum=max(maxSum,dp[i]);
        }
        return maxSum;
    }
};

改写 空间 O(1)
class Solution {
public:
    // dp 考虑以元素i结尾的子数组的和
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        int maxSum=nums[0];
        int preSum=nums[0];
        for(int i=1;i<n;i++){
            // 对于第i个元素来说以i结尾的subarray有两种情况
            // 1.自己一个元素  2.拼接到i-1元素结尾的subarray后面
            preSum=preSum<=0?nums[i]:preSum+nums[i];
            maxSum=max(preSum,maxSum);
        }
        return maxSum;
    }
};

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        int dp=nums[0];//以nums[i]结尾的maxSubArray的和
        int res=nums[0];
        for(int i=1;i<n;i++){
            dp=max(nums[i],nums[i]+dp);
            res=max(dp,res);
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    // 利用sum数组将问题转化为121.Best Time to Buy and Sell Stock
    // 为每一个元素寻找之前sum最小的点
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        vector<int> sum(n+1,0);
        for(int i=0;i<n;i++){
            sum[i+1]=sum[i]+nums[i];
        }
        int res=nums[0],minSum=sum[0];//初始化第0个元素单独为subarray的情况
        for(int i=1;i<n;i++){
            minSum=min(minSum,sum[i]);
            res=max(res,sum[i+1]-minSum);
        }
        return res;
    }
};
