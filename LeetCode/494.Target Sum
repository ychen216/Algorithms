494. Target Sum
/*
You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -.
For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
There are 5 ways to assign symbols to make the sum of nums be target 3.
Note:
  The length of the given array is positive and will not exceed 20.
  The sum of elements in the given array will not exceed 1000.
  Your output answer is guaranteed to be fitted in a 32-bit integer.
*/

Solution:recursive
class Solution {
public:
    int cnt;
    void helper(vector<int>&nums,int pos,int S){
        if(pos==nums.size()){
            if(S==0)
                cnt++;
            return;
        }
        //选择+
        helper(nums,pos+1,S-nums[pos]);
        //选择-
        helper(nums,pos+1,S+nums[pos]);
    }
    
    int findTargetSumWays(vector<int>& nums, int S) {
        cnt=0;
        helper(nums,0,S);
        return cnt;
    }
};

Solution 2:dp
class Solution {
publ/*
    Given nums = [1, 2, 3, 4, 5] and target = 3 then one possible solution is +1-2+3-4+5 = 3
    Here positive subset is P = [1, 3, 5] and negative subset is N = [2, 4]
    Then let's see how this can be converted to a subset sum problem:
        sum(P) - sum(N) = target
    sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)
                           2 * sum(P) = target + sum(nums)
    So the original problem has been converted to a subset sum problem as follows:
    Find a subset P of nums such that sum(P) = (target + sum(nums)) / 2
    Note that the above formula has proved that target + sum(nums) must be even
    这样可以转化为一个背包问题 n个东西 每一次可以选择要或者不要 最后要求sum=target也就是容量
    这是一个多阶段的背包问题
    dp[i][j] = dp[i-1][j] + dp[i-1][j-a[i]](1 <= i <= n, a[i]<= j <= target)
    但其实如果有可能存在target sum的话 必然有 target<sum 在保证这一点的情况下 j必然是正数 且max(j)<=sum(nums)
    每次转移只依赖i-1的状态 我们可以将二维转化为1维 要注意遍历时同背包问题一样需要倒序 从容量S开始 for(i=S;i>=num;i--)
    dp[j]+=dp[j-num[i]]
    */
    int subSetSum(vector<int>&nums,int S){
        int dp[S+1]={0};//记录和为i的子集个数
        dp[0]=1;
        for(auto num:nums){
            //看每一个num 可以跟哪些数组合
            for(int j=S;j>=num;j--)
                dp[j]+=dp[j-num];
        }
        return dp[S];
    }
    
    int findTargetSumWays(vector<int>& nums, int S) {
        int size=nums.size();
        int sum=0;
        for(int i=0;i<size;i++)
            sum+=nums[i];
        //sum+S是奇数
        if(sum<S||(sum+S)%2)
            return 0;
        return subSetSum(nums,(sum+S)/2);
    }
};
