797. All Paths From Source to Target

/*
Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

Example:
Input: [[1,2], [3], [3], []] 
Output: [[0,1,3],[0,2,3]] 
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Note:
  The number of nodes in the graph will be in the range [2, 15].
  You can print different paths in any order, but you should keep the order of nodes inside one path.
*/

Solution:
class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> res;
        dfs(graph,{0},res);
        return res;
    }
private:
    void dfs(vector<vector<int>>& graph,vector<int> path,vector<vector<int>>&res){
        int prev=path.back();//当前路径的最后一个节点
        if(prev==graph.size()-1){//已走到节点n-1
            res.push_back(path);
            return;
        }
        //遍历当前可以走的每一条路径
        for(int i=0;i<graph[prev].size();i++){
            path.push_back(graph[prev][i]);
            dfs(graph,path,res);
            path.pop_back();
        }
    }
};
