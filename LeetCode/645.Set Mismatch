645. Set Mismatch

/*
The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.

Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]
Note:
The given array size will in the range [2, 10000].
The given array's numbers won't have any order.

*/

Solution 1:
class Solution {
public:
    /*
        1+2+3+...+x+...+y+...n=sum,其中x为发生错误后重复的元素,y为失去的元素
        发生错误后的和sum'为
        sum'=sum+x-y
        sum-sum'=y-x;
        y=sum-sum'+x
    */
    vector<int> findErrorNums(vector<int>& nums) {
        int size=nums.size();
        set<int> s;
        int index;//记录重复出现的;
        int sum=size*(size+1)/2;
        for(int i=0;i<size;i++){
            if(s.count(nums[i]))
                index=i;
            else
                s.insert(nums[i]);
            sum-=nums[i];
        }
        return {nums[index],nums[index]+sum};
    }
};

改写
class Solution {
public:
    /*
        1+2+3+...+x+...+y+...n=sum,其中x为发生错误后重复的元素,y为失去的元素
        发生错误后的和sum'为
        sum'=sum+x-y
        y=sum-sum'+x;
        当找到重复元素x之后就可以求解y
    */
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        int oldSum=(1+n)*n/2;
        unordered_set<int> sset;
        int duplicate;
        bool findDuplicate=false;
        for(auto &i:nums){
            oldSum-=i;
            if(!findDuplicate){
                if(sset.find(i)==sset.end())
                    sset.insert(i);
                else{
                    duplicate=i;
                    findDuplicate=true;
                }
            }
        }
        return {duplicate,oldSum+duplicate};
    }
};

Solution 2:
class Solution {
public:
    /*
        1+2+3+...+x+...+y+...n=sum,其中x为发生错误后重复的元素,y为失去的元素
        发生错误后的和sum'为
        sum'=sum+x-y
        y=sum-sum'+x;
        当找到重复元素x之后就可以求解y
    */
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        int oldSum=(1+n)*n/2;
        unordered_set<int> sset;
        int newSum=0,duplicate;
        bool findDuplicate=false;
        for(auto &i:nums){
            newSum+=i;
            if(!findDuplicate){
                if(sset.find(i)==sset.end())
                    sset.insert(i);
                else{
                    duplicate=i;
                    findDuplicate=true;
                }
            }
        }
        return {duplicate,oldSum-newSum+duplicate};
    }
};
