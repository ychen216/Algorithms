301. Remove Invalid Parentheses
/*
Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Examples:
  "()())()" -> ["()()()", "(())()"]
  "(a)())()" -> ["(a)()()", "(a())()"]
  ")(" -> [""]
*/

Solution 1:
class Solution {
public:
    /*
        移除最少的括号使得给定字符串为一个合法的含有括号的字符串 
        参考https://www.cnblogs.com/grandyang/p/4944875.html
        利用counter记录左括号和右括号的差值 当其小于0时需要删除')' 
        但是为了避免删除后得到重复的答案 要记录最后一个删除的位置 如()()) 可以删除的右括号有三个位置但是不重复的结果只有两个
        针对右括号的情况 可以进行代码复用 逆置字符串后再次进行类似操作
    */
    vector<string> removeInvalidParentheses(string s) {
        vector<string> res;
        helper(s,res,0,0,{'(',')'});
        return res;
    }
private:
    //start此次扫描开始的位置 lastd上一次删除的位置
    void helper(string s,vector<string> &res,int start,int lastd,vector<char> p){
        for(int i=start,cnt=0;i<s.length();i++){
            if(s[i]==p[0])cnt++;
            else if(s[i]==p[1])cnt--;
            if(cnt>=0)continue;
            //删除一个括号
            for(int j=lastd;j<=i;j++){
                if(s[j]==p[1]&&(j==lastd||s[j]!=s[j-1])){
                    //保证无重复答案
                    helper(s.substr(0,j)+s.substr(j+1),res,i,j,p);
                }
            }
            return;
        }
        string rev=string(s.rbegin(),s.rend());
        if(p[0]=='(')
            helper(rev,res,0,0,{')','('});
        else
            res.push_back(rev);
        
    }
};

Solution 2:
class Solution {
public:
    /*
        移除最少的括号使得给定字符串为一个合法的含有括号的字符串 
        这算是用bfs求最短距离的变形 从给定的字符串每次走一步(移除一个字符)最少需要几步可以到达合法的字符串
        参考https://www.cnblogs.com/grandyang/p/4944875.html
        bfs 给定字符串排入队中，然后取出检测其是否合法，若合法直接返回
        否则，对其进行遍历，对于遇到的左右括号的字符，去掉括号字符生成一个新的字符串
        如果这个字符串之前没有遇到过，将其排入队中，我们用哈希集合记录一个字符串是否出现过
        我们对队列中的每个元素都进行相同的操作，直到队列为空还没找到合法的字符串的话，那就返回空集，
    */
    vector<string> removeInvalidParentheses(string s) {
        vector<string> res;
        unordered_set<string> visit;
        queue<string> q;
        q.push(s);
        visit.insert(s);
        while(!q.empty()){
            bool found=false;//该轮就出现了删除最少字符能得到的合法字符串
            int n=q.size();
            for(int i=0;i<n;i++){
                string cur=q.front();
                q.pop();
                if(is_valid(cur)){
                    found=true;
                    res.push_back(cur);
                }
                if(found){
                    //该项不需要继续拓展了 该轮已经出现了答案 继续往下拓展就不是删除最少字符了
                    continue;
                }
                //继续拓展 删除一个括号
                for(int j=0;j<cur.length();j++){
                    //非括号的字符不需要考虑
                    if(cur[j]!='('&&cur[j]!=')') continue;
                    string next=cur.substr(0,j)+cur.substr(j+1);
                    if(visit.find(next)!=visit.end()) continue;
                    q.push(next);
                    visit.insert(next);
                }
            }
            //下一轮就不再是删除最少字符的答案了
            if(found){
                break;
            }
        }
        return res;
    }
private:
    //合法的括号串 要求时刻左括号不少于右括号 遍历完整个串 左括号和右括号数目相同
    bool is_valid(const string &s){
        int cnt=0;//记录左括号比右括号多的数目
        for(auto &c:s){
            if(c=='(') cnt++;
            else if(c==')'){
                if(--cnt<0){
                    return false;
                }
            }
        }
        return cnt==0;
    }
};
