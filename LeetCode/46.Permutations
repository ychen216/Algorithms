46. Permutations
/*
Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/

Solution 1: STL
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());//sort firstly then use next_permutation
        do{
            res.push_back(nums);
        }while(next_permutation(nums.begin(),nums.end()));
        return res;
    }
};

Solution 2:recursive
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        helper(0,nums,res);
        return res;
    }
    
    void helper(int pos,vector<int>&nums,vector<vector<int>>&res){
        if(pos>=nums.size()){
            res.push_back(nums);
            return;
        }
        for(int i=pos;i<nums.size();i++){
            swap(nums[pos],nums[i]);
            helper(pos+1,nums,res);
            swap(nums[pos],nums[i]);
        }
    }
};

Solution 3: visit数组
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        vector<bool> visit(n,false);
        vector<vector<int>> res;
        permutation(res,nums,visit,{});
        return res;
    }
    
private:
    void permutation(vector<vector<int>> &res,vector<int>&nums,vector<bool>&visit,vector<int> cur){
        if(cur.size()==nums.size()){
            res.push_back(cur);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(visit[i])continue;
            visit[i]=true;
            cur.push_back(nums[i]);
            permutation(res,nums,visit,cur);
            cur.pop_back();
            visit[i]=false;
        }
    }
};
