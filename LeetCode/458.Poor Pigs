458.Poor Pigs

/*

There are 1000 buckets, one and only one of them is poisonous, while the rest are filled with water. They all look identical. If a pig 
drinks the poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket is poisonous within one hour?
Answer this question, and write an algorithm for the general case.

General case:
If there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the poisonous 
bucket within p minutes? There is exactly one bucket with poison.

Note:
  A pig can be allowed to drink simultaneously on as many buckets as one would like, and the feeding takes no time.
  After a pig has instantly finished drinking buckets, there has to be a cool down time of m minutes. During this time, only observation is allowed and no feedings at all.
  Any given bucket can be sampled an infinite number of times (by an unlimited number of pigs).

*/

Solution:
class Solution {
public:
    /*
        参考英文版 https://leetcode.com/problems/poor-pigs/discuss/94266/Another-explanation-and-solution
        参考中文版 https://blog.csdn.net/huanghanqian/article/details/77141719
        假设毒需要15分钟才能杀死猪，我们总共有60分钟测试
        如果一头猪都没有,那么只有一个桶时桶就是有毒的不需要测试
        如果有1头猪，他最多可以测试4次(60/15=4)==>最多可以在5个桶中找到有毒的那一个(如果前4次都没有死亡则第五个桶有毒)
        假设我们有 2 头猪，那么，用下列方式，我们能至多从25个桶中找到毒水。 把桶放置成 5×5 的方形:
         1  2  3  4  5
         6  7  8  9 10
        11 12 13 14 15
        16 17 18 19 20
        21 22 23 24 25
        使用一头猪来找毒水的行数 (让它喝下桶 1, 2, 3, 4, 5, 里的水，等15分钟；让它喝下桶 6, 7, 8, 9, 10, 里的水，等15分钟......)
        使用另一头猪来找毒水的列数 (让它喝下桶 1, 6, 11, 16, 21, 里的水，等15分钟；让它喝下桶 2, 7, 12, 17, 22, 里的水，等15分钟......)

        拥有60分钟，每次毒水测试需要15分钟，意味着我们可以进行4次测试。
        从 0min 开始第一波测试，第15min 出 0 的结果并进行第二波测试，第 30min 出15 的结果并进行第三波测试，
        第 45min 出 30 的结果并进行第4波测试。第 60min 出 45 的结果。如果第3行猪在第三次测试中死亡，那么毒水就在第3行。
        如果第4列猪在4次测试中都没死，那么毒水在它没喝的第5列中（这就是为什么只能做4波测试，却能够测试5行/列）。

        如果有3头猪，可以用 5×5×5 正方体，使用一头猪来测试一个维度：猪1确定z轴,按照x-y平面来喝水，从上到下一层层喝
        猪2确定x轴，按照y-z平面来喝，从左向右喝；猪3确定y轴，按照x-z平面从前向后。所以三头猪最多能测试125个桶。

        总的来说, 用这种方式，有pig只猪我们能测试 (⌊minutesToTest / minutesToDie⌋ + 1)^pigs个桶
        那么我们要求最小的pig使得 (⌊minutesToTest / minutesToDie⌋ + 1)^pigs >=bucket
        可以逐步增加pig看是否满足上式，也可以直接求出解析解：
        ==> 向上取整ceil(log(bucket)/log(⌊minutesToTest / minutesToDie⌋ + 1))
        double floor(double x);向下取整返回<=x的整数
        double ceil(double x);向上取整返回>=x的整数
        ⌊minutesToTest / minutesToDie⌋ + 1:一只猪在规定时间内,在一个维度上最多能在⌊minutesToTest / minutesToDie⌋ + 1 个桶中找到有毒的那一个
    */
    int poorPigs(int buckets, int minutesToDie, int minutesToTest) {
        int dimension_width=minutesToTest/minutesToDie + 1;
        //初始化0只猪的时候可以测试1个桶
        int pig=0;
        int can_test_bucket=1;
        while(can_test_bucket<buckets){
            pig++;
            can_test_bucket*=dimension_width;
        }
        return pig;
    }
};

or
int poorPigs(int buckets, int minutesToDie, int minutesToTest) {
     int dimension_width=minutesToTest/minutesToDie + 1;
     return ceil(log(buckets)/log(dimension_width));
}
