324. Wiggle Sort II
/*
Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example:
(1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6]. 
(2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].

Note:
You may assume all input has valid answer.
Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?
*/
Solution:
class Solution {
public:
    /*
    naive:
    先对数组进行排序, 然后从左往右奇数索引位置放大于中位数的数, 然后从右往左在偶数索引位置放小于中位数的数, 剩下的位置都放中位数. 
    时间复杂度为O(nlog(n)), 空间复杂度为O(n).
    */
    void wiggleSort(vector<int>& nums) {
        sort(nums.begin(),nums.end());//从小到大排序 
        int len=nums.size();
        int mid=nums[len/2];
        int lastEven=len%2?len-1:len-2;
        vector<int> ans(len,mid);
        int p=1;
        //在奇数位上从左向右填充大于mid的数
        for(int i=len-1;i>=0&&nums[i]>mid;i--,p+=2)
            ans[p]=nums[i];
        //在偶数位上从右向左填充小于mid的数
        for(int i=0;i<len&&nums[i]<mid;i++,lastEven-=2)
            ans[lastEven]=nums[i];
        nums=ans;
    }
};
