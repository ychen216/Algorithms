169. Majority Element

/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.
*/

Solution:

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int size=nums.size();
        int bound=size/2;
        int major;
        map<int,int> m;
        for(int i=0;i<size;i++){
            int cnt=m.count(nums[i]);
            if(cnt==0)
                m[nums[i]]=1;
            else
                m[nums[i]]++;
            if(m[nums[i]]>=bound){
                bound=m[nums[i]];
                major=nums[i];
            }
                
        }
        return major;
    }
    
};

Solution 2：
class Solution {
public:
    /*
    Moore's voting algorithm找出在一个数组中出现次数超过半数的元素
    */
    int majorityElement(vector<int>& nums) {
        int size=nums.size();
        int cnt=1,major=nums[0];
        for(int i=1;i<size;i++){
            if(cnt==0){
                major=nums[i];
                cnt=1;
            }
            else if(major==nums[i])
                cnt++;
            else
                cnt--;
        }
        return major;
    }
    
};
