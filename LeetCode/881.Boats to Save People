881. Boats to Save People
/*
The i-th person has weight people[i], and each boat can carry a maximum weight of limit.

Each boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.  (It is guaranteed each person can be carried by a boat.)

Example 1:
Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)

Example 2:
Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)

Example 3:
Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)

Note:
  1 <= people.length <= 50000
  1 <= people[i] <= limit <= 30000

*/

Solution:
class Solution {
public:
    /*
        idea:最重的人和最轻的同坐一艘船 如果超重 那么最重的人要自己坐一艘船
        将体重排序 利用双指针将首尾两个人进行配对
    */
    int numRescueBoats(vector<int>& people, int limit) {
        int n=people.size();
        if(n<2)
            return n;
        sort(people.begin(),people.end());
        int res=0;
        int left=0,right=n-1;
        while(left<right){
            if(people[left]+people[right]<=limit){
                // 两人共乘一艘船
                left++;
            }
            // 否则重的人自己一艘船
            right--;
            res++;
            /*
                if(people[left]+people[right]<=limit){
                    left++;
                    right--;
                    res++;
                }else{
                    right--;
                    res++;
                }
            */
        }
        // 处理中间可能遗漏的人
        if(left==right)
            res++;
        return res;
    }
};

可以将中间一个人配对的人 的处理 放在循环里
class Solution {
public:
    /*
        idea:最重的人和最轻的同坐一艘船 如果超重 那么最重的人要自己坐一艘船
        将体重排序 利用双指针将首尾两个人进行配对
    */
    int numRescueBoats(vector<int>& people, int limit) {
        int n=people.size();
        if(n<2)
            return n;
        sort(people.begin(),people.end());
        int res=0;
        int left=0,right=n-1;
        while(left<=right){
            if(people[left]+people[right]<=limit){
                // 两人共乘一艘船
                left++;
            }
            // 否则重的人自己一艘船
            right--;
            res++;
        }
        return res;
    }
};
