140. Word Break II
/*
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].
*/

Solution 1: recursive TLE
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> res;
        string cand;
        unordered_set<string> dict(wordDict.begin(),wordDict.end());
        helper(res,dict,cand,s,0);
        return res;
    }
private:
    void helper(vector<string>&res,unordered_set<string> &dict,string &cand,string &s,int start){
        if(start==s.length()){
            res.push_back(cand);
            return;
        }
        for(int i=start;i<s.length();i++){
            string sub=s.substr(start,i-start+1);
            if(dict.find(sub)!=dict.end()){
                int last_index=cand.length();
                if(last_index==0){
                    cand+=sub;
                }
                else{
                    cand+=" "+sub;
                }
                helper(res,dict,cand,s,i+1);
                cand=cand.substr(0,last_index);//将加入的sub弹出
            }
        }
    }
};

Solution 2: memorized dfs
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string,vector<string>> mmap;//存储string对应的所有可能分割成的sentence
        //按长度排序 只有长度不大于s的串才有可能是s的子串
        sort(wordDict.begin(),wordDict.end(),[&](string&s1,string&s2){return s1.length()<s2.length();});
        return dfs(s,wordDict,mmap);
    }
private:
    vector<string> dfs(string s,vector<string>&wordDict,unordered_map<string,vector<string>>&mmap){
        if(mmap.find(s)!=mmap.end())
            return mmap[s];
        vector<string> res;
        int len=s.length();
        if(len==0){
            res.push_back("");
            return res;
        }
        for(int i=0;i<wordDict.size();i++){
            int lenw=wordDict[i].length();
            if(lenw>len)
                break;
            //若匹配那么首字符一定相同
            if(wordDict[i][0]!=s[0])
                continue;
            if(s.substr(0,lenw)==wordDict[i]){
                vector<string> subres=dfs(s.substr(lenw),wordDict,mmap);
                if(!subres.empty()){
                    for(auto &sub:subres)
                        res.push_back(wordDict[i]+(sub==""?"":" ")+sub);
                }    
            }
        }
        mmap[s]=res;
        return res;
    }
};

update:
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string,vector<string>> dp;
        //将字符串按照长度排序 便于后面做剪枝操作
        sort(wordDict.begin(),wordDict.end(),[](const string&a,const string &b){
            return a.length()<b.length();
        });
        return helper(dp,wordDict,s);
    }
private:
    vector<string> helper(unordered_map<string,vector<string>> &dp,vector<string>&dict,string s){
        if(dp.find(s)!=dp.end()){
            return dp[s];
        }
        vector<string> res;
        int lens=s.length();
        //这种情况是符合条件的 s就是一个空字符串(代表他的父字符串已经遍历到了字符串尾,构造他的父串是成功的)
        //返回{""}是为了和 没有任何词能组合出s的情况相区别 这种情况返回的是{}
        if(lens==0){
            res.push_back("");
            return res;
        }
        //遍历dict 看是否有word 可以和s的起始字符match
        for(auto &word:dict){
            int lenw=word.length();
            //剪枝
            if(lenw>lens){
                break;
            }
            if(word[0]!=s[0]) continue;
            if(word!=s.substr(0,lenw)) continue;
            //word==s[0...lenw-1]
            //利用dict构造s[lenw..end]
            vector<string> next_cands=helper(dp,dict,s.substr(lenw));
            //next_cands为空说明: dict不能构造出s[lenw...end]
            if(next_cands.empty()) continue;
            for(auto &next: next_cands){
                res.push_back(word+(next==""?"":" "+next));
            }
        }
        dp[s]=res;
        return res;
    }
};
