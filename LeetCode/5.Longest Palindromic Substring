5. Longest Palindromic Substring
/*
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example:

Input: "babad"

Output: "bab"

Note: "aba" is also a valid answer.
Example:

Input: "cbbd"

Output: "bb"
*/
Solution 1:
class Solution {
public:
    bool helper(const string &s,int begin,int end){
        while(begin<end){
            if(s[begin++]!=s[end--])
                return false;
        }
        return true;
    }
    string longestPalindrome(string s) {
        int len=s.length();
        if(len<=1)
            return s;
        string res="";
        res.push_back(s[0]);
        //寻找最长回文串
        for(int l=2;l<=len;l++){
            for(int begin=0;begin<=len-l;begin++){
                int end=begin+l-1;
                if(helper(s,begin,end)){
                    res=s.substr(begin,l);
                    break;
                }
            }
        }
        return res;
    }
};

Solution 2: 更高效 O(n^2)
class Solution {
public:
    // 从中心拓展
    string longestPalindrome(string s) {
        int len=s.length();
        if(len<2)
            return s;
        int maxLen=1,begin=0; // 初始化长度为1的结果
        for(int i=0;i<len-1;i++){
            findPalFromCenter(s,i,i,maxLen,begin);
            findPalFromCenter(s,i,i+1,maxLen,begin);
        }
        return s.substr(begin,maxLen);
    }
private:
    void findPalFromCenter(string&s,int left,int right,int &maxLen,int &begin){
        int curLen;
        if(left==right){
            curLen=1;
            left--;
            right++;
        }
        else
            curLen=0;
        while(left>=0&&right<s.length()){
            if(s[left]!=s[right])
                break;
            left--;right++;
            curLen+=2;
        }
        if(maxLen<curLen){
            maxLen=curLen;
            begin=left+1;
        }
    }
};
