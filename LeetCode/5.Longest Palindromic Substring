5. Longest Palindromic Substring
/*
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example:

Input: "babad"

Output: "bab"

Note: "aba" is also a valid answer.
Example:

Input: "cbbd"

Output: "bb"
*/
Solution 1:
class Solution {
public:
    bool helper(const string &s,int begin,int end){
        while(begin<end){
            if(s[begin++]!=s[end--])
                return false;
        }
        return true;
    }
    string longestPalindrome(string s) {
        int len=s.length();
        if(len<=1)
            return s;
        string res="";
        res.push_back(s[0]);
        //寻找最长回文串
        for(int l=2;l<=len;l++){
            for(int begin=0;begin<=len-l;begin++){
                int end=begin+l-1;
                if(helper(s,begin,end)){
                    res=s.substr(begin,l);
                    break;
                }
            }
        }
        return res;
    }
};

Solution 2: 更高效 O(n^2)
class Solution {
public:
    // 从中心拓展
    string longestPalindrome(string s) {
        int len=s.length();
        if(len<2)
            return s;
        int maxLen=1,begin=0; // 初始化长度为1的结果
        for(int i=0;i<len-1;i++){
            findPalFromCenter(s,i,i,maxLen,begin);
            findPalFromCenter(s,i,i+1,maxLen,begin);
        }
        return s.substr(begin,maxLen);
    }
private:
    void findPalFromCenter(string&s,int left,int right,int &maxLen,int &begin){
        int curLen=0;
        if(left==right){
            curLen=1;
            left--;
            right++;
        }
        while(left>=0&&right<s.length()){
            if(s[left]!=s[right])
                break;
            left--;right++;
            curLen+=2;
        }
        if(maxLen<curLen){
            maxLen=curLen;
            begin=left+1;
        }
    }
};

update:增加剪枝操作，这一步操作可以极大提升性能 from beat 79.2%(20ms) to  94.7%(8ms)
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.length();
        if(n<2)
            return s;
        int maxLen=1,start=0;
        for(int i=0;i<n;i++){
            //剪枝操作
            if(n-i<=maxLen/2)break;
            extendPalindromic(s,i,i,start,maxLen);
            extendPalindromic(s,i,i+1,start,maxLen);
        }
        return s.substr(start,maxLen);
    }
private:
    void extendPalindromic(string &s,int i,int j,int &start,int &maxLen){
        int curLen=0;
        if(i==j){
            curLen=1;
            i--;j++;
        }
        while(i>=0&&j<s.length()){
            if(s[i]!=s[j])break;
            curLen+=2;
            i--;j++;
        }
        if(maxLen<curLen){
            maxLen=curLen;
            start=i+1;
        }
    }
};

update:修改验证及计算回文串长度的代码 直接利用有效回文串起始终止位置计算回文串的长度
class Solution {
public:
    string longestPalindrome(string s) {
        int res=0,begin=-1;
        int n=s.length();
        for(int i=0;i<n;i++){
            if(n-i<=res/2) break;
            extend(s,i,i,res,begin);
            extend(s,i,i+1,res,begin);
        }
        return res==0?"":s.substr(begin,res);
    }
private:
    void extend(const string& s,int i,int j,int &maxLen,int &begin){
        int n=s.length();
        while(i>=0&&j<n){
            if(s[i]!=s[j]){
                break;
            }
            i--;
            j++;
        }
        if(j-i-1>maxLen){
            maxLen=j-i-1;
            begin=i+1;
        }
    }
};
