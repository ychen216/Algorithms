639. Decode Ways II
/*
A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
*/
Solution:
class Solution {
public:
    /*
    参考 discuss
    e0表示当前可以获得的解码的次数，当前数字可以为任意数
    e1表示当前可以获得的解码的次数，当前数字为1
    e2表示当前可以获得的解码的次数，当前数字为2
    f0, f1, f2分别为处理完当前字符c的e0, e1, e2的值
    */
    int numDecodings(string s) {
        long e0=1,e1=0,e2=0;
        long f0,f1,f2;
        int MOD=1e9+7;
        for(auto c:s){
            if(c=='*'){
                f0=e0*9+e1*9+e2*6;
                f1=e0;
                f2=e0;
            }
            else{
                f0=int(c!='0')*e0+e1+int(c<'7')*e2;
                f1=c=='1'?e0:0;
                f2=c=='2'?e0:0;
            }
            e0=f0%MOD;
            e1=f1;
            e2=f2;
        }
        return e0;
    }
};
