424. Longest Repeating Character Replacement

/*
Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most 
k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.

Example 1:
Input:
s = "ABAB", k = 2
Output:
4

Explanation:
Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input:
s = "AABABBA", k = 1
Output:
4
Explanation:
Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.

*/
Solution:
class Solution {
public:
    /*如果没有k的限制，让我们求把字符串变成只有一个字符重复的字符串需要的最小置换次数，那么就是字符串的总长度减去出现次数最多的字符的个数。
    如果加上k的限制，我们其实就是求满足(子字符串的长度减去出现次数最多的字符个数)<=k的最大子字符串长度即可
    控制滑动窗口结束的位置
    */
    int characterReplacement(string s, int k) {
        int len=s.length();
        int cnt[26]={0};
        int maxLen=0,start=0,maxCnt=0;//最大长度 滑动窗口起始
        for(int end=0;end<len;end++){
            maxCnt=max(maxCnt,++cnt[s[end]-'A']);
            //移动滑动窗口的起始位置
            while(end-start+1-maxCnt>k){
                cnt[s[start]-'A']--;
                start++;
            }
            maxLen=max(maxLen,end-start+1);
        }
        return maxLen;
    }
};
