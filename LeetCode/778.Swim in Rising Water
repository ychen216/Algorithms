778. Swim in Rising Water

/*
On an N x N grid, each square grid[i][j] represents the elevation at that point (i,j).

Now rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.

You start at the top left square (0, 0). What is the least time until you can reach the bottom right square (N-1, N-1)?

Example 1:

Input: [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.

You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.
Example 2:

Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation:
 0  1  2  3  4
24 23 22 21  5
12 13 14 15 16
11 17 18 19 20
10  9  8  7  6

The final route is marked in bold.
We need to wait until time 16 so that (0, 0) and (4, 4) are connected.
Note:
  2 <= N <= 50.
  grid[i][j] is a permutation of [0, ..., N*N - 1].
*/

Solution:
class Solution {
public:
    /*
        给定方阵grid，其元素的值代表网格中该点处的深度
        现在网格中开始积水，时刻t的时候所有值不大于t的格点被水淹没，
        当两个相邻格点（上下左右四个方向）的值都不超过t的时候我们称他们连通，即可以通过游泳到达
        问能将主对角两顶点（(0, 0) 和 (n-1, n-1)）连通的最小时刻是多少
        BFS 用优先队列实现
    */
    struct T{
        int x,y,t;
        T(int a,int b,int c):x(a),y(b),t(c){}
        bool operator<(const T &b)const{return t>b.t;}//深度大的优先级低
    };
    
    int swimInWater(vector<vector<int>>& grid) {
        int N=grid.size(),res=0;
        vector<vector<bool>> visit(N,vector<bool>(N,false));
        int dx[]={-1,1,0,0},dy[]={0,0,-1,1};
        priority_queue<T> pq;
        pq.push(T(0,0,grid[0][0]));
        visit[0][0]=true;
        //按照上下左右将节点加入队列保证了队列中的元素都是位置上连通的
        //队列中的元素按照深度大小升序排列 保证了当前出队元素之前的元素在保证时间时也是连通的
        while(!pq.empty()){
            T cur=pq.top();
            pq.pop();
            res=max(res,cur.t);
            if(cur.x==N-1&&cur.y==N-1)
                return res;
            for(int i=0;i<4;i++){
                int x=dx[i]+cur.x;
                int y=dy[i]+cur.y;
                if(x>=0&&x<N&&y>=0&&y<N&&!visit[x][y]){
                    visit[x][y]=true;
                    pq.push(T(x,y,grid[x][y]));
                }
            }
        }
        return res;
    }
};
