80. Remove Duplicates from Sorted Array II
/*
Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?

For example,
Given sorted array nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3.
It doesn't matter what you leave beyond the new length.

*/

Solution 1:
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        int seat=1; // 不超过两个相同元素的 可以坐下的位置 第一个元素必然是满足出现不超过2次的 所以初始化为1
        int cnt=1; // 当前元素出现的次数 初始化为1 代表nums[0]出现的次数
        for(int i=1;i<n;i++){
            if(nums[i]==nums[i-1]){
                cnt++;
                if(cnt<3)
                    nums[seat++]=nums[i];
            }
            else{
                cnt=1;
                nums[seat++]=nums[i];
            }
        }
        return seat;
    }
};

update:
class Solution {
public:
    //数组已经排好序了 重复的数字出现在一起
    int removeDuplicates(vector<int>& nums) {
        int i=0;
        for(auto &num:nums){
            if(i<2||num>nums[i-2])
                nums[i++]=num;
        }
        return i;
    }
};

Solution 2：
update:
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        if(n<3)
            return n;
        int p=1;//p表示下一个合法元素要放入位置的前一位 初始化为1 因为前两个元素必然是合法的
        for(int i=2;i<n;i++){
            //在合法数组里已经有了两个相同的元素了 不应该再加入
            if(nums[i]==nums[p]&&nums[i]==nums[p-1])continue;
            p++;
            nums[p]=nums[i];
        }
        return p+1;
    }
};

update:
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        if(n<3)
            return n;
        int p=1;//p表示下一个合法元素要放入位置的前一位 初始化为1 因为前两个元素必然是合法的
        for(int i=2;i<n;i++){
            //在合法数组里已经有了两个相同的元素了 不应该再加入
            //if(nums[i]==nums[p]&&nums[i]==nums[p-1])continue;
            //可以简化条件 因为nums是排好序的数组 nums[p-1]<=nums[p]<=nums[i]
            // 如果nums[p-1]==nums[i] 那么必然有nums[p]==nums[i]
            if(nums[i]==nums[p-1]) continue;
            p++;
            nums[p]=nums[i];
        }
        return p+1;
    }
};


Solution 3: Solution 2说的很复杂 只要看solution 3和solution 1的update
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        if(n<3){
            return n;
        }
        int pos=2;//合法数字下一个要放入的位置
        // nums是排好序的 如果nums[i]==nums[pos-2]那么必然有nums[i]==nums[pos-1]这就说明i之前nums[i]已经放入2次了 不能再加入
        // 所以只需要check nums[pos-2]和nums[i]即可
        for(int i=2;i<n;i++){
            if(nums[i]!=nums[pos-2]){
                nums[pos++]=nums[i];
            }
        }
        return pos;
    }
};
