80. Remove Duplicates from Sorted Array II
/*
Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?

For example,
Given sorted array nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3.
It doesn't matter what you leave beyond the new length.

*/

Solution 1:
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        int seat=1; // 不超过两个相同元素的 可以坐下的位置 第一个元素必然是满足出现不超过2次的 所以初始化为1
        int cnt=1; // 当前元素出现的次数 初始化为1 代表nums[0]出现的次数
        for(int i=1;i<n;i++){
            if(nums[i]==nums[i-1]){
                cnt++;
                if(cnt<3)
                    nums[seat++]=nums[i];
            }
            else{
                cnt=1;
                nums[seat++]=nums[i];
            }
        }
        return seat;
    }
};

update:
class Solution {
public:
    //数组已经排好序了 重复的数字出现在一起
    int removeDuplicates(vector<int>& nums) {
        int i=0;
        for(auto &num:nums){
            if(i<2||num>nums[i-2])
                nums[i++]=num;
        }
        return i;
    }
};
