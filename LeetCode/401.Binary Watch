401. Binary Watch

/*
A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.

For example, the above binary watch reads "3:25".
Given a non-negative integer n which represents the number of LEDs that are currently on, 
return all possible times the watch could represent.

Example:
Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
Note:
  The order of output does not matter.
  The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
  The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".

*/

Solution 1:
class Solution {
private:
     vector<vector<string>> hour = {{"0"},
            {"1", "2", "4", "8"},
            {"3", "5", "6", "9", "10"},
            {"7", "11"}};
    vector<vector<string>> minute = {{"00"},
            {"01", "02", "04", "08", "16", "32"},
            {"03", "05", "06", "09", "10", "12", "17", "18", "20", "24", "33", "34", "36", "40", "48"},
            {"07", "11", "13", "14", "19", "21", "22", "25", "26", "28", "35", "37", "38", "41", "42", "44", "49", "50", "52", "56"},
            {"15", "23", "27", "29", "30", "39", "43", "45", "46", "51", "53", "54", "57", "58"},
            {"31", "47", "55", "59"}};
public:
    vector<string> readBinaryWatch(int num) {
        vector<string> res;
        for(int i=0;i<4&&i<=num;i++){
            if(num-i<=5){
                int sizeh=hour[i].size();
                int sizem=minute[num-i].size();
                for(int k=0;k<sizeh;k++){
                    for(int z=0;z<sizem;z++)
                        res.push_back(hour[i][k]+":"+minute[num-i][z]);
                }
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    // num即为亮灯数 遍历所有可能的时间组合p 若p需要的亮灯数==num即为可能的结果
    vector<string> readBinaryWatch(int num) {
        vector<string> res;
        for(int h=0;h<12;h++){
            for(int m=0;m<60;m++)
                if(getBit1(h)+getBit1(m)==num){
                    string tempmin=to_string(m);
                    if(m<10)
                        tempmin="0"+tempmin;
                    res.push_back(to_string(h)+":"+tempmin);
                }
        }
        return res;
    }
private:
    // 计算n的二进制表示有几位1
    int getBit1(int n){
        int cnt=0;
        while(n){
            cnt++;
            n&=(n-1);
        }
        return cnt;
    }
};
