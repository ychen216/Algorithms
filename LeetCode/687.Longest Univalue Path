687. Longest Univalue Path

/*
Given a binary tree, find the length of the longest path where each node in the path has the same value. 
This path may or may not pass through the root.

Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:
Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:
2

Example 2:
Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:
2
Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.

*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    int longest=0;
public:
    //路径可以是/\这样的 所以整个长度为左子树+右子树
    //路径以root为起始的最长长度
    int travel(TreeNode *root,int val){
        if(root==NULL)
            return 0;
        else{
            int left=0,right=0;
            if(root->left&&root->left->val==val)
                left=1+travel(root->left,val);
            if(root->right&&root->right->val==val)
                right=1+travel(root->right,val);
            longest=max(longest,left+right);    
            return  max(left,right);
        }
        
    }
    //遍历每个结点
    int longestUnivaluePath(TreeNode* root) {
        if(root==NULL)
            return 0;
        travel(root,root->val);
        longestUnivaluePath(root->left);
        longestUnivaluePath(root->right);
        return longest;
    }
};


Solution 2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        if(root==NULL)
            return 0;
        maxLen=0;
        maxPath(root,root->val);
        return maxLen;
    }
private:
    int maxLen=0;
    int maxPath(TreeNode *cur,int value){
        if(cur==NULL)
            return 0;
        int left=maxPath(cur->left,cur->val);
        int right=maxPath(cur->right,cur->val);
        maxLen=max(maxLen,left+right);
        if(cur->val==value)
            return max(left,right)+1;
        return 0;
    }
};
