96. Unique Binary Search Trees

/*
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

*/

Solution:
class Solution {
public:
    //DP:有n个从小到大的有序的数 根节点在第1~n中选择一个数num[i] 那么第1~i-1和第i+1~n 两组有序数分别构成左右BST子树
    //G(n)为由n个有序数能构成的uniqueBST的数量 F(i,n)为选择第i个数为根节点的uniqueBST的数量 F(i,n)=G(i-1)*G(n-i)
    //G(n)=F(1,n)+F(2,n)+...+F(n,n);
    int numTrees(int n) {
        int G[n+1]={0};
        G[0]=G[1]=1;
        for(int i=2;i<=n;i++){
            //选根节点
            for(int j=1;j<=i;j++)
                G[i]+=G[j-1]*G[i-j];
        }
        return G[n];
    }
};
