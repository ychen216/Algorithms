916. Word Subsets
/*
We are given two arrays A and B of words.  Each word is a string of lowercase letters.

Now, say that word b is a subset of word a if every letter in b occurs in a, including multiplicity.  For example, "wrr" is a subset of "warrior", but is not a subset of "world".

Now say a word a from A is universal if for every b in B, b is a subset of a. 

Return a list of all universal words in A.  You can return the words in any order.


Example 1:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","o"]
Output: ["facebook","google","leetcode"]

Example 2:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["l","e"]
Output: ["apple","google","leetcode"]

Example 3:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","oo"]
Output: ["facebook","google"]

Example 4:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"]
Output: ["google","leetcode"]

Example 5:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["ec","oc","ceo"]
Output: ["facebook","leetcode"]
 

Note:
  1 <= A.length, B.length <= 10000
  1 <= A[i].length, B[i].length <= 10
  A[i] and B[i] consist only of lowercase letters.
  All words in A[i] are unique: there isn't i != j with A[i] == A[j].

*/

Solution:
class Solution {
public:
    /*
        要求得到一个数组res满足:B中的每一个单词wb 都是res中每一个单词wr的subset
        也就是wb的所有字符都出现在每一个wr中 eg wrr 是 rorw的subset
        那么我们求得所有wb包含的各类字符的最大值 然后对A中的每一个单词wa进行匹配 如果wa包含所有字符 则将wa加入res中
        eg A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"]
        B中所有单词的字符最大的组合是 o:1,l:1,e:1 也就是至少包含1个o,1个l,1个e的字符串满足包含所有B中单词的要求
        res= ["google","leetcode"]
    */
    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {
        vector<int> command(26,0); // B中所有单词都是subset 要满足的字符要求
        // 变量B中每一个单词 获得其字符要求
        // command是所有字符要求的合并
        for(auto &b:B){
            vector<int> cur(26,0);
            for(auto c:b)
                cur[c-'a']++;
            for(int i=0;i<26;i++)
                command[i]=max(command[i],cur[i]);
        }
        vector<string> res;
        for(auto &a: A){
            vector<int> check(command.begin(),command.end());
            for(auto c:a){
                if(check[c-'a']>0)
                    check[c-'a']--;
            }
            bool ok=true;
            for(int i=0;i<26;i++)
                if(check[i]!=0){
                    ok=false;
                    break;
                }
            if(ok)
                res.push_back(a);
        }
        return res;
    }
};

update:
class Solution {
public:
    /*
        要求得到一个数组res满足:B中的每一个单词wb 都是res中每一个单词wr的subset
        也就是wb的所有字符都出现在每一个wr中 eg wrr 是 rorw的subset
        那么我们求得所有wb包含的各类字符的最大值 然后对A中的每一个单词wa进行匹配 如果wa包含所有字符 则将wa加入res中
        eg A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"]
        B中所有单词的字符最大的组合是 o:1,l:1,e:1 也就是至少包含1个o,1个l,1个e的字符串满足包含所有B中单词的要求
        res= ["google","leetcode"]
    */
    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {
        vector<int> command(26,0); // B中所有单词都是subset 要满足的字符要求
        vector<int> temp(26);
        // 变量B中每一个单词 获得其字符要求
        // command是所有字符要求的合并
        for(auto &b:B){
            getCharCount(b,temp);
            for(int i=0;i<26;i++)
                command[i]=max(command[i],temp[i]);
        }
        vector<string> res;
        for(auto &a: A){
            getCharCount(a,temp);
            int i;
            for(i=0;i<26;i++)
                if(temp[i]<command[i])
                    break;
            if(i==26)
                res.push_back(a);
        }
        return res;
    }
private:
    void getCharCount(string &s,vector<int> &cnt){
        for(int i=0;i<26;i++)
            cnt[i]=0;
        for(auto c:s)
            cnt[c-'a']++;
    }
};
