162. Find Peak Element

/*
A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.
*/

Solution 1:线性查找 O(n)

Solution:二分 O(lgn)
class Solution {
public:
    /*
    
    最左端和最右端元素均无限小，中间元素比两侧都要大，那么本题中一定存在一个峰元素。所以不管中间有多少波峰，只要找到峰元素，我们只需找到刚刚开始下降而未下
    降的位置。采用二分查找，查出这样一个位置即可，我们知道二分查找要比较的是 target 元素，本题的 target 元素是 mid 的后一个元素，即 nums[mid] 与 
    nums[mid+1] 
    */
    int findPeakElement(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;  
        while (left < right) {  
            int mid = (left + right) / 2;  
            if(nums[mid] < nums[mid + 1]) left = mid + 1;  
            else right = mid;  
        }  
        return left;  
    }
};
update: 二分的不同写法
class Solution {
public:
    // 找到第一个下降的元素 nums[mid]>nums[mid+1]
    int findPeakElement(vector<int>& nums) {
        int low=0,high=nums.size()-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(mid==nums.size()-1 || nums[mid]>nums[mid+1])
                high=mid-1;
            else
                low=mid+1;
        }
        return low;
    }
};


update: 二分搜索新模板
class Solution {
public:
    /*
        如果题目没有说明相邻元素不等的条件 那么这一题只能用O(n)循环来做  /    \
        思路是因为数组头尾start end保证了一个增一个减 / .....(中间元素) \ 而不是/  or  \ 这样递增or递减的情况
        所以必然存在peak元素
        我们利用二分搜索找到 中间元素 mid,比较其前后元素的大小可能情况有：
        / \    /    \     \ /       
              /      \
        每次取中间元素，如果大于左右，则这就是peak。
        否则取大的一边，两个都大，可以随便取一边。最终会找到peak。
    */
    int findPeakElement(vector<int>& nums) {
        int start=0,end=nums.size()-1,mid;
        //至少三个元素
        while(start+1<end){
            mid=start+(end-start)/2;
            if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1]){
                 return mid;
            }
            else if(nums[mid]<nums[mid+1]){
                start=mid;
            }
            else{
                end=mid;
            }
        }
        //跳出循环说明 
        //只有一个元素start==end或者有两个元素start+1==end即start和end是首尾元素
        if(nums[start]<nums[end])
            return end;
        else
            return start;
        
    }
};
