653. Two Sum IV - Input is a BST

/*
Given a Binary Search Tree and a target number, return true if there exist two elements in the BST 
such that their sum is equal to the given target.

Example 1:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
Example 2:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False
*/

Solution 1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> nums;//存储所有节点的值
        getTreeValue(root,nums);//前序遍历得到的数组是非递减数组
        int size=nums.size();
        int sum;
        for(int i=0,j=size-1;i<j;){
            sum=nums[i]+nums[j];
            if(sum==k)
                return true;
            if(sum<k)
                i++;
            else
                j--;
        }
        return false;
    }
    
    void getTreeValue(TreeNode* root,vector<int>&nums){
        if(root==NULL)
            return;
        getTreeValue(root->left,nums);
        nums.push_back(root->val);
        getTreeValue(root->right,nums);
    }
    
};


Solution 2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // 利用set 每次查找set中是否包含 k-root->val
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> sset;
        return dfs(sset,root,k);
    }
private:
    bool dfs(unordered_set<int> &sset,TreeNode *root,int k){
        if(root==NULL)
            return false;
        if(sset.find(k-root->val)!=sset.end())
            return true;
        sset.insert(root->val);
        return dfs(sset,root->left,k)||dfs(sset,root->right,k);
    }
};
