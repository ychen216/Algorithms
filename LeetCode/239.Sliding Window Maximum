239. Sliding Window Maximum
/*
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?
*/

Solution:
class Solution {
public:
    /*
    参考 http://blog.csdn.net/jmspan/article/details/51073879
    利用双端队列 维护一个大小为k的队列 队列里的元素按照降序排列 这样每个窗口的最大值都为队首元素
    */
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int size=nums.size();
        if(size==0||k<=0)
            return {};
        deque<int> dq;//存放下标
        vector<int> res;
        for(int i=0;i<size;i++){
            // 每当新数进来时，如果发现队列头部的数的下标，是窗口最左边数的下标，则扔掉 确保队列中的数字对于该窗口是有效的
            if(!dq.empty()&&dq.front()<=i-k)dq.pop_front();
            // 把队列尾部所有比新数小的都扔掉，因为这些元素比较小在有新数的情况下不可能成为后续窗口的最大值
            // 这样也就构成了一个降序队列
            while(!dq.empty()&&nums[dq.back()]<=nums[i])dq.pop_back();
            //加入新数
            dq.push_back(i);
            //该窗口最大值在队首
            if(i>=k-1)res.push_back(nums[dq.front()]);
        }
        return res;
    }
};
