678. Valid Parenthesis String
/*
Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
Example 1:
  Input: "()"
  Output: True
Example 2:
  Input: "(*)"
  Output: True
Example 3:
  Input: "(*))"
  Output: True
Note:
The string size will be in the range [1, 100].
*/

Solution 1:
class Solution {
public:
    //在任何位置 都必须保证'('的数量大于等于')'的数量 并且在遍历完字符串时 两字符的数量要相等
    bool checkValidString(string s) {
        return check(s,0,0);
    }
    //cnt为左右括号个数的差值
    bool check(string s,int start,int cnt){
        if(cnt<0)
            return false;
        int len=s.length();
        for(int i=start;i<len;i++){
            if(s[i]=='(')
                cnt++;
            else if(s[i]==')'){
                cnt--;
                if(cnt<0)
                    return false;
            }
            else// '*'
                return check(s,i+1,cnt+1)||check(s,i+1,cnt-1)||check(s,i+1,cnt);
        }
        return cnt==0;
    }
};

Solution 2:
class Solution {
public:
    /*DISCUSS 第一种做法
    其中low表示在有左括号的情况下，将星号当作右括号时左括号的个数(这样做的原因是尽量不多增加右括号的个数)，而high表示将星号当作左括号时左括号的个数。是不是很绕，没办法。那么当high小于0时，说明就算把星号都当作左括号了，还是不够抵消右括号，返回false。而当low大于0时，说明左括号的个数太多了，没有足够多的右括号来抵消，返回false。那么开始遍历字符串，当遇到左括号时，low和high都自增1；当遇到右括号时，只有当low大于0时，low才自减1，保证了low不会小于0，而high直接自减1；当遇到星号时，只有当low大于0时，low才自减1，保证了low不会小于0，而high直接自增1，因为high把星号当作左括号。当此时high小于0，说明右括号太多，返回false。当循环退出后，我们看low是否为0
    */
    
    bool checkValidString(string s) {
        int low=0,high=0;
        int len=s.length();
        for(int i=0;i<len;i++){
            if(s[i]=='('){
                low++;
                high++;
            }
            else if(s[i]==')'){
                if(low>0)
                    low--;
                high--;
            }
            else{
                // '*'
                if(low>0)
                    low--;
                high++;
            }
            if(high<0)
                return false;
        }
        return low==0;
    }
};
