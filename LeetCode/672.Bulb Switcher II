672. Bulb Switcher II

/*
There is a room with n lights which are turned on initially and 4 buttons on the wall. After performing exactly m unknown operations 
towards buttons, you need to return how many different kinds of status of the n lights could be.

Suppose n lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:
  Flip all the lights.
  Flip lights with even numbers.
  Flip lights with odd numbers.
  Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...
Example 1:
Input: n = 1, m = 1.
Output: 2
Explanation: Status can be: [on], [off]
Example 2:
Input: n = 2, m = 1.
Output: 3
Explanation: Status can be: [on, off], [off, on], [off, off]
Example 3:
Input: n = 3, m = 1.
Output: 4
Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].
Note: n and m both fit in range [0, 1000].

*/

Solution 1:
class Solution {
public:
    int flipLights(int n, int m) {
        if(m==0) return 1;
        if(n==1) return 2;
        if(n==2&&m==1) return 3;
        if(n==2) return 4;
        if(m==1) return 4;
        if(m==2) return 7;
        if(m>=3) return 8;
        return 8;
    }
};


Solution 2:
class Solution {
public:
    //  利用BFS 每一步操作向下扩展
    int flipLights(int n, int m) {
        unordered_set<int> statusSet;
        queue<int> q;
        q.push((1<<n)-1);// 起始状态n盏灯都亮着
        for(int i=0;i<m;i++){
            int curStatus,size=q.size();
            statusSet.clear(); // 保证每次操作的状态没有重复的
            // 对上一次的操作进行扩展
            for(int j=0;j<size;j++){
                curStatus=q.front();
                q.pop();
                vector<int> next({flipAll(curStatus,n),flipOdd(curStatus,n),flipEven(curStatus,n),flip3k(curStatus,n)});
                for(auto &s:next){
                    if(statusSet.find(s)==statusSet.end()){
                        statusSet.insert(s);
                        q.push(s);
                    }
                }
            }
        }
        return q.size();
    }
private:
    int flipAll(int status,int n){
        return status^=(1<<n)-1;
    }
    
    int flipOdd(int status,int n){
        for(int i=0;i<n;i+=2)
            status^=(1<<i);
        return status;
    }
    
    int flipEven(int status,int n){
        for(int i=1;i<n;i+=2)
            status^=(1<<i);
        return status;
    }
    
    int flip3k(int status,int n){
        for(int i=0;i<n;i+=3)
            status^=(1<<i);
        return status;
    }
};
