795. Number of Subarrays with Bounded Maximum

/*
We are given an array A of positive integers, and two positive integers L and R (L <= R).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.

Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Note:

L, R  and A[i] will be an integer in the range [0, 10^9].
The length of A will be in the range of [1, 50000].
*/

Solution:
class Solution {
public:
    /*
        双指针  
    */
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int n=A.size();
        int s,e;//区间端点
        int res=0,cnt=0;
        //cnt记录当前已有的有效区间长度 也就是有效区间的元素个数 cnt区间内的每一个元素都应该能和后一个加入的构成新的区间
        // eg. L=2,R=3  [2,3] cnt=2 后一个加入的元素是1 -> [2 3 1],[2 3] 增加两个 而1加入后cnt值不变
        // 因为其不能保证1可以与后面的值一定构成新区间 eg 加入1,[1,1]不是合法区间 所以cnt值 只在加入的元素>=L&&<=R时才更新
        for(s=0,e=0;e<n;e++){
            if(A[e]>=L&&A[e]<=R){
                cnt=e-s+1;
                res+=cnt;
            }else if(A[e]<L){
                res+=cnt;//A[e]和当前有效区间里的元素构成新的有效区间
            }else{
                cnt=0;
                s=e+1;
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        双指针 
    */
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int n=A.size();
        int res=0,left=-1,right=-1;//[left+1,..right]是有效的区间 
        for(int i=0;i<n;i++){
            if(A[i]>R)left=i;
            if(A[i]>=L) right=i;
            res+=right-left;
        }
        return res;
    }
};
