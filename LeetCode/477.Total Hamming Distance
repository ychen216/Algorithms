477. Total Hamming Distance

/*
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Now your job is to find the total Hamming distance between all pairs of the given numbers.

Example:
Input: 4, 14, 2
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case). So the answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.
Note:
  Elements of the given array are in the range of 0 to 10^9
  Length of the array will not exceed 10^4.
*/

Solution 1:naive TLE
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int size=nums.size();
        int dis=0;
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
                int temp=nums[i]^nums[j];
                for(int i=0;i<32;i++){
                    if(temp&1)
                        dis++;
                    temp>>=1;
                }
            }
        }
        return dis;
    }
};

Solution 2:
class Solution {
public:
    /*
    所有数字的同一个bit位，统计在这个bit位上出现的1的次数count
    那么这个bit位在总的汉明距离中就贡献了count*(n-count)
    n是数组中元素的个数
    */
    int totalHammingDistance(vector<int>& nums) {
        int dis=0;
        int size=nums.size();
        for(int i=0;i<32;i++){
            int cnt=0;
            for(int j=0;j<size;j++)
                cnt+=(nums[j]>>i)&1;
            dis+=cnt*(size-cnt);
        }
        return dis;
    }
};
