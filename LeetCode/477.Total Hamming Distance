477. Total Hamming Distance

/*
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Now your job is to find the total Hamming distance between all pairs of the given numbers.

Example:
Input: 4, 14, 2
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case). So the answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.
Note:
  Elements of the given array are in the range of 0 to 10^9
  Length of the array will not exceed 10^4.
*/

Solution 1:naive TLE
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int size=nums.size();
        int dis=0;
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
                int temp=nums[i]^nums[j];
                for(int i=0;i<32;i++){
                    if(temp&1)
                        dis++;
                    temp>>=1;
                }
            }
        }
        return dis;
    }
};

update 计算num的二进制表示中1个数的方法
class Solution {
public:
    /*
    naive 两两计算两个数的hamming distance
    可以对两个数做异或操作得到x 计算x中1的个数 即为hamming distance
    计算x中1的个数:可以利用x=x&(x-1)直到x==0计算结束
    */
    int totalHammingDistance(vector<int>& nums) {
        int dis=0;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++)
                dis+=get1Bit(nums[i]^nums[j]);
        }
        return dis;
    }

private:
    int get1Bit(int num){
        int res=0;
        while(num!=0){
            num=num&(num-1);
            res++;
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
    计算每一个比特位上1的个数,那么针对第i位有ni个1,那么有n-ni个数该位为0
    那么第i位贡献了 dis_i=ni*(n-ni) distance
    total hamming distance=sum(dis_i) 0<=i<32
    */
    int totalHammingDistance(vector<int>& nums) {
        int dis=0;
        int n=nums.size();
        for(int i=0;i<32;i++){
            int cnt=0;
            for(int j=0;j<n;j++)
                if((nums[j]>>i)&1==1)
                    cnt++;
            dis+=cnt*(n-cnt);
        }
        return dis;
    }
};
