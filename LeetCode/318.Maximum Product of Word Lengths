318. Maximum Product of Word Lengths
/*
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. 
You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".

Example 2:
Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
Return 4
The two words can be "ab", "cd".

Example 3:
Given ["a", "aa", "aaa", "aaaa"]
Return 0
No such pair of words.
*/

Solution 1: Brute
class Solution {
public:
    int maxProduct(vector<string>& words) {
        int n=words.size();
        int max_pro=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                bool flag=true;
                for(int c='a';c<='z';c++){
                    if(words[i].find(c)!=string::npos&&words[j].find(c)!=string::npos){
                        flag=false;
                        break;
                    }
                }
                if(flag)
                    max_pro=max(max_pro,(int)words[i].length()*(int)words[j].length());
            }
        }
        
        return max_pro;
    }
};

Solution 2:
class Solution {
public:
    /*
        基本思想还是两两计算max product
        只是在记录word包含的letter和判定两个词是否有common letter是利用位运算
        利用一个int 32bit来表示一个word钟包含的letter(至多26种)
    */
    int maxProduct(vector<string>& words) {
        int size=words.size();
        if(size==0)
            return 0;
        vector<int> w2bit(size,0);
        // 预处理 记录每一个词包含的letter
        for(int i=0;i<size;i++){
            for(auto c:words[i]){
                w2bit[i]|=1<<(c-'a');
            }
        }
        // 两两计算product
        int maxProduct=0;
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++)
                // 注意位运算的优先级较低
                if((w2bit[i]&w2bit[j])==0)
                    maxProduct=max(maxProduct,(int)words[i].length() * (int)words[j].length());
        }
        return maxProduct;
    }
};

update:加上剪枝操作 更慢...
class Solution {
public:
    int maxProduct(vector<string>& words) {
        int n=words.size();
        sort(words.begin(),words.end(),[](string &a,string &b){
            return a.length()>b.length();
        });
        vector<int> contain(n,0);
        for(int i=0;i<n;i++){
            for(auto &c:words[i]){
                contain[i]|=1<<(c-'a');
            }
        }
        int res=0,leni,lenj;
        for(int i=0;i<n;i++){
            leni=words[i].length();
            if(leni*leni<=res)break;
            for(int j=i+1;j<n;j++){
                lenj=words[j].length();
                if((contain[i]&contain[j])==0){
                    if(res<leni*lenj){
                        res=leni*lenj;
                        break;
                    }
                }
            }
        }
        return res;
    }
};
