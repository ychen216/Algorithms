692. Top K Frequent Words

/*
Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, 
then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.
*/
Solution:
struct Node{
    int id;
    int times;
    string s;
    Node(int i,int t,string ss):id(i),times(t),s(ss){}
};
class Solution {
public:
    static bool cmp(const Node &n1,const Node&n2){
        if(n1.times!=n2.times)
            return n1.times>n2.times;
        else
            return n1.s<n2.s;
    }
    vector<string> topKFrequent(vector<string>& words, int k) {
        map<string,int> mmap;//分配字符串的id
        int size=words.size();
        vector<Node> v;
        for(int i=0;i<size;i++){
            if(mmap.count(words[i])==0){
                mmap[words[i]]=v.size();
                Node n(i,1,words[i]);
                v.push_back(n);
            }
            else{
                v[mmap[words[i]]].times++;
            }
        }
        sort(v.begin(),v.end(),cmp);
        vector<string> res;
        for(int i=0;i<k;i++){
            res.push_back(v[i].s);
        }
        return res;
    }
};


Solution 2:
class Solution {
public:
    // 利用最小堆得到最大的k个
    // 题目说找最大的k个从大到小输出 如果两个词出现次数一样 那么字符序小的排在前面
    // 那么如果从小到大排 如果两个词出现次数一样 那么字符序大的排在前面
    struct Node{
        string word;
        int cnt;
        Node(string w,int c){
            word=w;
            cnt=c;
        }
        // 最小堆  <定义优先级小的 返回true则n1优先级小
        bool operator<(const Node &n2)const{
            if(cnt==n2.cnt)
                return word<n2.word;
            return cnt>n2.cnt;
        }
    };
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string,int> mmp;
        for(auto &w:words)
            mmp[w]++;
        priority_queue<Node> pq;
        for(auto &p: mmp){
            pq.push(Node(p.first,p.second));
            if(pq.size()>k)
                pq.pop();
        }
        vector<string> res;
        // 最大的k个从小到大
        for(int i=0;i<k;i++){
            res.push_back(pq.top().word);
            pq.pop();
        }
        reverse(res.begin(),res.end());
        return res;
    }
};
