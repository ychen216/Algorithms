617. Merge Two Binary Trees

/*
Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:
Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
Solution1:56ms
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL&&t2==NULL)
            return NULL;
        if(t1&&t2==NULL)
            return t1;
        if(t2&&t1==NULL)
            return t2;
        TreeNode *root=new TreeNode(t1->val + t2->val);
        root->left=mergeTrees(t1->left,t2->left);
        root->right=mergeTrees(t1->right,t2->right);
        return root;
    }
};

Solution2: 45ms
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        //t1作为结果树 要考虑 t1 t2为空树的情况
        if(t1==NULL&&t2==NULL)
            return NULL;
        if(t1&&t2){
            t1->val=t1->val+t2->val;
            if(t1->left==NULL&&t2->left!=NULL)
                t1->left = new TreeNode(0);
            mergeTrees(t1->left,t2->left);
            if(t1->right==NULL&&t2->right!=NULL)
                t1->right=new TreeNode(0);
            mergeTrees(t1->right,t2->right);
        }
        else if(t1){
            //不作操作
        }
        else{
            t1 = new TreeNode(t2->val);
            mergeTrees(t1->left,t2->left);
            mergeTrees(t1->right,t2->right);
        }
        return t1;
    }
};
