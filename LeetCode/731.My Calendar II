731. My Calendar II

/*
Implement a MyCalendarTwo class to store your events. A new event can be added if adding the event will not cause a triple booking.
Your class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start <= x < end.
A triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.)
For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.
Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)

Example 1:
MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(50, 60); // returns true
MyCalendar.book(10, 40); // returns true
MyCalendar.book(5, 15); // returns false
MyCalendar.book(5, 10); // returns true
MyCalendar.book(25, 55); // returns true
Explanation: 
The first two events can be booked.  The third event can be double booked.
The fourth event (5, 15) can't be booked, because it would result in a triple booking.
The fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.
The sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;
the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.

Note:
  The number of calls to MyCalendar.book per test case will be at most 1000.
  In calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].
*/

Solution:
class MyCalendarTwo {
    /*
        参考 https://www.cnblogs.com/FannyChung/p/7896415.html
        利用TreeMap记录开始时间及出现的次数 和 结束时间及出现的次数记为负数
        当某个时间节点开始事件的出现比结束事件出现的次数多于2次 那么该区间的插入使得triple overlap出现
    */
    private TreeMap<Integer,Integer> map;
    public MyCalendarTwo() {
        map=new TreeMap<Integer,Integer>();
    }
    
    public boolean book(int start, int end) {
        int a=map.getOrDefault(start,0);
        int b=map.getOrDefault(end,0);
        //加入该区间
        map.put(start,a+1);
        map.put(end,b-1);
        int cnt=0;
        //按时间顺序
        for(Integer i:map.values()){
            cnt+=i;//记录当前已开始但未结束的事件个数
            if(cnt>2){//如果事件个数>2，则说明有三个或者以上的重叠，不满足条件，要取消刚刚的插入
                if(a==0)//如果插入前的个数为0则可以直接删除这条记录，否则对次数进行更改
                    map.remove(start);
                else
                    map.put(start,a);
                if(b==0)
                    map.remove(end);
                else
                    map.put(end,b);
                return false;
            }
        }
        return true;
    }
}
C++ version:
class MyCalendarTwo {
public:
    // TreeMap记录事件开始和结束时间 维护当前还未结束的事件数目
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
        auto ps=books.find(start);
        auto pe=books.find(end);
        int a=0,b=0;
        if(ps!=books.end())
            a=ps->second;
        if(pe!=books.end())
            b=pe->second;
        books[start]=a+1;
        books[end]=b-1;
        int unfinished=0;
        for(auto &p: books){
            unfinished+=p.second;
            if(unfinished>2){
                // 有3或3个以上重叠发生
                if(a==0) // 原来不存在 直接移除
                    books.erase(start);
                else
                    books[start]=a;
                if(b==0)
                    books.erase(end);
                else
                    books[end]=b;
                return false;
            }
        }
        return true;
    }
private:
    map<int,int> books;
};


Solution 2:
class MyCalendarTwo {
public:
    /*
        利用两个vector:overlap存储已经overlap的区间的位置,books存储成功加入的events
    */
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
        // overlap中的子区间都是已经有两个event重叠了,如果还有重叠的就到达3个
        for(auto &p:overlap){
            if(max(start,p.first) < min(end,p.second))
                return false;
        }
        // [start,end)可以成功插入 更新overlap
        for(auto &p:books){
            if(max(start,p.first) < min(end,p.second))
                overlap.push_back({max(start,p.first),min(end,p.second)});
        }
        books.push_back({start,end});
        return true;
    }
private:
    vector<pair<int,int>> books;
    vector<pair<int,int>> overlap;
};
