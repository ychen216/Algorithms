464. Can I Win
/*
In the "100 game," two players take turns adding, to a running total, any integer from 1..10. 
The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?

For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until
they reach a total >= 100.

Given an integer maxChoosableInteger and another integer desiredTotal, determine 
if the first player to move can force a win, assuming both players play optimally.

You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.

Example

Input:
maxChoosableInteger = 10
desiredTotal = 11
Output:
false

Explanation:
No matter which integer the first player choose, the first player will lose.
The first player can choose an integer from 1 up to 10.
If the first player choose 1, the second player can only choose integers from 2 up to 10.
The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
Same with other integers chosen by the first player, the second player will always win.
*/
Solution:
class Solution {
    
public:
    /*
        memorized dfs  
        参考 http://blog.csdn.net/liuchuo/article/details/54729227
        https://leetcode.com/problems/can-i-win/discuss/95277/Java-solution-using-HashMap-with-detailed-explanation
        考虑状态如何选择
        1.每一个数字是否被使用过  2. 使用过那些数字后剩下的要达到目标target
        其实这两个信息可以用1.来表达 因为desiredTotal是一个固定数值 在用过了特定的数字以后剩下target就确定了
        1.作为状态 eg.true false true false... 因为范围为[1-20]这可以转化为01串 1010.. 1表示使用过 0表示未被使用
        利用map<int,bool>记录在状态为s的10串时第一个玩家是否能获胜
    */
    bool canIWin(int maxChoosableInteger, int desiredTotal) {
        if((1+maxChoosableInteger)*maxChoosableInteger/2<desiredTotal)
            return false;
        if(maxChoosableInteger>=desiredTotal)
            return true;
        unordered_map<int,bool> memo;
        return dfs(desiredTotal,0,maxChoosableInteger,memo);
    }
private:
    // 判断当前玩家在visit的状态下 能否获胜
    bool dfs(int target,int visit,int maxn,unordered_map<int,bool>&memo){
        if(memo.find(visit)!=memo.end())
            return memo[visit];
        for(int i=1;i<=maxn;i++){
            int mask=1<<i;
            // 数字i还未被使用过 
            // 当前玩家都能够获胜:当前玩家自己可以马上获胜 or 当前玩家采取动作i后另一个玩家输了
            if(!(visit&mask)&&(i>=target||!dfs(target-i,visit|mask,maxn,memo))){
                memo[visit]=true;
                return true;
            }
        }
        memo[visit]=false;
        return false;
    }
};
