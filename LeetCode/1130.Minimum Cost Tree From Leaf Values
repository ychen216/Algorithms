1130. Minimum Cost Tree From Leaf Values

/*
给你一个正整数数组 arr，考虑所有满足以下条件的二叉树：
  每个节点都有 0 个或是 2 个子节点。
  数组 arr 中的值与树的中序遍历中每个叶节点的值一一对应。（知识回顾：如果一个节点有 0 个子节点，那么该节点为叶节点。）
  每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。
  在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。这个和的值是一个 32 位整数。

示例：
输入：arr = [6,2,4]
输出：32
解释：
有两种可能的树，第一种的非叶节点的总和为 36，第二种非叶节点的总和为 32。

    24            24
   /  \          /  \
  12   4        6    8
 /  \               / \
6    2             2   4 

提示：
  2 <= arr.length <= 40
  1 <= arr[i] <= 15
  答案保证是一个 32 位带符号整数，即小于 2^31。
*/

Solution:
/*
Solution DP
  Find the cost for the interval [i,j].
  To build up the interval [i,j],
  we need to split it into left subtree and sub tree,
  dp[i, j] = dp[i, k] + dp[k + 1, j] + max(A[i, k]) * max(A[k + 1, j])

  This solution is O(N^3) time and O(N^2) space. You think it's fine.
  After several nested for loop, you get a green accepted and release a sigh.

  Great practice for DP!
  Then you think that's it for a medium problem, nothing can stop you.

  so you didn't read and up-vote my post.
  One day, you bring this solution to an interview and probably fail.


Intuition
  When we build a node in the tree, we compared the two numbers a and b.
  In this process,
  the smaller one is removed and we won't use it anymore,
  and the bigger one actually stays.

  The problem can translated as following:
  Given an array A, choose two neighbors in the array a and b,
  we can remove the smaller one min(a,b) and the cost is a * b.
  What is the minimum cost to remove the whole array until only one left?

  To remove a number a, it needs a cost a * b, where b >= a.
  So a has to be removed by a bigger number.
  We want minimize this cost, so we need to minimize b.

  b has two candidates, the first bigger number on the left,
  the first bigger number on the right.

  The cost to remove a is a * min(left, right).


Explanation
  Now we know that, this is not a dp problem.
  (Because dp solution test all ways to build up the tree, it's kinda of brute force)

  With the intuition above in mind,
  we decompose a hard problem into reasonable easy one:
  Just find the next greater element in the array, on the left and one right.
  Refer to 1019. Next Greater Node In Linked List

Complexity
  Time O(N) for one pass
  Space O(N) for stack in the worst cases

int mctFromLeafValues(vector<int>& A) {
    int res = 0, n = A.size();
    vector<int> stack = {INT_MAX};
    for (int a : A) {
        while (stack.back() <= a) {
            int mid = stack.back();
            stack.pop_back();
            res += mid * min(stack.back(), a);
        }
        stack.push_back(a);
    }
    for (int i = 2; i < stack.size(); ++i) {
        res += stack[i] * stack[i - 1];
    }
    return res;
}
