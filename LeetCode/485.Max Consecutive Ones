485. Max Consecutive Ones

/*
Given a binary array, find the maximum number of consecutive 1s in this array.

Example 1:
Input: [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s.
    The maximum number of consecutive 1s is 3.
Note:
  The input array will only contain 0 and 1.
  The length of input array is a positive integer and will not exceed 10,000
*/

Solution:
class Solution {
public:
    int dp[10003];
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int size=nums.size();
        if(size==0)
            return 0;
        int maxCon=0;
        for(int i=0;i<size;i++){
            if(nums[i]){
                if(i>0&&nums[i-1])
                    dp[i]=dp[i-1]+1;
            else
                dp[i]=1;
            }
            else
                dp[i]=0;
            maxCon=maxCon<dp[i]?dp[i]:maxCon;
        }
        return maxCon;
    }
};

Solution 2: trick
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int size=nums.size();
        int max = 0;
        int sum = 0;
        for (int i=0; i<size; i++){
             sum = (sum+nums[i])*nums[i];
             if(max<sum){max=sum;}
         }
        return max;
    }
};


Solution 3:
class Solution {
public:
    // 从左向右记录每一位左边连续1的个数
    // 从右向左记录每一位右边连续1的个数
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int n=nums.size();
        vector<int> left(n,0),right(n,0);
        for(int i=1;i<n;i++){
            if(nums[i-1]==1)
                left[i]=left[i-1]+1;
        }
        for(int i=n-2;i>=0;i--){
            if(nums[i+1]==1)
                right[i]=right[i+1]+1;
        }
        int maxOnes=0;
        for(int i=0;i<n;i++){
            if(nums[i]==1){
                maxOnes=max(maxOnes,1+left[i]+right[i]);
            }
        }
        return maxOnes;
    }
};


Solution 4: 简化版dp
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int res=0;
        int cur=0;//在i之前连续的1的个数
        for(int i=0;i<nums.size();i++){
            if(nums[i]==1){
                cur++;
            }
            else{
                res=max(res,cur);
                cur=0;
            }
        }
        //最后一部分连续的1
        res=max(res,cur);
        return res;
    }
};
