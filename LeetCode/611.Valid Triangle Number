611. Valid Triangle Number

/*
Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array 
that can make triangles if we take them as side lengths of a triangle.

Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
  Valid combinations are: 
  2,3,4 (using the first 2)
  2,3,4 (using the second 2)
  2,2,3
Note:
  The length of the given array won't exceed 1000.
  The integers in the given array are in the range of [0, 1000].
*/

Solution:暴力 O(n^3)
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int res=0;
        int size=nums.size();
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
                for(int k=j+1;k<size;k++){
                    if(nums[i]+nums[j]>nums[k]&&nums[k]-nums[i]<nums[j]&&nums[k]-nums[j]<nums[i])
                        res++;
                }
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    //利用二分
    int triangleNumber(vector<int>& nums) {
        int res=0;
        int size=nums.size();
        sort(nums.begin(),nums.end());
        //遍历最长边
        for(int i=2;i<size;i++){
            int left=0,right=i-1;
            while(left<right){
                if(nums[left]+nums[right]>nums[i]){
                    res+=right-left;//[left,right-1]这个区域的边都可以和right&i构成三角形
                    right--;
                }
                else
                    left++;
            }
        }
        return res;
    }
};
