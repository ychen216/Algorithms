611. Valid Triangle Number

/*
Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array 
that can make triangles if we take them as side lengths of a triangle.

Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
  Valid combinations are: 
  2,3,4 (using the first 2)
  2,3,4 (using the second 2)
  2,2,3
Note:
  The length of the given array won't exceed 1000.
  The integers in the given array are in the range of [0, 1000].
*/

Solution:暴力 O(n^3)
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int res=0;
        int size=nums.size();
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
                for(int k=j+1;k<size;k++){
                    if(nums[i]+nums[j]>nums[k]&&nums[k]-nums[i]<nums[j]&&nums[k]-nums[j]<nums[i])
                        res++;
                }
            }
        }
        return res;
    }
};
update:
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int res=0;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                for(int k=j+1;k<nums.size();k++){
                    // nums[i]<=nums[j]<=nums[k]
                    if(nums[i]+nums[j]>nums[k])
                        res++;
                    else
                        break;
                }
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        a<=b<=c 若有a+b>c 则可以构成三角形
        若nums是递增的 那么若 nums[i]+nums[j]>nums[k] i<j<k 那么i~j-1都可以和 j,k构成三角形
    */
    int triangleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int res=0;
        // 遍历最长的边
        for(int k=nums.size()-1;k>=2;k--){
            int j=k-1,i=0; // 搜索剩下两条边
            while(i<j){
                if(nums[i]+nums[j]>nums[k]){
                    // i~j-1都可以与 j,k构成三角形
                    res+=j-i;
                    // 试着缩小次小边
                    j--;
                }
                else{
                    // 增大最小边
                    i++;
                }
            }
        }
        return res;
    }
};
