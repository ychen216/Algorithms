10. Regular Expression Matching

/*
Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:
    s could be empty and contains only lowercase letters a-z.
    p could be empty and contains only lowercase letters a-z, and characters like . or *.

Example 1:
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:
Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".

Example 3:
Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

Example 4:
Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".

Example 5:
Input:
s = "mississippi"
p = "mis*is*p*."
Output: false
*/

Solution 1:
class Solution {
public:
    //recursive 参考http://blog.csdn.net/hk2291976/article/details/51165010
    bool helper(string &s,int i,string &p,int j){
        if(j<0){
            if(i<0)//p和s都匹配完了
                return true;
            else//p匹配完而s还没匹配完
                return false;
        }
        //从后向前比较
        if(p[j]=='*'){
            //*不会单独出现 前面必然有一个.或者字母
            if(i>=0&&(p[j-1]=='.'||p[j-1]==s[i]))
                if(helper(s,i-1,p,j))
                    return true;
            //忽略这个*
            return helper(s,i,p,j-2);
        }
        else{
            if(i>=0&&(p[j]=='.'||p[j]==s[i]))
                return helper(s,i-1,p,j-1);
            return false;
        }
    }
    bool isMatch(string s, string p) {
        return helper(s,s.length()-1,p,p.length()-1);
    }
};


Solution 2:
class Solution {
public:
    //DP 参考http://blog.csdn.net/hk2291976/article/details/51165010
    bool isMatch(string s, string p) {
        int lens=s.length(),lenp=p.length();
        bool dp[lens+1][lenp+1];
        dp[0][0]=true;//s,p都为空 匹配
        //初始化 因为空串p只能匹配空串，其他都无能匹配
        for(int i=1;i<=lens;i++)
            dp[i][0]=false;
        //初始化 只有X*能匹配空串s，如果有*，它的真值一定和p[0][j-2]的相同
        for(int j=1;j<=lenp;j++)
            dp[0][j]=j>1&&p[j-1]=='*'&&dp[0][j-2];
        for(int i=1;i<=lens;i++){
            for(int j=1;j<=lenp;j++){
                if(p[j-1]=='*')
                    dp[i][j]=dp[i][j-2]||(s[i-1]==p[j-2]||p[j-2]=='.')&&dp[i-1][j];
                else// 字母或.
                    dp[i][j]=(s[i-1]==p[j-1]||p[j-1]=='.')&&dp[i-1][j-1];
            }
        }
        return dp[lens][lenp];
    }
};

update: 还没有彻底理解
class Solution {
public:
    /*
        DP dp[i][j]表示 s[0,i-1]和p[0,j-1]的匹配情况
        1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
        2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
        3, If p.charAt(j) == '*': 
           here are two sub conditions:
            1. if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty
            2. if p.charAt(j-1) == s.charAt(i) or p.charAt(j-1) == '.':
                dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a 
             or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a
             or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty
    */
    bool isMatch(string s, string p) {
        int lens=s.length(),lenp=p.length();
        vector<vector<bool>> dp(lens+1,vector<bool>(lenp+1,false));
        // 初始化都是空串的情况
        dp[0][0]=true;
        // 初始化p是空串的情况
        for(int i=1;i<=lens;i++)
            dp[i][0]=false;
        // 初始化s是空串的情况 那么只有p是形如(X*)才可以匹配
        //  dp[0][j-2]指p[0,j-3]的匹配情况 j-1是* j-2是x,x*一起忽略掉 看j-3的情况
        for (int j = 1; j <= lenp; j++) {
            dp[0][j]=j>1&&p[j-1]=='*'&&dp[0][j-2]; 
        }
        for (int i = 1 ; i <= lens; i++) {
            for (int j = 1; j <= lenp; j++) {
                if(p[j-1]=='*')
                    // 跳过X*或者s[i-1]和p[j-2]匹配
                    dp[i][j]=dp[i][j-2]||(s[i-1]==p[j-2]||p[j-2]=='.')&&dp[i-1][j];
                else
                    dp[i][j]=dp[i-1][j-1]&&(s[i-1]==p[j-1]||p[j-1]=='.');
            }
        }
        return dp[lens][lenp];
    }
};


update:
class Solution {
public:
    bool isMatch(string s, string p) {
        int lens=s.length(),lenp=p.length();
        vector<vector<bool>> dp(lens+1,vector<bool>(lenp+1,false));
        dp[0][0]=true;
        // 初始化已包含
        // for(int i=1;i<=lens;i++){
        //     dp[i][0]=false;
        // }
        for(int j=1;j<=lenp;j++){
            dp[0][j]=j>1&&p[j-1]=='*'&&dp[0][j-2];
        }
        
        for(int i=1;i<=lens;i++){
            for(int j=1;j<=lenp;j++){
                if(p[j-1]!='*'){
                    dp[i][j]=dp[i-1][j-1]&&(s[i-1]==p[j-1]||p[j-1]=='.');
                }else{
                    // 对于s[i-1]来说 可以跳过p中的x*这个整体进行匹配  
                    // 或者s[i-1]和x匹配 如果s[i-1]和x可以匹配上那么相当于在s[0,i-2]的后面再加上一个x
                    // 所以还要取决于s[0,i-2]和p[0,j-1]的匹配情况 只有匹配成功了（可以和x*匹配上）在可以继续增加x 
                    dp[i][j]=dp[i][j-2]||(s[i-1]==p[j-2]||p[j-2]=='.')&&(dp[i-1][j-2]||dp[i-1][j]);
                }
            }
        }
        return dp[lens][lenp];
    }
};
