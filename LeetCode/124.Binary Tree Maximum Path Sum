124. Binary Tree Maximum Path Sum
/*
Given a binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.


*/

Solution 1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
        从任意一个节点开始的路径 只能沿着树向上走0或多步 然后沿着树向下走0步或多步 一旦向下走就不能再往上走了
        同时一条路径的最高点 是这条路径上所有节点 最近的公共祖先
        遍历每一个节点x 计算以x为最高节点的路径的最大和
    */
    int maxSum;
    int maxPathSum(TreeNode* root) {
        maxSum=INT_MIN;
        maxDown(root);
        return maxSum;
    }
private:
    //从root往一个方向向下走能得到的最大路径和
    int maxDown(TreeNode *root){
        if(root==NULL)
            return 0;
        int left=max(0,maxDown(root->left));//0表示不往左边走的情况
        int right=max(0,maxDown(root->right));
        maxSum=max(maxSum,right+left+root->val);
        return max(left,right)+root->val;
    }
};

Solution 2:
class Solution {
public:
    struct Result{
        int singlePath;
        int maxPath;
        Result(int s,int m):singlePath(s),maxPath(m){}
    };
    
    int maxPathSum(TreeNode* root) {
        Result res=helper(root);
        return res.maxPath;
    }
private:
    //找到以root为根树的MaxPath
    Result helper(TreeNode* root){
        if(root==NULL){
            return Result(0,INT_MIN); 
            //这里maxPath赋值为INT_MIN是因为对于一个空节点不可能构成一个树的根也就不可能存在任何的最大路径的
            //而singlePath的定义是从root向下可以得到的最大路径 可以不包含节点 所以root==NULL可以直接赋值为0
        }
        Result left=helper(root->left);
        Result right=helper(root->right);
        int single=max(left.singlePath,right.singlePath);
        single=max(0,single+root->val);
        
        int maxPath=max(left.maxPath,right.maxPath);
        maxPath=max(maxPath,left.singlePath+right.singlePath+root->val);
        return Result(single,maxPath);
    }
};



/**
* 本参考程序来自九章算法，由 @九章算法 提供。版权所有，转发请注明出处。
* - 九章算法致力于帮助更多中国人找到好的工作，教师团队均来自硅谷和国内的一线大公司在职工程师。
* - 现有的面试培训课程包括：九章算法班，系统设计班，算法强化班，Java入门与基础算法班，Android 项目实战班，
* - Big Data 项目实战班，算法面试高频题班, 动态规划专题班
* - 更多详情请见官方网站：http://www.jiuzhang.com/?source=code
*/ 

public class Solution {
    private class ResultType {
        // singlePath: 从root往下走到任意点的最大路径，这条路径可以不包含任何点
        // maxPath: 从树中任意到任意点的最大路径，这条路径至少包含一个点
        int singlePath, maxPath; 
        ResultType(int singlePath, int maxPath) {
            this.singlePath = singlePath;
            this.maxPath = maxPath;
        }
    }

    private ResultType helper(TreeNode root) {
        if (root == null) {
            return new ResultType(0, Integer.MIN_VALUE);
        }
        // Divide
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);

        // Conquer
        int singlePath = Math.max(left.singlePath, right.singlePath) + root.val;
        singlePath = Math.max(singlePath, 0);

        int maxPath = Math.max(left.maxPath, right.maxPath);
        maxPath = Math.max(maxPath, left.singlePath + right.singlePath + root.val);

        return new ResultType(singlePath, maxPath);
    }

    public int maxPathSum(TreeNode root) {
        ResultType result = helper(root);
        return result.maxPath;
    }
}

update解释：
class Solution {
public:
    // res[0]表示以root为起点的单向路径和的最大值,其最小值为0即一个元素都不包含
    // res[1]表示以root为根的子树 包含的最大和路径,要求至少包含一个节点 如果为null则设为INT_MIN 即空节点树 不可能包含任何路径
    int maxPathSum(TreeNode* root) {
        vector<int> res=helper(root);
        return res[1];
    }
private:
    vector<int> helper(TreeNode *root){
        if(root==nullptr){
            return {0,INT_MIN};
        }
        vector<int> left=helper(root->left);
        vector<int> right=helper(root->right);
        vector<int> res(2,0);
        res[0]=max(left[0],right[0])+root->val;
        res[0]=max(0,res[0]);//res[0]的最小值为0 所以还要跟0比较
        //而最大和路径则没有要求 可能是原来子树中的路径 也有可能是左右子树单向路径和root一同构成的新最大和路径
        res[1]=max(left[0]+right[0]+root->val,max(left[1],right[1]));
        return res;
    }
};


// Version 2:
// SinglePath也定义为，至少包含一个点。
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    private class ResultType {
        int singlePath, maxPath;
        ResultType(int singlePath, int maxPath) {
            this.singlePath = singlePath;
            this.maxPath = maxPath;
        }
    }

    private ResultType helper(TreeNode root) {
        if (root == null) {
            return new ResultType(Integer.MIN_VALUE, Integer.MIN_VALUE);
        }
        // Divide
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);

        // Conquer
        int singlePath =
            Math.max(0, Math.max(left.singlePath, right.singlePath)) + root.val;

        int maxPath = Math.max(left.maxPath, right.maxPath);
        maxPath = Math.max(maxPath,
                           Math.max(left.singlePath, 0) + 
                           Math.max(right.singlePath, 0) + root.val);

        return new ResultType(singlePath, maxPath);
    }

    public int maxPathSum(TreeNode root) {
        ResultType result = helper(root);
        return result.maxPath;
    }

}
