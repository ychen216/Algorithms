787. Cheapest Flights Within K Stops

/*
here are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.

Now given all the cities and fights, together with starting city src and the destination dst, 
your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.

Example 2:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
Output: 500
Explanation: 
The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.
Note:
  The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
  The size of flights will be in range [0, n * (n - 1) / 2].
  The format of each flight will be (src, dst, price).
  The price of each flight will be in the range [1, 10000].
  k is in the range of [0, n - 1].
  There will not be any duplicated flights or self cycles.

*/

Solution:
class Solution {
public:
    //dp[i][k] stop<=k时src到i的最少花费 
    //dp[src][0]=0;dp[f[1]][0]=f[2] f为航线且f[0]=src即从src出发的航线
    //dp[i][k]=min(dp[i][k],dp[f[0]][k-1]+f[2]) f为航线
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        if(src==dst)
            return 0;
        vector<vector<int>> dp(n,vector<int>(K+1,INT_MAX));
        //初始化 k==0的情况
        dp[src][0]=0;
        //航线初始化
        for(auto &f:flights)
            if(f[0]==src)
                dp[f[1]][0]=min(dp[f[1]][0],f[2]);//避免有多条花费不同的相同航线 取最小值
        for(int k=1;k<=K;k++){
            //初始化
            for(int p=0;p<n;p++)
                dp[p][k]=dp[p][k-1];
            for(auto &f:flights)
                if(dp[f[0]][k-1]!=INT_MAX)//防止溢出
                    dp[f[1]][k]=min(dp[f[1]][k],dp[f[0]][k-1]+f[2]);
        }
        return dp[dst][K]==INT_MAX?-1:dp[dst][K];
    }
};


Solution 2:
class Solution {
public:
    /*
        可以利用Bellman-Ford算法 得到单元最短路径 还可以判断是否有负环
        在这里只需要将拓展松弛的轮数#vertex-1(存在无环最短路径最多有#vertex-1条边 中间有#vertex-2个节点也就是这里说的stop)设置为k+1即可
        同时要注意 每一轮松弛的时候要和上一轮松弛的结果作比较 而不是在本轮松弛的基础上比较
        比如example2里 第一轮松弛时 松弛了节点1，2 dis[1]=100 dis[2]=500 同时edge(1,2,100)的松弛会改变dis[2]=200
        我们需要控制每一轮松弛对每一条路径最多加入一条边
    */
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K){
        if(src==dst)
            return 0;
        vector<int> dis(n,INT_MAX);
        dis[src]=0;
        int u,v,w;
        // 最多松弛k+1次
        for(int i=0;i<K+1;i++){
            vector<int> copy(dis.begin(),dis.end()); // 必须与本次松弛之前的数据进行比较
            bool isUpdated=false; // 不能继续松弛就直接跳出
            for(auto &edge:flights){
                u=edge[0],v=edge[1],w=edge[2];
                if(dis[u]!=INT_MAX&&copy[v]>dis[u]+w){
                    copy[v]=dis[u]+w;
                    isUpdated=true;
                }
            }
            dis=copy;
            if(!isUpdated)
                break;
        }
        return dis[dst]==INT_MAX? -1: dis[dst];
    }
};

Solution 3:
class Solution {
public:
    /*  
        可以利用Dijkstra算法 查找最短路径 同时记录下该路径中还有多少可以松弛的余地(还有几个stop可以消耗)， Dijkstra每一次出队的都确定了一个节点x src->x的最短距离
        stop的概念是src->dst中途经过的节点 不包括src和des 所以除开src 到达dst的路径上最多有K+1个节点 K+1条边
    */
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K){
        if(src==dst)
            return 0;
        unordered_map<int,unordered_map<int,int>> graph;
        for(auto&edge:flights){
            graph[edge[0]][edge[1]]=edge[2];
        }
        priority_queue<vector<int>,vector<vector<int>>,cmp> pq; //{v,dis of v to src, left stop}
        vector<int> init(3);
        init[0]=src,init[1]=0,init[2]=K+1; // 注意初始stop初始化为K+1
        pq.push(init);
        while(!pq.empty()){
            vector<int> pre=pq.top();
            pq.pop();
            // 出队的就是剩下的节点中 从src出发最近的节点x 确定了src->x的最短路径
            if(pre[0]==dst)
                return pre[1];
            if(pre[2]==0) continue; // 不能继续拓展了
            for(auto & edge:graph[pre[0]]){
                vector<int> next(3);
                next[0]=edge.first, next[1]=pre[1]+edge.second, next[2]=pre[2]-1;
                pq.push(next);
            }
        }
        return -1;
    }
private:
    struct cmp{
        // 最小堆 定义优先级小的
        bool operator()(const vector<int>&v1,const vector<int> &v2){
            return v1[1] > v2[1];
        }
    };
};
