435. Non-overlapping Intervals
/*
Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals 
non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
Example 1:
Input: [ [1,2], [2,3], [3,4], [1,3] ]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.

Example 2:
Input: [ [1,2], [1,2], [1,2] ]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:
Input: [ [1,2], [2,3] ]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
*/

Solution:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    /**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    /*
        求删除最少的区间使得区间不相重叠 等价于求最多有多少个区间不重叠
        这与活动安排是一样的 最多能安排多少活动 优先安排最早结束的活动
    */
    int eraseOverlapIntervals(vector<Interval>& intervals) {
        int n=intervals.size();
        if(n<2)
            return 0;
        sort(intervals.begin(),intervals.end(),[&](auto &a,auto &b){
           return a.end<b.end; 
        });
        int end=intervals[0].end, longest=1;
        for(int i=1;i<n;i++){
            if(intervals[i].start>=end){
                longest++;
                end=intervals[i].end;
            }
        }
        return n-longest;
    }
};

改写直接统计remove
class Solution {
public:
    /*
        求删除最少的区间使得区间不相重叠 等价于求最多有多少个区间不重叠
        这与活动安排是一样的 最多能安排多少活动 优先安排最早结束的活动
    */
    int eraseOverlapIntervals(vector<Interval>& intervals) {
        int n=intervals.size();
        if(n<2)
            return 0;
        sort(intervals.begin(),intervals.end(),[&](auto &a,auto &b){
           return a.end<b.end; 
        });
        int end=intervals[0].end, remove=0;
        for(int i=1;i<n;i++){
            if(intervals[i].start>=end){
                end=intervals[i].end;
            }
            else
                remove++;
        }
        return remove;
    }
};
