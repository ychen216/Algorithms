676. Implement Magic Dictionary

/*
Implement a magic directory with buildDict, and search methods.
For the method buildDict, you'll be given a list of non-repetitive words to build a dictionary.
For the method search, you'll be given a word, and judge whether if you modify exactly one character into another character in this word, 
the modified word is in the dictionary you just built.

Example 1:
  Input: buildDict(["hello", "leetcode"]), Output: Null
  Input: search("hello"), Output: False
  Input: search("hhllo"), Output: True
  Input: search("hell"), Output: False
  Input: search("leetcoded"), Output: False
Note:
You may assume that all the inputs are consist of lowercase letters a-z.
For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.
Please remember to RESET your class variables declared in class MagicDictionary, as static/class variables are persisted across multiple test cases. Please see here for more details.

*/

Solution:
class MagicDictionary {
public:
    /** Initialize your data structure here. */
    // 记录dict中每一个字符串 替换掉每一位字符后的结果
    MagicDictionary() {
        
    }
    
    /** Build a dictionary through a list of words */
    void buildDict(vector<string> dict) {
        for(auto &word:dict){
            for(int i=0;i<word.length();i++){
                string w=word;
                w[i]='*';//该位可以是替换为任意非w[i]的字符
                if(mmap.find(w)==mmap.end())
                    mmap[w]=word[i];
                else if(mmap[w]!=word[i])
                    mmap[w]=0;//已经存在相同的字符串 此时必然可以替换的字符串
            }
        }
    }
    
    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
    bool search(string word) {
        for(int i=0;i<word.length();i++){
            char c=word[i];
            word[i]='*';
            if(mmap.find(word)!=mmap.end()&&mmap[word]!=c)
                return true;
            word[i]=c;
        }
        return false;
    }
private:
    unordered_map<string,char> mmap;
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary obj = new MagicDictionary();
 * obj.buildDict(dict);
 * bool param_2 = obj.search(word);
 */
