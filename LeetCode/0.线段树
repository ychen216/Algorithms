LeetCode 307
参考：https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html

一、适用的问题举例：

A.给出n个数，n<=100，和m个询问，每次询问区间[l，r]的和，并输出。

一种回答：这也太简单了，O（n）枚举搜索就行了。

另一种回答：还用得着o(n）枚举，前缀和o(1)就搞定。

那好，我再修改一下题目。

B.给出n个数，n<=100，和m个操作，每个操作可能有两种：1、在某个位置加上一个数；2、询问区间[l，r]的和，并输出。

回答：o（n）枚举。

动态修改最起码不能用静态的前缀和做了。

好，我再修改题目：

C.给出n个数，n<=1000000，和m个操作，每个操作可能有两种：1、在某个位置加上一个数；2、询问区间[l，r]的和，并输出。

回答：o（n）枚举绝对超时。

再改：

D，给出n个数，n<=1000000，和m个操作，每个操作修改一段连续区间[a,b]的值

回答：从a枚举到b，一个一个改。。。。。。有点儿常识的人都知道超时

那怎么办？这就需要一种强大的数据结构：线段树。


二、线段树介绍
线段树是一种二叉树数据结构，主要用于高效解决连续区间的动态查询问题，由于二叉结构的特性，它基本能保持每个操作的复杂度为O(logn)。

线段树的每个节点表示一个区间，子节点则分别表示父节点的左右半区间，例如父亲的区间是[a,b]，那么(c=(a+b)/2)左儿子的区间是[a,c]，右儿子的区间是[c+1,b]

每个节点以结构体的方式存储，结构体包含以下几个信息：
     区间的左右端点值；（必有）
     区间左孩子、右孩子；
     这个区间要维护的信息，比如区间和sum（事实际情况而定，数目不等）。

3、线段树的基本思想：二分。

三、线段树的基本操作
建树、单点查询、单点修改、区间查询、区间修改。
1、建树
主体思路：a、对于二分到的每一个结点，给它的左右端点确定范围。
         b、如果是叶子节点，存储要维护的信息。
         c、状态合并。

2、单点查询
主体思路：与二分查询法基本一致，如果当前枚举的点左右端点相等，即叶子节点，就是目标节点。
         如果不是，因为这是二分法,所以设查询位置为x，当前结点区间范围为了l，r，中点为mid，则如果x<=mid，则递归它的左孩子，否则递归它的右孩子
         
3、单点修改
结合单点查询的原理，找到x的位置；根据建树状态合并的原理，修改每个结点的状态。

4、区间查询：即查询一段区间的状态，在引例中为查询区间[x,y]的和
这部分直接看网页的图比较明了
假设当前节点区间为[l,r],mid=(l+r)/2,要查询的区间尾[x,y]
  a.如果[x,y]包含【l,r】，即x<=l<=r<=y 那么当前节点维护的值sum，是目标答案的一部分，直接加上当前区间的值
  b.如果[l,r]包含[x,y]，即l<=x<=y<=r
    如果[x,y]在【l,r】前半段，即y<=mid,那么到当前节点的左孩子查找，如果[x,y]在【l,r】后半段，mid<x，那么搜索右子树；否则，左右子树都走
    mid=(l+r)/2
    y<=mid ,即 查询区间全在，当前区间的左子区间，往左孩子走
    x>mid 即 查询区间全在，当前区间的右子区间，往右孩子走
    否则，两个子区间都走
    
  c.[l,r]和[x,y]部分相交，那么根据x,y和mid的关系遍历左子树或右孩子
  
 
5、区间修改
TODO 还未攻略

  
