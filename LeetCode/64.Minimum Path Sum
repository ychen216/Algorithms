64. Minimum Path Sum

/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of 
all numbers along its path.

Note: You can only move either down or right at any point in time.
Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.
*/

Solution:DP space O(n^2)
class Solution {
public:
    //DP dp[i][j]表示从(0,0)到(i,j)的pathsum 每个元素只能从上方或者左方到达
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        if(m==0)
            return 0;
        int n=grid[0].size();
        int dp[m][n];
        dp[0][0]=grid[0][0];
        //第一行元素初始化
        for(int i=1;i<n;i++)
            dp[0][i]=dp[0][i-1]+grid[0][i];
        //第一列元素初始化
        for(int j=1;j<m;j++)
            dp[j][0]=dp[j-1][0]+grid[j][0];
        
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++)
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
        }
        return dp[m-1][n-1];
    }
};

Solution : DP space O(n)
class Solution {
public:
    //DP 每个元素只能从上方或者左方到达
    //进行空间优化 一行一行计算 每次都只涉及到[i-1][j]和[i][j-1]的结果 用一维数组保存即可
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        if(m==0)
            return 0;
        int n=grid[0].size();
        int dp[n];
        dp[0]=grid[0][0];
        //第一行元素初始化
        for(int i=1;i<n;i++)
            dp[i]=dp[i-1]+grid[0][i];
        for(int i=1;i<m;i++){
            //第一列
            dp[0]=dp[0]+grid[i][0];
            for(int j=1;j<n;j++)
                dp[j]=min(dp[j-1],dp[j])+grid[i][j];//分别选左边和上一行的元素
        }
        return dp[n-1];
    }
};
