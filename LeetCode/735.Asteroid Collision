735. Asteroid Collision

/*
We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

Example 1:
Input: 
asteroids = [5, 10, -5]
Output: [5, 10]
Explanation: 
The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.
Example 2:
Input: 
asteroids = [8, -8]
Output: []
Explanation: 
The 8 and -8 collide exploding each other.
Example 3:
Input: 
asteroids = [10, 2, -5]
Output: [10]
Explanation: 
The 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.
Example 4:
Input: 
asteroids = [-2, -1, 1, 2]
Output: [-2, -1, 1, 2]
Explanation: 
The -2 and -1 are moving left, while the 1 and 2 are moving right.
Asteroids moving the same direction never meet, so no asteroids will meet each other.
Note:
  The length of asteroids will be at most 10000.
  Each asteroid will be a non-zero integer in the range [-1000, 1000]..

*/

Solution:
class Solution {
public:
    // 由于星星的速率相同所以同方向的星星不会相撞 利用栈完成操作 遇到两个相向的星星发生碰撞(只有前面的星星向右后面的星星向左的情况才会发生)
    vector<int> asteroidCollision(vector<int>& stars) {
        int n=stars.size();
        stack<int> st;
        for(int i=0;i<n;i++){
            int curStar=stars[i];
            //出现相向的星星
            while(!st.empty()&&curStar<0&&st.top()>0){
                if(abs(curStar)>abs(st.top())){
                    st.pop();//当前星星能量大得以保存栈顶星星爆炸 又 在栈中的星星都是一个方向的 所以curStar还会继续与栈中的星星碰撞
                }else if(abs(curStar)==abs(st.top())){
                    //都爆炸
                    curStar=0;
                    st.pop();
                }else{
                    //当前星星爆炸
                    curStar=0;
                }
            }
            if(curStar!=0)//未爆炸
                st.push(curStar);
        }
        vector<int> res(st.size());
        for(int i=st.size()-1;i>=0;i--){
            res[i]=st.top();
            st.pop();
        }
        return res;
    }
};

update:
class Solution {
public:
    // 由于星星的速率相同所以同方向的星星不会相撞 利用栈完成操作 遇到两个相向的星星发生碰撞(只有前面的星星向右后面的星星向左的情况才会发生)
    vector<int> asteroidCollision(vector<int>& stars) {
        vector<int> st; // vector 模拟stack 存储没有爆炸的stars
        for(auto &star: stars){
            // 发生碰撞 栈顶star爆炸且current star继续向前的情况 栈顶元素向右当前元素向左 且当前元素直径大于栈顶元素
            // 条件可以写为!st.empty()&&st.back()>0&&star<0&&st.back()<-star
            while(!st.empty()&&st.back()>0&&st.back()<-star){
                st.pop_back();
            }
            
            //跳出循环时表示current star不会继续向右前进了，止步于此，要判断该元素是被保留还是和栈顶元素一起爆炸
            
            //当栈为空 or 栈顶元素向左飞时(star无论向哪个方向飞都不会引发碰撞) or 栈顶元素和current star都是相同向右飞的
            //那么current star现在不会再引发爆炸且可以保留下来
            if(st.empty()||st.back()<0 || star>0){
                st.push_back(star);
            }
            //否则只存在栈顶元素向右飞 current star向左飞 会发生爆炸，且会炸掉自身
            else if(star<0&&-star==st.back()){
                st.pop_back();
            }
        }
        return st;
    }
};
