438. Find All Anagrams in a String
/*
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
*/

Solution:
class Solution {
public:
    //只要子串中各字母出现的次数和 p中各字母出现的次数一样 就是一个anagram
    vector<int> findAnagrams(string s, string p) {
        int lens=s.length(),lenp=p.length();
        int ms[26]={0},mp[26];
        for(int i=0;i<lenp;i++)
            ms[p[i]-'a']++;
        vector<int> res;
        for(int i=0;i<=lens-lenp;i++){
            for(int k=0;k<26;k++)
                mp[k]=0;
            for(int j=0;j<lenp;j++){
                mp[s[i+j]-'a']++;
            }
            bool flag=true;
            for(int k=0;k<26;k++)
                if(ms[k]!=mp[k]){
                    flag=false;
                    break;
                }
            if(flag)
                res.push_back(i);
        }
        return res;
    }
};
