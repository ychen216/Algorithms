446. Arithmetic Slices II - Subsequence
/*
A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequences:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7

A zero-indexed array A consisting of N numbers is given. A subsequence slice of that array is any sequence of integers (P0, P1, ..., Pk) such that 0 ≤ P0 < P1 < ... < Pk < N.

A subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic. In particular, this means that k ≥ 2.

The function should return the number of arithmetic subsequence slices in the array A.

The input contains N integers. Every integer is in the range of -231 and 231-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 231-1.


Example:

Input: [2, 4, 6, 8, 10]

Output: 7

Explanation:
All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]

*/

Solution:
class Solution {
public:
    /*
    T(i,d)表示以A[i]结尾diff=d的长度大于等于2的子序列数目
    遍历0<=j<i 若存在T(j,d)>0那么就存在序列使得...A[j]..A[i]构成新的Arithmetic Slices
    res+=T(j,d)
    更新T(i,d)=sum(T(j,d)+1),加一是因为A[j]A[i]又构成了一个新的长度为2的新序列
    */
    int numberOfArithmeticSlices(vector<int>& A) {
        int size=A.size();
        if(size<3)
            return 0;
        vector<unordered_map<int,int>> dp(size);
        int res=0;
        for(int i=0;i<size;i++){
            for(int j=0;j<i;j++){
                long diff=(long)A[i]-(long)A[j];
                if(diff>INT_MAX||diff<INT_MIN)continue;
                int d=(int)diff;
                dp[i][d]+=1;
                if(dp[j].find(d)!=dp[j].end()){
                    res+=dp[j][d];
                    dp[i][d]+=dp[j][d];
                }
            }
        }
        return res;
    }
};
