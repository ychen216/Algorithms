14. Longest Common Prefix

/*
Write a function to find the longest common prefix string amongst an array of strings.
*/

Solution:
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int snum=strs.size();
        if(snum==0)
            return "";
        if(snum==1)
            return strs[0];
        //最长前缀不超过任意一个字符串的长度 这里随意取第一个字符串
        int len=strs[0].length(),p=0;
        string prefix="";
        //标志是否不应该继续增加前缀的长度 1.p超过最短字符串的长度 2 第p的字符不是所有字符串共享的前缀
        bool flag=true;
        while(p<len&&flag){
            //与1~snum-1的字符串对比
            for(int i=1;i<snum;i++){
                //目前的前缀已经超过最短字符串的长度
                if(strs[i].length()<p||strs[i][p]!=strs[0][p]){
                    flag=false;
                    break;
                }
            }
            if(flag)
                prefix+=strs[0][p++];
        }
        return prefix;
        
    }
};

Solution 2:
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.size()==0)
            return "";
        int minLen=INT_MAX,index=-1;
        // 最长前缀必然在最短的字符串中产生
        for(int i=0;i<strs.size();i++){
            if(strs[i].length()<minLen){
                minLen=strs[i].length();
                index=i;
            }
        }
        for(int len=minLen;len>0;len--){
            string prefix=strs[index].substr(0,len);
            bool ok=true;
            for(int i=0;i<strs.size();i++){
                if(i==index)continue;
                if(strs[i].substr(0,len)!=prefix){
                    ok=false;
                    break;
                }
            }
            if(ok)
                return prefix;
        }
        return "";
    }
};

Solution 3:
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int n=strs.size();
        if(n==0)
            return "";
        // 初始选取第一个字符串作为候选前缀
        string prefix=strs[0];
        int len=strs[0].length();
        int i=1;
        while(i<n){
            while(strs[i].substr(0,len)!=prefix){
                len--;
                prefix=prefix.substr(0,len);
            }
            i++;
        }
        return prefix;
    }
};
