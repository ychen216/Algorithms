135. Candy
/*
There are N children standing in a line. Each child is assigned a rating value.
You are giving candies to these children subjected to the following requirements:
  Each child must have at least one candy.
  Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?
*/

Solution 1:
class Solution {
public:
    /*
        要求每个人至少有一颗糖 且高等级的人比他的邻居获得更多的糖(利用左右两次遍历来保证)
    */
    int candy(vector<int>& ratings) {
        int n=ratings.size();
        vector<int> candy(n,1);//初始化每个人有一颗糖
        //保证从左到右 高等级的人比其左邻居糖更多
        for(int i=1;i<n;i++)
            if(ratings[i]>ratings[i-1])
                candy[i]=candy[i-1]+1;
        //保证从右到左
        for(int i=n-1;i>0;i--)
            if(ratings[i-1]>ratings[i])
                candy[i-1]=max(candy[i-1],candy[i]+1);
        int res=0;
        for(int i=0;i<n;i++)
            res+=candy[i];
        return res;
    }
};

update:
class Solution {
public:
    int candy(vector<int>& ratings) {
        int n=ratings.size();
        int min_candy=0;
        vector<int> candy(n,1);
        //check rating比邻居高的是否获得更多的candy
        //如果不满足就以 1 candy的增量来增加 确保花费最少的candy
        //每个人和他左邻居作比较 从左向右这样遍历下来 
        //可以保证如果一个人比左邻居的优先级高 那么他的糖果数比左邻居多
        for(int i=1;i<n;i++){
            if(ratings[i]>ratings[i-1]){
                //candy[i]=max(candy[i],candy[i-1]+1);//candy[i]至少要比i-1多1个
                candy[i]=candy[i-1]+1;
            }
        }
        //确保了每个人和左邻居之间糖果数是正确的之后 我们比较每个人和右邻居的优先级情况
        //从右向左遍历
        for(int i=n-2;i>=0;i--){
            if(ratings[i]>ratings[i+1]){
                candy[i]=max(candy[i],candy[i+1]+1);
                //candy[i]至少要比i+1多一个 但是可能在上一轮跟左邻居比较的过程中 
                //可能使得candy[i]>candy[i+1]+1 我们需要继续保有跟左邻居比较的约束
                //所以candy[i]=max(candy[i],candy[i+1]+1);
            }
        }
        for(auto &num:candy){
            min_candy+=num;
        }
        return min_candy;
    }
};
