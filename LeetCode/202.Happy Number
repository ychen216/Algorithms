202. Happy Number

/*
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

  12 + 92 = 82
  82 + 22 = 68
  62 + 82 = 100
  12 + 02 + 02 = 1
*/
Solution:
class Solution {
public:
    bool isHappy(int n) {
        if(n==1)
            return true;
        set<int> s;
        while(n!=1){
            s.insert(n);
            int temp=n;
            n=0;
            while(temp){
                n+=(temp%10)*(temp%10);
                temp/=10;
            }
            if(s.count(n))
                return false;
        }
        return true;
    }
};

改写
class Solution {
public:
    bool isHappy(int n) {
        unordered_set<int> sset;
        while(n!=1){
            if(sset.find(n)==sset.end())
                sset.insert(n);
            else// 陷入循环
                return false;
            int sum=0;
            while(n){
                int r=n%10;
                sum+=r*r;
                n/=10;
            }
            n=sum;
        }
        return true;
    }
};

Solution 2:
class Solution {
public:
    // 利用Floyd Cycle Detection Algorithm检查是否有环 快慢指针
    // 该问题无论是否是happynum都存在环 即使在得到结果为1时也不断在1处循环
    // 将空间复杂度降为O(1)
    bool isHappy(int n) {
        int slow=n,fast=n;
        do{
            slow=getDigitSum(slow);
            fast=getDigitSum(fast);
            fast=getDigitSum(fast);
        }while(slow!=fast);
        return slow==1?true:false;
    }
private:
    int getDigitSum(int n){
        int sum=0;
        while(n){
            int r=n%10;
            sum+=r*r;
            n/=10;
        }
        return sum;
    }
};
