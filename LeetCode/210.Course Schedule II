210. Course Schedule II
/*
There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]

4, [[1,0],[2,0],[3,1],[3,2]]
There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
*/

Solution:
class Solution {
public:
    //拓扑排序 入度为0
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        int indegree[numCourses]={0};
        map<int,vector<int>> mmap;//存储边
        //记录入度 并存储每个节点的边
        for(auto &edge:prerequisites){
            int pre=edge.second;//预先课程
            int target=edge.first;
            indegree[target]++;
            if(mmap.find(pre)==mmap.end())
                mmap[pre]={};
            mmap[pre].push_back(target);
        }
        queue<int> q;
        vector<int> res;
        int indegree0=0;
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                q.push(i);
                indegree0++;
            }
        }
        while(!q.empty()){
            int point=q.front();
            q.pop();
            res.push_back(point);
            if(mmap.find(point)!=mmap.end()){
                vector<int> &list=mmap[point];
                for(int i=0;i<list.size();i++){
                    if(--indegree[list[i]]==0){
                        indegree0++;
                        q.push(list[i]);
                    }
                }
            }
        }
        if(indegree0==numCourses)
            return res;
        return {};
    }
};


update:
class Solution {
public:
    /*
        判断是否有环 是否能够拓扑排序
        如果没有环 那么输出任意一种拓扑排序:
            可以判断节点入度是否为0 然后删除与入度为0的节点相接的边 直到所有节点的入度都为零
            实现时 可以利用队列保存入度为0的节点 同时利用map实现邻接链表保存{pre-coures,[courese]}
        如果有环 输出空数组
    */
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        unordered_map<int,vector<int>> edges;
        vector<int> inDegree(numCourses,0);
        // 统计入度 构建图的邻接链表
        for(auto& p:prerequisites){
            edges[p.second].push_back(p.first);
            inDegree[p.first]++;
        }
        queue<int> q;
        vector<int> res;
        // 入度为0的节点入队
        for(int i=0;i<numCourses;i++){
            if(inDegree[i]==0){
                q.push(i);
                res.push_back(i);
            }
        }
        while(!q.empty()){
            int preCourse=q.front();
            q.pop();
            // 将于preCourse相邻接的节点入度减少1
            for(auto &nextCourse:edges[preCourse]){
                if(--inDegree[nextCourse]==0){
                    q.push(nextCourse);
                    res.push_back(nextCourse);
                }
            }
        }
        return res.size()==numCourses ? res: vector<int>();
    }
};
