693. Binary Number with Alternating Bits

/*
Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.

Example 1:
Input: 5
Output: True
Explanation:
The binary representation of 5 is: 101
Example 2:
Input: 7
Output: False
Explanation:
The binary representation of 7 is: 111.
Example 3:
Input: 11
Output: False
Explanation:
The binary representation of 11 is: 1011.
Example 4:
Input: 10
Output: True
Explanation:
The binary representation of 10 is: 1010.
*/

Solution 1:
class Solution {
public:
    bool hasAlternatingBits(int n) {
        int r=n%2;
        n/=2;
        bool flag=true;
        while(n){
            if(r==n%2){
                flag=false;
                break;
            }
            else{
                r=r==1?0:1;
                n/=2;
            }
        }
        return flag;
    }
};

Solution 2ï¼šnaive bit operator
class Solution {
public:
    bool hasAlternatingBits(int n) {
        int r=(n&1);
        n>>=1;
        bool flag=true;
        while(n){
            if((n&1)==r){
                flag=false;
                break;
            }
            else{
                r=1-r;
                n>>=1;
            }
        }
        return flag;
    }
};

Solution 3:
class Solution {
public:
    bool hasAlternatingBits(int n) {
        int r=n&1;
        while((n&1)==r){
            r=1-r;
            n>>=1;
        }
        return n==0;
    }
};
