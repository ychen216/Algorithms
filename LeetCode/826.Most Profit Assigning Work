826. Most Profit Assigning Work

/*
We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job. 

Now we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i]. 

Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.

What is the most profit we can make?

Example 1:
Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100 
Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.

Notes:
  1 <= difficulty.length = profit.length <= 10000
  1 <= worker.length <= 10000
  difficulty[i], profit[i], worker[i]  are in range [1, 10^5]
*/

Solution 1:
class Solution {
public:
    /*
        解决方案是给每一个工人i分配一个任务t能够得到最高的收益profit[t]且难度difficulty[t]不超过worker[i]
        我们可以记录难度<=d的任务可以获得的最大利润p dp[d]=p,具体地:利用map记录{difficulty,profit}这样就按difficulty从小到大排序了 然后从头开始遍历更新dp[d]
        那么对于每一个工人i我们只需要寻找最大的d使得d<=worker[i] 那么dp[d]就是该工人能获得的利润
    */
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        int n=worker.size();
        map<int,int> dft2profit;// 记录{difficulty,profit}
        for(int i=0;i<n;i++){
            // 避免有任务有相同难度但是不同的利润
            if(dft2profit.find(difficulty[i])!=dft2profit.end())
                dft2profit[difficulty[i]]=max(dft2profit[difficulty[i]], profit[i]);
            else
                dft2profit[difficulty[i]]=profit[i];
        }
        // 更新profit 使得dft2profit[d]记录的是 所有<=d难度的任务中可以获得最大的利润
        int curMaxProfit=0;
        for(auto &p: dft2profit){
            /*
            if(p.second<curMaxProfit)
                p.second=curMaxProfit;
            else if(p.second>curMaxProfit){
                curMaxProfit=p.second;
            }
            */
            curMaxProfit=max(curMaxProfit,p.second);
            p.second=curMaxProfit;
        }
        int totalProfit=0;
        for(int i=0;i<n;i++){
            // 找到大于worker[i]的第一个任务
            auto it=dft2profit.upper_bound(worker[i]);
            // 所有任务的难度都>worker[i]
            if(it==dft2profit.begin()) continue;
            it--; //可以处理的最大困难
            totalProfit+=it->second;
        }
        return totalProfit;
    }
};


Solution 2:
class Solution {
public:
    /*
        解决方案是给每一个工人i分配一个任务t能够得到最高的收益profit[t]且难度difficulty[t]不超过worker[i]
        我们可以记录记录{difficulty,profit}并按照difficulty从小到大排序 并对worker按照他们的能力从小到大排序
        然后利用双指针遍历 对于worker[i]遍历{difficulty,profit}所有difficulty<=worker[i]的pair找到最大利润curMaxProfit 然后worker[i+1](>=worker[i])继续向后面的pair遍历 得到的利润为max(curMaxProfit,curProfit)
    */
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        int n=worker.size();
        vector<pair<int,int>> jobs;// 记录{difficulty,profit}
        for(int i=0;i<n;i++){
            jobs.push_back({difficulty[i],profit[i]});
        }
        sort(jobs.begin(),jobs.end());
        sort(worker.begin(),worker.end());
        int totalProfit=0, p=0, curMaxProfit=0; //p是jobs的指针
        for(auto ability:worker){
            // 遍历jobs
            while(p<n&&jobs[p].first<=ability){
                curMaxProfit=max(curMaxProfit,jobs[p].second);
                p++;
            }
            totalProfit+=curMaxProfit;
        }
        return totalProfit;
    }
};

update:利用优先队列找到当前可以完成的work中profit最大的 没有上一种处理方法节省时间
class Solution {
public:
    //为每一个worker分配可以完成且profit最大的work
    //对worker排序，然后逐步加入difficulty不超过worker的work,然后从中选择profit最大的
    //可以结合优先队列完成
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        sort(worker.begin(),worker.end());
        vector<pair<int,int>> diff_profit;
        for(int i=0;i<profit.size();i++){
            diff_profit.push_back({difficulty[i],profit[i]});
        }
        //按照难度递增
        sort(diff_profit.begin(),diff_profit.end(),[&](pair<int,int>&p1,pair<int,int>&p2){
            return p1.first<p2.first;
        });
        int res=0;
        priority_queue<int> q;//最大堆
        int j=0;//difficulty要继续加入的起始index
        for(int i=0;i<worker.size();i++){
            for(;j<difficulty.size()&&diff_profit[j].first<=worker[i];j++){
                q.push(diff_profit[j].second);
            }
            if(!q.empty()){
                res+=q.top();
            }
        }
        return res;
    }
};
