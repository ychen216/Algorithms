126. Word Ladder II

/*
Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note:
  Return an empty list if there is no such transformation sequence.
  All words have the same length.
  All words contain only lowercase alphabetic characters.
  You may assume no duplicates in the word list.
  You may assume beginWord and endWord are non-empty and are not the same.
*/

Solution:
class Solution {
public:
    /* 
        参考 http://www.cnblogs.com/grandyang/p/4548184.html
        利用bfs 这里主要是要用到剪枝操作
        1.某条路径的长度超过了已有的最短路径的长度 就要舍弃
        2.构建路径时 将上一轮新增加到路径中的词从dict中删去 因为该词再次在后面出现时不可能是最短路径
        eg. a->b, a->c 这时要从dict中删去b,c;因为a->b->..->c(后面可能的情况和a->c后面的情况一样)和a->c->..->b都不可能是最短路径
    */
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        vector<vector<string>> res;
        unordered_set<string> dict(wordList.begin(),wordList.end());//词典
        unordered_set<string> occurred;//已经添加的词
        queue<vector<string>> q;//构造最短路径的队列
        vector<string> path;
        path.push_back(beginWord);
        q.push(path);
        int level=1,minLevel=INT_MAX;
        while(!q.empty()){
            auto cur=q.front();q.pop();
            //更新level及在词典中删去已加入路径的词
            if(cur.size()>level){
                for(auto &word:occurred)dict.erase(word);
                occurred.clear();//清空以存储下一轮的词
                level=cur.size();
                if(level>minLevel)
                    break;//剪枝
            }
            string last=cur.back();//该路径的最后一个词
            //构造该路径下一个词
            for(int i=0;i<last.length();i++){
                string next=last;
                for(char j='a';j<='z';j++){
                    if(j==last[i])continue;
                    next[i]=j;
                    if(dict.find(next)!=dict.end()){
                        vector<string> nextPath=cur;
                        nextPath.push_back(next);
                        occurred.insert(next);
                        if(next==endWord){
                            res.push_back(nextPath);
                            minLevel=level;
                        }else{
                            q.push(nextPath);
                        }
                    }
                }
            }
        }
        return res;
    }
};

update:更好理解的层次遍历
class Solution {
public:
    /* 
       可以利用这个图进行理解 https://leetcode.com/problems/word-ladder-ii/discuss/172308/A-kind-of-concept-with-diagrams-()
       这里要注意的是:
       1.我们进行BFS的是候选路径而不是单个单词
       2.并不能在某个长度为len的路径中增加一个单词word就将其标记visit,然后不再使用。因为可能其他相同长度len的候选路径下一步转换也可以到达这一个单词word。
       所以应该在长度为len的所有候选路径都更新完第len+1步时，再将所有在len+1步加入的word全部标记，这样才能避免这些word出现在len+1后的位置 构成非最短路径
    */
    vector<vector<string>> findLadders(string startWord, string endWord, vector<string>& wordList) {
        vector<vector<string>> res;
        unordered_set<string> dict(wordList.begin(),wordList.end());//词典
        if(dict.find(endWord)==dict.end()){
            return res;
        }
        unordered_set<string> occurred;//该轮(增加一个单词)添加的新词
        queue<vector<string>> q;//构造最短路径的队列
        vector<string> path;
        path.push_back(startWord);
        q.push(path);
        if(dict.find(startWord)!=dict.end()){
            dict.erase(startWord);
        }
        int len=startWord.length();
        while(!q.empty()){
            int n=q.size();
            bool ok=false;
            //这些都是长度相等的候选path
            for(int i=0;i<n;i++){
                auto curPath=q.front();
                q.pop();
                string nextWord=curPath.back();//下一个可能的词的原型
                for(int j=0;j<len;j++){
                    char origin=nextWord[j];
                    for(char c='a';c<='z';c++){
                        if(origin==c){
                            continue;
                        }
                        nextWord[j]=c;
                        if(dict.find(nextWord)!=dict.end()){
                            vector<string> nextPath=curPath;
                            nextPath.push_back(nextWord);
                            q.push(nextPath);
                            occurred.insert(nextWord);
                            if(nextWord==endWord){
                                ok=true;
                                res.push_back(nextPath);
                            }
                        }
                    }
                    nextWord[j]=origin;
                }
            }
            //该长度的拓展已经有满足要求的path了 接下来长度更长的就不可能是最短path
            if(ok){
                break;
            }
            //把该第i轮拓展的词全部从词表中删去 这些词出现的最早位置就是i,在i之后出现的都不是最短了 
            for(auto &occur:occurred){
                dict.erase(occur);
            }
            occurred.clear();
        }
        return res;
    }
};

update:
class Solution {
public:
    // 主体利用BFS拓展 找到最短路径
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        vector<vector<string>> res;
        unordered_set<string> dict(wordList.begin(),wordList.end());
        if(dict.find(endWord)==dict.end()){
            return res;
        }
        if(dict.find(beginWord)!=dict.end()){
            dict.erase(beginWord);
        }
        int lenw=beginWord.length();
        queue<vector<string>> q;
        q.push({beginWord});
        while(!q.empty()){
            int n=q.size();
            bool finded=false;
            unordered_set<string> used;
            //把该轮拓展用到的词记录下来 从dict中删去 
            //后面再次经历这个词的路径必然不是最短路径
            for(int i=0;i<n;i++){
                auto cur=q.front();
                q.pop();
                string last=cur.back();
                //上轮拓展已经出现最短路径 不需要继续拓展了直接跳出
                if(last==endWord){
                    finded=true;
                    res.push_back(cur);
                }
                //修改当前路径的最后一个词 构造新路径
                for(int i=0;i<lenw;i++){
                    char origin=last[i];
                    for(char c='a';c<='z';c++){
                        if(origin==c) continue;
                        last[i]=c;
                        if(dict.find(last)!=dict.end()){
                            cur.push_back(last);
                            q.push(cur);
                            cur.pop_back();
                            used.insert(last);
                        }
                    }
                    last[i]=origin;
                }
            }
            //删去本轮拓展已经到达的词
            for(auto &word:used){
                dict.erase(word);
            }
            if(finded){
                break;
            }
        }
        return res;
    }
};
