113. Path Sum II
/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
*/

Solution 1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void travel(TreeNode *root,vector<int>temp,int sum,int target,vector<vector<int>>&res){
        if(root==NULL)
            return;
        temp.push_back(root->val);
        if(!root->left&&!root->right){
            if(sum+root->val==target)
                res.push_back(temp);
            return;
        }
        if(root->left)
            travel(root->left,temp,sum+root->val,target,res);
        if(root->right)
            travel(root->right,temp,sum+root->val,target,res);
    }
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
       if(root==NULL)
           return {};
        vector<vector<int>> res;
        vector<int> temp;
        travel(root,temp,0,sum,res);
        return res;
    }
};


Solution 2：
记录path的数组利用引用变量
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        vector<int> path;
        travel(res, root, path, 0, sum);
        return res;
    }
private:
    // 这里要注意 path用的是引用 所以要记得pop 否则就会记录所有经过的node
    // path也可以不用引用 这样不需要额外的处理 但是要多次对数组进行赋值操作
    void travel(vector<vector<int>> &res, TreeNode *root, vector<int> &path ,int curSum, int target){
        if(root==NULL)
            return;
        curSum+=root->val;
        path.push_back(root->val);
        // 叶节点
        if(!root->left && !root->right){
            if(curSum==target){
                res.push_back(path);   
            }
            return;
        }
        if(root->left){
            travel(res, root->left, path, curSum,target);
            path.pop_back(); // 避免引用带来的问题
        }
        if(root->right){
            travel(res, root->right, path, curSum, target);
            path.pop_back();
        }
    }
};

update: 直接在sum上做减法操作,当sum==0时,路径和为目标值
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        vector<int> cand;
        helper(res,cand,root,sum);
        return res;
    }
private:
    void helper(vector<vector<int>> &res,vector<int>&path,TreeNode *root,int sum){
        if(root==nullptr){
            return;
        }
        sum-=root->val;
        path.push_back(root->val);
        if(!root->left&&!root->right){
            if(sum==0){
                res.push_back(path);
            }
            return;
        }
        if(root->left){
            helper(res,path,root->left,sum);
            path.pop_back();
        }
        if(root->right){
            helper(res,path,root->right,sum);
            path.pop_back();
        }
    }
};
