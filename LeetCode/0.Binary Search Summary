一种通用的二分搜索模板 可以解决各类利用二分搜索求解的题 而不需要改变模板
不像别的可能循环条件有时是start<end 有时是start<=end 循环体里的操作有时候是mid有时是mid+ -1

<template>

int start=0,end=nums.size()-1,mid;

// start+1<end保证了至少有3个元素 跳出循环时start==end或者start+1==end即相交或相邻
while(start+1 < end){
  mid=start+(end-start)/2;
  do something about mid...
  //更新start和end时 只与mid操作
  if(condition){
    start=mid;
  }
  if(condition){
    end=mid;
  }
}

//跳出循环时 根据题目要求 对nums[start] nums[end]做一些判断、处理

do something about start and end

return res

</template>

eg.一个实例  返回第一个>=target的数的index

int find(int target,vector<int>&nums>{
  int start=0,end=nums.size()-1,mid;
  while(start+1<end){
    mid=start+(end-start)/2;
    if(nums[mid]>=target){
      end=mid;
    }else{
      start=mid;
    }
  }
  //处理start end
  if(nums[start]>=target){
    return start;
  }
  if(nums[end]>=target){
    return end;
  }
  return -1;
}


方法二：跳出循环的条件是 low<=high
判断返回low or high:
  1.找到第一个[condition] 返回low
  2.找到最后一个[condition] 返回high
  
按照条件condition分类:
  1.找到>=target  
  if(mid>=target)...else...
  2.找到<=target
  if(mid<=target)...else...
  3.找到>target
  if(mid>target)...else...
  3.找到<target
  if(mid<target)...else...
  总结:也就是在binary search的循环体中的判定条件和我们要寻找的目标条件是一致的
  
Example 1:
查找第一个等于或者大于key的元素
static int findFirstEqualLarger(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;

    // 这里必须是 <=
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] >= key) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }
    return left;
}

Explain:
返回第一个所以返回left  要求>=key  所以在循环体中 判定条件>=

Example 2:
查找最后一个小于key的元素
// 查找最后一个小于key的元素
static int findLastSmaller(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;

    // 这里必须是 <=
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] >= key) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }
    return right;
}
Explain:
返回最后一个所以返回right  要求<key  所以在循环体中 判定条件<
