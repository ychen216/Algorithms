387. First Unique Character in a String

/*
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.

*/

Solution 1:
class Solution {
public:
    int firstUniqChar(string s) {
        int hash[26]={0};
        for(int i=0;s[i]!='\0';i++){
            hash[s[i]-'a']++;
        }
        for(int i=0;s[i]!='\0';i++)
            if(hash[s[i]-'a']==1)
                return i;
        return -1;
        
    }
};


Solution 2:
class Solution {
public:
    // 如果字符串很长 那么不希望两次扫描
    // 记录下每个字符出现的次数及首次出现的位置 那么第二次只需要扫描26个字符即可
    int firstUniqChar(string s) {
        vector<int> cnt(26,0);//字符出现的次数及首次出现的下标
        vector<int> index(26,-1);
        for(int i=0;i<s.length();i++){
            cnt[s[i]-'a']++;
            if(cnt[s[i]-'a']==1)
                index[s[i]-'a']=i;
        }
        int minIndex=INT_MAX;
        for(int i=0;i<26;i++)
            if(cnt[i]==1)
                minIndex=min(minIndex,index[i]);
        return minIndex==INT_MAX?-1:minIndex;
    }
};


update:
class Solution {
public:
    // 时间O(n) 空间O(1)
    // 利用一个数组实现计数和存储index的功能 
    // 我们只关心这个字符是否只出现一次 而不关心他到底出现了几次 所以只需判断其是否unique这样可以省去一个cnt数组
    int firstUniqChar(string s) {
        int n=s.length();
        if(n==0){
            return -1;
        }
        //记录不同字符第一次出现的位置 初始化为-1表示还未出现过 多次出现则标记为n
        vector<int> index(26,-1);
        for(int i=0;i<n;i++){
            //第一次出现
            if(index[s[i]-'a']==-1){
                index[s[i]-'a']=i;
            }
            else{
                //出现重复的
                index[s[i]-'a']=n;
            }
        }
        int res=n;
        //寻找最早出现的unique字符 出现且只出现一次的字符
        for(int i=0;i<26;i++){
            if(index[i]!=-1&&index[i]!=n){
                res=min(res,index[i]);
            }
        }
        return res==n?-1:res;
    }
};
