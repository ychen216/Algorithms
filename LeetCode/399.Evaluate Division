399. Evaluate Division

/*
Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number 
(floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].
The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , 
where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:
equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.
*/

Solution:
class Solution {
public:
    /*
        构造图来解决
        Image a/b = k as a link between node a and b, the weight from a to b is k, the reverse link is 1/k. 
        Query is to find a path between two nodes. eg.a/c = a/b * b/c 相当于a->b b->c 将边的权重乘起来
        构造好图以后 我们可以利用dfs或bfs搜索 a->c之间是否存在路径或是利用 Floyd算法直接计算出所有节点两两之间的距离
        图可以利用邻接链表表示 利用map实现 这里将点string映射成数字顶点利用vector实现理解链表
    */
    double bfs(vector<vector<pair<int,double>>>&graph,int s,int e){
        int pnum=graph.size();
        vector<bool> visit(pnum,0);
        queue<int> q;
        vector<double> dis(pnum,1);//s点到key点的值
        q.push(s);
        visit[s]=1;
        while(!q.empty()){
            int p1=q.front();
            q.pop();
            for(int i=0;i<graph[p1].size();i++){
                int p2=graph[p1][i].first;
                double d=graph[p1][i].second;
                if(!visit[p2]){
                    visit[p2]=1;
                    dis[p2]=dis[p1]*d;
                    if(p2==e)
                        return dis[p2];
                    q.push(p2);
                }
            }
        }
        return -1.0;
    }
    
    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {
        map<string,int> dmap;//节点分配map
        vector<vector<pair<int,double>>> linkGraph;//邻接链表
        int n=values.size();
        //分配节点并构造图
        for(int i=0;i<n;i++){
            string a=equations[i].first;
            string b=equations[i].second;
            if(dmap.count(a)==0){
                dmap[a]=linkGraph.size();
                linkGraph.push_back(vector<pair<int,double>>());
            }
            if(dmap.count(b)==0){
                dmap[b]=linkGraph.size();
                linkGraph.push_back(vector<pair<int,double>>());
            }
            int pa=dmap[a],pb=dmap[b];
            linkGraph[pa].push_back(make_pair(pb,values[i]));
            linkGraph[pb].push_back(make_pair(pa,1.0/values[i]));
        }
        
        vector<double> res;
        int qn=queries.size();
        for(auto &q:queries){
            string a=q.first;
            string b=q.second;
            if(dmap.count(a)==0||dmap.count(b)==0)
                res.push_back(-1.0);
            else{
                int pa=dmap[a],pb=dmap[b];
                if(pa==pb)
                    res.push_back(1.0);
                else
                    res.push_back(bfs(linkGraph,pa,pb));
            }
        }
        return res;
    }
};

Solution 2:Floyd
class Solution {
public:
    /*
        构造图来解决
        Image a/b = k as a link between node a and b, the weight from a to b is k, the reverse link is 1/k. 
        Query is to find a path between two nodes. eg.a/c = a/b * b/c 相当于a->b b->c 将边的权重乘起来
        构造好图以后 我们可以利用dfs或bfs搜索 a->c之间是否存在路径或是利用 Floyd算法直接计算出所有节点两两之间的距离
        图可以利用邻接链表表示 利用map实现
    */
    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {
        unordered_map<string,unordered_map<string,double>> graph;// (a,b,weight)
        //  构造图
        for(int i=0;i<values.size();i++){
            graph[equations[i].first][equations[i].second]=values[i]; // 正向边
            graph[equations[i].second][equations[i].first]=1/values[i]; // 反向边
        }
        for(auto &p:graph){
            graph[p.first][p.first]=1.0; // a/a=1
        }
        // Floyd
        for(auto &b: graph){
            for(auto &a:graph){
                for(auto &c:graph){
                    // 找a c之间 是否存在路劲a--b--c
                    if(graph[a.first].find(b.first)!=graph[a.first].end()&&
                      graph[b.first].find(c.first)!=graph[b.first].end())
                        graph[a.first][c.first]=graph[a.first][b.first]*graph[b.first][c.first];
                }
            }
        }
        vector<double> res;
        for(auto &q:queries){
            // 算式中含有没出现过得节点 或 不存在路径
            if(graph.find(q.first)==graph.end()||graph.find(q.second)==graph.end()||
               graph[q.first].find(q.second)==graph[q.first].end())
                res.push_back(-1.0);
            else
                res.push_back(graph[q.first][q.second]);
        }
        return res;
    }
};

Solution 3:bfs
class Solution {
public:
    /*
        构造图来解决
        Image a/b = k as a link between node a and b, the weight from a to b is k, the reverse link is 1/k. 
        Query is to find a path between two nodes. eg.a/c = a/b * b/c 相当于a->b b->c 将边的权重乘起来
        构造好图以后 我们可以利用dfs或bfs搜索 a->c之间是否存在路径或是利用 Floyd算法直接计算出所有节点两两之间的距离
        图可以利用邻接链表表示 利用map实现
    */
    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {
        unordered_map<string,unordered_map<string,double>> graph;// (a,b,weight)
        //  构造图
        for(int i=0;i<values.size();i++){
            graph[equations[i].first][equations[i].second]=values[i]; // 正向边
            graph[equations[i].second][equations[i].first]=1.0/values[i]; // 反向边
        }
        /* 利用bfs和dfs时不需要该步
        for(auto &p:graph){
            graph[p.first][p.first]=1.0; // a/a=1
        }
        */
        vector<double> res;
        for(auto &q:queries){
            // 算式中含有没出现过得节点
            if(graph.find(q.first)==graph.end()||graph.find(q.second)==graph.end())
                res.push_back(-1.0);
            // 这个条件要放在第二个 因为如果没有出现过x 则 x/x=-1.0
            else if(q.first==q.second)
                res.push_back(1.0);
            else
                res.push_back(bfs(graph,q.first,q.second));
        }
        return res;
    }
private:
    double bfs(unordered_map<string,unordered_map<string,double>> &graph,string &s,string &e){
        unordered_set<string> visit; // 记录访问过的节点 避免重复搜索
        unordered_map<string, double> dis; // (p,dis)记录s->p的距离
        queue<string> q;
        q.push(s);
        visit.insert(s);
        dis[s]=1.0;
        while(!q.empty()){
            const string &p1=q.front();
            q.pop();
            // 所有可能到达的节点
            for(auto &p2:graph[p1]){
                // 未访问过
                if(visit.find(p2.first)==visit.end()){
                    visit.insert(p2.first);
                    dis[p2.first]=dis[p1]*graph[p1][p2.first];
                    if(p2.first==e)
                        return dis[e];
                    q.push(p2.first);
                }
            }
        }
        return -1.0;
    }
};

Solution 4:dfs:
class Solution {
public:
    /*
        构造图来解决
        Image a/b = k as a link between node a and b, the weight from a to b is k, the reverse link is 1/k. 
        Query is to find a path between two nodes. eg.a/c = a/b * b/c 相当于a->b b->c 将边的权重乘起来
        构造好图以后 我们可以利用dfs或bfs搜索 a->c之间是否存在路径或是利用 Floyd算法直接计算出所有节点两两之间的距离
        图可以利用邻接链表表示 利用map实现
    */
    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {
        unordered_map<string,unordered_map<string,double>> graph;// (a,b,weight)
        //  构造图
        for(int i=0;i<values.size();i++){
            graph[equations[i].first][equations[i].second]=values[i]; // 正向边
            graph[equations[i].second][equations[i].first]=1.0/values[i]; // 反向边
        }
        /* 利用bfs和dfs时不需要该步
        for(auto &p:graph){
            graph[p.first][p.first]=1.0; // a/a=1
        }
        */
        vector<double> res;
        unordered_set<string> visit;
        for(auto &q:queries){
            // 算式中含有没出现过得节点
            if(graph.find(q.first)==graph.end()||graph.find(q.second)==graph.end())
                res.push_back(-1.0);
            // 这个条件要放在第二个 因为如果没有出现过x 则 x/x=-1.0
            else if(q.first==q.second)
                res.push_back(1.0);
            else{
                visit.clear();
                res.push_back(dfs(graph,visit,q.first,q.second,1.0));   
            }
        }
        return res;
    }
private:
    // res为起始点到当前点的结果
    double dfs(unordered_map<string,unordered_map<string,double>> &graph,unordered_set<string> &visit,const string &cur,const string &e,double res){
        if(visit.find(cur)!=visit.end())
            return -1.0;
        visit.insert(cur);
        if(cur==e)
            return res;
        // 往下继续搜索
        for(auto &p:graph[cur]){
            if(visit.find(p.first)==visit.end()){
                double r=dfs(graph,visit,p.first,e,res*p.second);
                if(r!=-1.0)
                    return r;
            }
        }
        return -1.0;
    }
};
