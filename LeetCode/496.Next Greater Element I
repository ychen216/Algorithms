496. Next Greater Element I

/*
You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. 
Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. 
If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
Note:
  All elements in nums1 and nums2 are unique.
  The length of both nums1 and nums2 would not exceed 1000.
*/

Solution 1:
class Solution {
public:
    map<int,int> posMap;
    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {
        posMap.clear();
        vector<int> res;
        int sizeNum=nums.size();
        for(int i=0;i<sizeNum;i++)
            posMap[nums[i]]=i;
        int sizeFind=findNums.size();
        for(int i=0;i<sizeFind;i++){
            int ele=findNums[i];
            int index=posMap[ele];
            bool flag=true;
            for(int j=index+1;j<sizeNum;j++)
                if(nums[j]>ele){
                    flag=false;
                    res.push_back(nums[j]);
                    break;
                }
            if(flag)
                res.push_back(-1);
        }
        return res;
    }
};

Solution 2:Stack O(n)
class Solution {
public:
    /*
    Suppose we have a decreasing sequence followed by a greater number
    For example [5, 4, 3, 2, 1, 6] then the greater number 6 is the next greater element for all previous numbers in the sequence

    We use a stack to keep a decreasing sub-sequence, whenever we see a number x greater than stack.peek() we pop all elements less than x and for all the popped ones, their next greater element is x
    For example [9, 8, 7, 3, 2, 1, 6]
    The stack will first contain [9, 8, 7, 3, 2, 1] and then we see 6 which is greater than 1 so we pop 1 2 3 whose next greater element should be 6
    
    */
    map<int,int> posMap;
    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {
        posMap.clear();
        stack<int> st;
        vector<int> res;
        int sizeNum=nums.size();
        for(int i=0;i<sizeNum;i++){
            int ele = nums[i];
            while(st.size()&&st.top()<ele){
                posMap[st.top()]=ele;
                st.pop();
            }
            st.push(ele);
        }
        int sizeFind=findNums.size();
        for(int i=0;i<sizeFind;i++){
            int x=findNums[i];
            res.push_back(posMap.count(x)?posMap[x]:-1);
        }
        return res;
    }
};

update:
class Solution {
public:
    //题目要求找每个数字右侧第一个>该数的元素
    //像这样找左边、右边第一个满足...条件的数 要想到利用栈结构
    //在这题里 栈维护一个非递增(递增)序列
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mmp;
        stack<int> st;
        for(auto &num:nums2){
            while(!st.empty()&&st.top()<num){
                mmp[st.top()]=num;
                st.pop();
            }
            st.push(num);
        }
        vector<int> res;
        for(auto&num:nums1){
            if(mmp.find(num)==mmp.end()){
                res.push_back(-1);
            }
            else{
                res.push_back(mmp[num]);
            }
        }
        return res;
    }
};

update:
class Solution {
public:
    //利用栈找到nums2中每一个数字右侧第一个大于该元素的数字
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> idx;
        int n=nums1.size();
        //记录nums1数字的位置
        for(int i=0;i<n;i++){
            idx[nums1[i]]=i;
        }
        vector<int> res(n,-1);
        stack<int> st;
        //找到nums2中每一个元素右侧第一个大于该元素的数字 同时如果出现在nums1中就更新到res对应位置
        for(int i=0;i<nums2.size();i++){
            while(!st.empty()&&nums2[st.top()]<nums2[i]){
                if(idx.find(nums2[st.top()])!=idx.end()){
                    res[idx[nums2[st.top()]]]=nums2[i];
                }
                st.pop();
            }
            st.push(i);
        }
        return res;
    }
};
