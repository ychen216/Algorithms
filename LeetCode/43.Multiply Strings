43. Multiply Strings
/*
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

Note:
  The length of both num1 and num2 is < 110.
  Both num1 and num2 contains only digits 0-9.
  Both num1 and num2 does not contain any leading zero.
  You must not use any built-in BigInteger library or convert the inputs to integer directly.

*/
Solution :
class Solution {
public:
// 长度为m,n的两个数的乘积最长为 m+n
    string multiply(string num1, string num2) {
        string res(num1.size()+num2.size(),'0');
        for(int i=num1.size()-1;i>=0;i--){
            int carry=0;
            for(int j=num2.size()-1;j>=0;j--){
                int temp=(res[i+j+1]-'0')+(num1[i]-'0')*(num2[j]-'0')+carry;
                res[i+j+1]=temp%10+'0';
                carry=temp/10;
            }
            res[i]+=carry;
        }
        
        size_t startpos=res.find_first_not_of("0");
        if(string::npos!=startpos)
            return res.substr(startpos);
        return "0";
    }
};

update: 可以将carry步合并
class Solution {
public:
    string multiply(string num1, string num2) {
        int m=num1.length(),n=num2.length();
        string res(m+n,'0');
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                int sum=(num1[i]-'0')*(num2[j]-'0')+res[i+j+1]-'0';
                res[i+j+1]=sum%10+'0';
                res[i+j]+=sum/10;
            }
        }
        int pos=res.find_first_not_of('0');
        if(pos==string::npos)
            return "0";
        return res.substr(pos);
    }
};
