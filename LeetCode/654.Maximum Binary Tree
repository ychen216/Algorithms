654. Maximum Binary Tree

/*
Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:

The root is the maximum number in the array.
The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.
The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.
Construct the maximum tree by the given array and output the root node of this tree.

Example 1:
Input: [3,2,1,6,0,5]
Output: return the tree root node representing the following tree:

      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1
Note:
The size of the given array will be in the range [1,1000].
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *build(vector<int>&nums,int s,int e){
        if(s>e)
            return NULL;
        if(s==e)//只有一个元素
            return new TreeNode(nums[s]);
        int maxValue=INT_MIN;
        int rootid=-1;
        for(int i=s;i<=e;i++)
            if(nums[i]>maxValue){
                maxValue=nums[i];
                rootid=i;
            }
        TreeNode *root=new TreeNode(nums[rootid]);
        root->left=build(nums,s,rootid-1);
        root->right=build(nums,rootid+1,e);
        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int size=nums.size();
        if(size==0)
            return NULL;
        return build(nums,0,size-1);
    }
};


改写
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        
        return builder(nums,0,nums.size()-1);
    }
private:
    TreeNode *builder(vector<int>&nums,int s,int e){
        if(s>e)
            return NULL;
        int minIndex=s,minVal=nums[s];
        for(int i=s+1;i<=e;i++){
            if(nums[i]>minVal){
                minVal=nums[i];
                minIndex=i;
            }
        }
        TreeNode *root=new TreeNode(minVal);
        root->left=builder(nums,s,minIndex-1);
        root->right=builder(nums,minIndex+1,e);
        return root;
    }
};

Solution 2：
class Solution {
public:
    /*
        使用到了一个辅助数组v 或者是栈来让其保持降序
        \遍历数组，对于每个遍历到的数字，创建一个结点
        然后进行循环，如果数组v不空，且末尾结点值小于当前数字，那么将末尾结点连到当前结点的左子结点，并且移除数组中的末尾结点
        这样可以保证子结点都会小于父结点
        循环结束后，如果此时数组v仍不为空，说明结点值很大，那么将当前结点连到数组末尾结点的右子结点上。
        之后别忘了将当前结点加入数组v中，最后返回数组v的首结点即可
    */
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        vector<TreeNode*> stk;
        for (int i = 0; i < nums.size(); ++i)
        {
            TreeNode* cur = new TreeNode(nums[i]);
            while (!stk.empty() && stk.back()->val < nums[i])
            {
                cur->left = stk.back();
                stk.pop_back();
            }
            if (!stk.empty())
                stk.back()->right = cur;
            stk.push_back(cur);
        }
        return stk.front();
    }
};
