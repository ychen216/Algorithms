560. Subarray Sum Equals K
/*
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
*/

Solution:
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int size=nums.size();
        if(size==0)
            return 0;
        vector<int> sum(size,0);
        sum[0]=nums[0];
        for(int i=1;i<size;i++)
            sum[i]=sum[i-1]+nums[i];
        int cnt=0;
        for(int i=0;i<size;i++){
            if(sum[i]==k)
                cnt++;
            for(int j=0;j<i;j++)
                if(sum[i]-sum[j]==k)
                    cnt++;
        }
        return cnt;
    }
};

Solution 2:改进1
class Solution {
public:
    //利用map记录key为sum的子集出现的次数
    int subarraySum(vector<int>& nums, int k) {
        int size=nums.size();
        if(size==0)
            return 0;
        map<int,int> mmap;//(sum,times)
        mmap[0]=1;//初始化 必须
        int cnt=0,sum=0;
        for(int i=0;i<size;i++){
            sum+=nums[i];
            if(mmap.count(sum-k))
                cnt+=mmap[sum-k];
            if(mmap.count(sum))
                mmap[sum]++;
            else
                mmap[sum]=1;
        }
        return cnt;
    }
};
