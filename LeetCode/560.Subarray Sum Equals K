560. Subarray Sum Equals K
/*
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
*/

Solution:
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int size=nums.size();
        if(size==0)
            return 0;
        vector<int> sum(size,0);
        sum[0]=nums[0];
        for(int i=1;i<size;i++)
            sum[i]=sum[i-1]+nums[i];
        int cnt=0;
        for(int i=0;i<size;i++){
            if(sum[i]==k)
                cnt++;
            for(int j=0;j<i;j++)
                if(sum[i]-sum[j]==k)
                    cnt++;
        }
        return cnt;
    }
};

Solution 2:改进1
class Solution {
public:
    /*
        记录0~i元素的和sum[i] 
        if sum[j]-sum[i]==K 那么i-1~j构成的子数组的和为k
        那么对于sum[j]来说之前有x个i 使得sum[i]=sum[j]-K 就能构成x个子数组
        可以利用map记录sum的个数 初始化mmp[0]=1 这样才能使得0~j的和为K时能够被成功记录
    */
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        if(n==0)
            return 0;
        vector<int> sum(n,0);
        sum[0]=nums[0];
        for(int i=1;i<n;i++)
            sum[i]=sum[i-1]+nums[i];
        int res=0;
        unordered_map<int,int> mmp; // sum,occur_num
        mmp[0]=1;
        for(int j=0;j<n;j++){
            if(mmp.find(sum[j]-k)!=mmp.end())
                res+=mmp[sum[j]-k];
            mmp[sum[j]]++;
        }
        return res;
    }
};
