476. Number Complement

/*
Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Note:
  The given integer is guaranteed to fit within the range of a 32-bit signed integer.
  You could assume no leading zero bit in the integer’s binary representation.
Example 1:
Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.

Example 2:
Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.

*/

Solution 1:
//逐步模拟
class Solution {
public:
    int findComplement(int num) {
        int res=0;
        int flag=1;
        //题目确保正数 且这里求补要求忽略前导0 所以在不断右移得到0后即可跳出
        // 00101-> 00010 -> 00001 -> 00000跳出
        while(num!=0){
            //如果该位为0则补数该位为1
            if((num&1)==0){
                res|=flag;
            }
            flag<<=1;
            num>>=1;
        }
        return res;
    }
};


Solution 2:
class Solution {
public:
    // 找到正整数最高位的1 从该位开始取反
    // 每一位与1做异或操作就能取反 0->1 1->0
    // 故可以找到一个跟最高位1(eg.101)到尾部长度相同的掩码mask(111) 然后做异或操作
    int findComplement(int num) {
        int mask=1,temp=num;
        while(temp){
            temp>>=1;
            mask<<=1;
        }
        return num^(mask-1);
    }
};

Solution 3:
class Solution {
public:
    // 找到正整数最高位的1 从该位开始取反
    // 每一位与1做异或操作就能取反 0->1 1->0
    // 故可以找到一个跟最高位1(eg.101)到尾部长度相同的掩码mask(111) 然后做异或操作
    int findComplement(int num) {
        unsigned int mask = ~0;
        while(num & mask) mask<<=1;
        return ~num & ~mask;
    }
    /*
        num          = 00000101
        mask         = 11111000
        ~mask & ~num = 00000010
    */
};
