686. Repeated String Match

/*
Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, 
return -1.

For example, with A = "abcd" and B = "cdabcdab".
Return 3, because by repeating A three times (“abcdabcdabcd”), B is a substring of it; and B is not a substring of A repeated two times
("abcdabcd").

Note:
The length of A and B will be between 1 and 10000.
*/

Solution:
class Solution {
public:
    //B是A的子串 那么A要不断增加到A的长度不小于B的长度
    //为了解决 A=abc B=cab的情况 A需要在长度相等的基础上 在迭代一次
    int repeatedStringMatch(string A, string B) {
        string x=A;
        int cnt=1;
        while(x.length()<B.length()){
            x=x+A;
            cnt++;
        }
        if(x.find(B)!=-1)
            return cnt;
        else{
            x=x+A;
            cnt++;
            if(x.find(B)!=-1)
                return cnt;
            return -1;
        }
    }
};
