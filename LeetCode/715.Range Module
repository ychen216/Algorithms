715. Range Module
/*
A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.

addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.
queryRange(int left, int right) Returns true if and only if every real number in the interval [left, right) is currently being tracked.
removeRange(int left, int right) Stops tracking every real number currently being tracked in the interval [left, right).
Example 1:
addRange(10, 20): null
removeRange(14, 16): null
queryRange(10, 14): true (Every number in [10, 14) is being tracked)
queryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
queryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)

Note:
  A half open interval [left, right) denotes all real numbers left <= x < right.
  0 < left < right < 10^9 in all calls to addRange, queryRange, removeRange.
  The total number of calls to addRange in a single test case is at most 1000.
  The total number of calls to queryRange in a single test case is at most 5000.
  The total number of calls to removeRange in a single test case is at most 1000.
*/

Solution:
class RangeModule {
public:
    /*
        这里保证了插入和删除的区间都是合法的
        利用vector存储区间 同时vector中各区间按顺序的值 顺序排列
        插入时 有四种情况
        已有区间              -----------
        待插入的区间   ---   ---       ----  ---
        
        删除时 有三种情况
        已有区间              -------------
        待删除的区间        ---   ---    ----  
        
        查找采用二分查找
    */
    RangeModule() {
        
    }
    
    void addRange(int left, int right) {
        int n=interval.size();
        vector<pair<int,int>> temp;
        for(int i=0;i<=n;i++){
            //对应第一种情况
            if(i==n||interval[i].first>right){
                temp.push_back({left,right});
                while(i<n)temp.push_back(interval[i++]);
            }else if(interval[i].second<left){//第四种情况
                temp.push_back(interval[i]);
            }else{
                // 2 3种情况 更新要插入的区间
                left=min(left,interval[i].first);
                right=max(right,interval[i].second);
            }
        }
        swap(interval,temp);
    }
    
    bool queryRange(int left, int right) {
        int l=0,r=interval.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(interval[mid].first>=right)
                r=mid-1;
            else if(interval[mid].second<=left)
                l=mid+1;
            else
                return interval[mid].first<=left&&interval[mid].second>=right;
        }
        return false;
    }
    
    void removeRange(int left, int right) {
        int n=interval.size();
        vector<pair<int,int>> temp;
        for(int i=0;i<n;i++){
            if(interval[i].first>=right||interval[i].second<=left)
                temp.push_back(interval[i]);
            else{
                //删除的三种情况
                if(interval[i].first<left) temp.push_back({interval[i].first,left});
                if(right<interval[i].second) temp.push_back({right,interval[i].second});
            }
        }
        swap(interval,temp);
    }
private:
    vector<pair<int,int>> interval;
};

/**
 * Your RangeModule object will be instantiated and called as such:
 * RangeModule obj = new RangeModule();
 * obj.addRange(left,right);
 * bool param_2 = obj.queryRange(left,right);
 * obj.removeRange(left,right);
 */
