88. Merge Sorted Array

/*
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. 
The number of elements initialized in nums1 and nums2 are m and n respectively.

*/

Solution 1:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=0;
        while(i<n)
            nums1[i+m]=nums2[i++];
        sort(nums1.begin(),nums1.begin()+m+n);
    }
};

Solution 2:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int p=m+n-1,p1=m-1,p2=n-1;
        while(p1>=0&&p2>=0){
            if(nums1[p1]>=nums2[p2])
                nums1[p--]=nums1[p1--];
            else
                nums1[p--]=nums2[p2--];
        }
        while(p2>=0)
            nums1[p--]=nums2[p2--];
    }
};
改写
class Solution {
public:
    // 从大到小合并 防止数值的覆盖问题
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int last=m+n-1;// 从大到小 当前可以存放元素的位置
        int index1=m-1,index2=n-1;// nums1和nums2当前需要进行比较的数字下标
        while(index1>=0||index2>=0){// or while(last>=0)
            if(index2<0||index1>=0&&nums1[index1]>=nums2[index2])
                nums1[last--]=nums1[index1--];
            else
                nums1[last--]=nums2[index2--];
        }
    }
};
