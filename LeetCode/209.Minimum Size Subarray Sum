209. Minimum Size Subarray Sum

/*
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. 
If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.
*/
Solution:
class Solution {
public:
    //计算以nums[i]为区间终点满足条件的最小区间长度
    int minSubArrayLen(int s, vector<int>& nums) {
        int size=nums.size();
        int minLen=INT_MAX;
        int sum=0,left=0;
        for(int right=0;right<size;right++){
            sum+=nums[right];
            while(sum>=s){
                minLen=min(minLen,right-left+1);
                sum-=nums[left++];
            }
        }
        return minLen==INT_MAX?0:minLen;
    }
};
