405. Convert a Number to Hexadecimal

/*
Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.

Note:
  All letters in hexadecimal (a-f) must be in lowercase.
  The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
  The given number is guaranteed to fit within the range of a 32-bit signed integer.
  You must not use any method provided by the library which converts/formats the number to hex directly.
  
Example 1:
Input:
26
Output:
"1a"

Example 2:
Input:
-1
Output:
"ffffffff"

*/

Solution:
class Solution {
public:
    // 一个十六进制位对应4个二进制位
    // 每次将最后的四个二进制位转换成16进制位
    // 要注意处理0 和 负数 负数右移左边添加1 会导致死循环 需要cnt来控制最多右移的次数
    string toHex(int num) {
        if(num==0)
            return "0";
        int count=0;//32位2进制数 每4位转16进制 最多转换8次 避免负数右移导致出现全1 死循环
        string res="";
        while(num&&count<8){
            res=HEX[num&0xf]+res;
            num>>=4;
            count++;
        }
        return res;
    }
private:
    const string HEX="0123456789abcdef";
};

update:
class Solution {
public:
    string toHex(int num) {
        string dict="0123456789abcdef";
        string res;
        int flag=0xf;
        //每四位2进制对应一位16进制
        for(int i=0;i<8;i++){
            res=dict[num&flag]+res;
            num>>=4;
        }
        //去除前导零
        auto pos=res.find_first_not_of('0');
        if(pos==string::npos){
            return "0";
        }
        return res.substr(pos);
    }
};
