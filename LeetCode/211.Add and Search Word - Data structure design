211. Add and Search Word - Data structure design
/*
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:
  addWord("bad")
  addWord("dad")
  addWord("mad")
  search("pad") -> false
  search("bad") -> true
  search(".ad") -> true
  search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.
*/
Solution:
struct TrieNode{
    TrieNode *next[26];
    bool is_word;
    TrieNode(){
        is_word=false;
        for(int i=0;i<26;i++)
            next[i]=NULL;
    }
};
class WordDictionary {
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        root=new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        TrieNode *p=root;
        for(auto &c:word){
            if(p->next[c-'a']==NULL)
                p->next[c-'a']=new TrieNode();
            p=p->next[c-'a'];
        }
        p->is_word=true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return helper(word,0,root);
    }
    bool helper(string &word,int pos,TrieNode *node){
        if(pos==word.length())
            return node->is_word;
        if(word[pos]!='.')
            return node->next[word[pos]-'a']!=NULL&&helper(word,pos+1,node->next[word[pos]-'a']);
        else{
            for(int i=0;i<26;i++){
                if(node->next[i]!=NULL){
                    if(helper(word,pos+1,node->next[i]))
                        return true;
                }
            }
            return false;
        }
    }
private:
    TrieNode *root;
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * bool param_2 = obj.search(word);
 */
