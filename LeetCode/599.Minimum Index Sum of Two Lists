599. Minimum Index Sum of Two Lists

/*
Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
Note:
  The length of both lists will be in the range of [1, 1000].
  The length of strings in both lists will be in the range of [1, 30].
  The index is starting from 0 to the list length minus 1.
  No duplicates in both lists.
*/

Solution:
class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        int size1=list1.size(),size2=list2.size();
        map<string,int> m;
        for(int i=0;i<size1;i++)
            m[list1[i]]=i;
        int minIndexSum=size1+size2;
        vector<string> res;
        for(int i=0;i<size2;i++){
            if(m.count(list2[i])){
                int temp=i+m[list2[i]];
                if(temp<minIndexSum){
                    minIndexSum=temp;
                    res.clear();
                    res.push_back(list2[i]);
                }
                else if(temp==minIndexSum)
                    res.push_back(list2[i]);
            }
        }
        return res;
    }
};
改写：
class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        unordered_map<string,int> mmp;// list1中restaurant和index的映射
        for(int i=0;i<list1.size();i++)
            mmp[list1[i]]=i;
        int indexSum=INT_MAX;
        vector<string> res;
        for(int i=0;i<list2.size();i++){
            if(mmp.find(list2[i])!=mmp.end()){
                if(indexSum>i+mmp[list2[i]]){
                    indexSum=i+mmp[list2[i]];
                    res.clear();
                    res.push_back(list2[i]);
                }
                else if(indexSum==i+mmp[list2[i]])
                    res.push_back(list2[i]);
            }
        }
        return res;
    }
};
