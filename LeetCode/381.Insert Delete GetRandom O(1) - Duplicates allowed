381. Insert Delete GetRandom O(1) - Duplicates allowed

/*
Design a data structure that supports all following operations in average O(1) time.

Note: Duplicate elements are allowed.
insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.
Example:

// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();

// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);

// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);

// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);

// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();

// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);

// getRandom should return 1 and 2 both equally likely.
collection.getRandom();

*/

Solution:
class RandomizedCollection {
public:
    /*
    There are two data member in the solution
        -a vector nums
        -an unordered_map m
    The key of m is the val, the value of m is a vector contains indices where the val appears in nums.
    Each element of nums is a pair, the first element of the pair is val itself, the second element of the pair is an index into m[val].
    There is a relationship between nums and m:
        m[nums[i].first][nums[i].second] == i;
    */
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        bool res=mmap.find(val)==mmap.end();
        mmap[val].push_back(nums.size());//记录该元素在nums中的位置
        nums.push_back({val,mmap[val].size()-1});
        return res;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        bool res=mmap.find(val)!=mmap.end();
        if(res){
            //交换该元素和数组最后一个元素 然后删除最后一个元素
            auto last=nums.back();
            mmap[last.first][last.second]=mmap[val].back();
            nums[mmap[val].back()]=last;
            mmap[val].pop_back();
            if(mmap[val].empty())mmap.erase(val);
            nums.pop_back();
        }
        return res;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return nums[rand()%nums.size()].first;
    }
    
private:
    vector<pair<int,int>> nums;
    unordered_map<int,vector<int>> mmap;
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection obj = new RandomizedCollection();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */


Solution 2:
class RandomizedCollection {
public:
    /*
        利用vector保存元素
        unordered_map<int,unordered_set<int>> 保存val的位置集合
    */
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        bool res=false;
        if(val_pos.find(val)==val_pos.end()){
            val_pos[val]=unordered_set<int>();
            res=true;
        }
        val_pos[val].insert(v.size());
        v.push_back(val);
        return res;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        if(val_pos.find(val)==val_pos.end()){
            return false;
        }
        //采用将要删除的元素和vector最后一个元素替换 然后删除最后一个元素的做法
        int pos=*(val_pos[val].begin());
        val_pos[val].erase(pos); //要先删掉 不能放在if结束后 不然有错误比如在4,2,3,4中删除4
        //要删除的val不在vector的最末位
        if(pos!=v.size()-1){
            //和最后一个调换位置
            v[pos]=v.back();
            //更新v.back()的位置
            val_pos[v.back()].erase(v.size()-1);
            val_pos[v.back()].insert(pos);
        }
        v.pop_back();
        //如果val全部都删完了 要把整个val的位置set erase
        if(val_pos[val].size()==0){
            val_pos.erase(val);
        }
        return true;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return v[rand()%v.size()];
    }
private:
    vector<int> v;
    unordered_map<int,unordered_set<int>> val_pos;
};

update:
class RandomizedCollection {
public:
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        bool not_contain=true;
        if(key2index.find(val)!=key2index.end()){
            not_contain=false;
        }
        key2index[val].insert(nums.size());
        nums.push_back(val);
        return not_contain;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        //不包含val
        if(key2index.find(val)==key2index.end()){
            return false;
        }
        auto delete_it=key2index[val].begin();//随便删除一个val
        int delete_id=*delete_it;
        int last_id=nums.size()-1;
        if(delete_id == last_id){
            key2index[val].erase(delete_it);
        }
        else{
            //将要删除的和nums最后一个元素交换位置 同时更新在map中记录的位置信息
            auto last=nums.back();
            key2index[val].erase(delete_it);//删除val的位置
            key2index[last].erase(last_id);//删去最后一个元素的位置
            key2index[last].insert(delete_id);//将最后一个元素的位置更新为val的位置
            swap(nums[last_id],nums[delete_id]);
        }
        nums.pop_back();
        if(key2index[val].size()==0){
            key2index.erase(val);
        }
        return true;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return nums[rand()%nums.size()];
    }
private:
    vector<int> nums;
    unordered_map<int,unordered_set<int>> key2index;
};
