310. Minimum Height Trees
/*
For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. 
Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph,
write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges 
(each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and 
thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]

Note:

(1) According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”

(2) The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
*/

Solution:
class Solution {
public:
    /*
    最终的解题思路采用了不断删除叶子节点，逐渐逼近根节点的方法，在删除叶子节点的同时，会有一些新的节点成为叶子节点，
    于是继续循环删除，直至不能删除为止，那么剩下的节点就是高度最小的根。
    当n等于1时，需要特殊处理，直接返回{0}。
    最终会剩下1个节点或者2个节点，1个节点的情况比较好理解，如{0,1}{0,2}，同时删除了叶子节点1和2，就剩下0；
    而两个节点的情况为{0,1}，此时0和1的邻居均为1，都是叶子节点，在下一轮操作后，0和1均没有邻居，所以这两个节点都是正确的答案。
    */
    struct TreeNode{  
        set<int> list;//使用set结构方便删除邻居  
        TreeNode(){};  
        bool isLeaf(){ return list.size() == 1; };//如果是叶子节点，那么邻居大小是1  
    };  
    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {  
   
        if (n == 1) return{ 0 };//当n为1时，初始化node1为空，下面的程序执行结果会输出空  
   
        vector<TreeNode> tree(n);  
        for (auto e : edges)  
        {//使用节点来存储这棵树，耗费的空间为O(n+2e)  
            tree[e.first].list.insert(e.second);  
            tree[e.second].list.insert(e.first);  
        }  
   
        vector<int> node1(0);//记录当前的叶子节点  
        vector<int> node2(0);//记录删除node1叶子节点后，成为新的叶子节点的节点  
   
        for (int i = 0; i < tree.size();i++)  
        {//记录叶子节点  
            if (tree[i].isLeaf())  
                node1.push_back(i);  
        }  
           
        while (1)  
        {  
            for (auto leaf:node1)  
            {  
                //使用迭代器遍历邻居  
                for (set<int>::iterator ite = tree[leaf].list.begin(); ite != tree[leaf].list.end(); ite++)  
                {  
                    int neighbor = *ite;  
                    tree[neighbor].list.erase(leaf);//删除叶子节点  
                    if (tree[neighbor].isLeaf())//删除后，如果是叶子节点，则放到node2中  
                        node2.push_back(neighbor);  
                }  
            }  
            if (node2.empty())  
            {//遍历完后，如果node2为空，即node1中的节点不是叶子节点，要么是剩下一个节点，要么剩下两个相互连接的节点  
                break;  
            }  
            node1.clear();  
            swap(node1, node2);  
        }  
        
        return node1; 
    }  
};

update:
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {
        if(n==1)
            return {0};
        if(n==2)
            return {0,1};
        unordered_map<int,unordered_set<int>> graph;
        for(auto &p:edges){
            graph[p.first].insert(p.second);
            graph[p.second].insert(p.first);
        }
        // 找到叶子
        vector<vector<int>> leafs(2); // 两个数组分别存放当前叶子和新叶子
        int cur=0,next;
        for(auto &mmp:graph){
            if(graph[mmp.first].size()==1)
                leafs[cur].push_back(mmp.first);
        }
        // 不断删除叶子 得到新叶子
        while(true){
            next=1-cur;
            for(auto &leaf:leafs[cur]){
                // 删除与该叶子相连的边
                for(auto &node:graph[leaf]){
                    graph[node].erase(leaf);
                    if(graph[node].size()==1)
                        leafs[next].push_back(node);
                }
            }
            if(leafs[next].size()==0)
                break;
            leafs[cur].clear();
            cur=next;
        }
        return leafs[cur];
    }
};

Solution 2: 一样的思想 java
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> leaves = new ArrayList<>();
        if(n <= 1) {
            return Collections.singletonList(0);
        }
        Map<Integer, Set<Integer>> graph = new HashMap<>();     // list of edges to  Ajacency Lists
        
        for(int i = 0; i < n; i++) {
            graph.put(i, new HashSet<Integer>());
        }
        for(int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        
        for(int i = 0; i < n; i++) {
            if(graph.get(i).size() == 1) {
                leaves.add(i);
            }
        }
        
        while(n > 2) {
            n -= leaves.size();
            List<Integer> newLeaves = new ArrayList<>();
            for(int leaf : leaves) {
                for(int newLeaf : graph.get(leaf)) {
                    //graph.get(leaf).remove(newLeaf);
                    graph.get(newLeaf).remove(leaf);
                    if(graph.get(newLeaf).size() == 1) {
                        newLeaves.add(newLeaf);
                    }
                }
            }
            leaves = newLeaves;
        }
        
        return leaves;
    }
}
