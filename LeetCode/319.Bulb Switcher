319. Bulb Switcher
/*
There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round,
you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb.
For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.

Example:

Given n = 3. 

At first, the three bulbs are [off, off, off].
After first round, the three bulbs are [on, on, on].
After second round, the three bulbs are [on, off, on].
After third round, the three bulbs are [on, off, off]. 

So you should return 1, because there is only one bulb is on.
*/

Solution 1:TLE
class Solution {
public:
    /*
        对于每一个灯泡i来说 经过n轮 如果switch的次数：
            是奇数那么灯泡i就是on
            是偶数那么灯泡i就是off
        为了判断经过n轮灯泡i switch的次数，可以计算i的因数个数
        比如第4个灯泡 在第1轮第2轮和第四轮 3次switch 这和4的因数为1,2,4相一致
    */
    int bulbSwitch(int n) {
        int res=0;
        for(int i=1;i<=n;i++){
            int m=sqrt(i);
            int cnt=0;
            for(int j=1;j<=m;j++){
                if(i%j==0){
                    if(j!=i/j){
                        cnt++;
                    }
                    cnt++;
                }
            }
            if(cnt&1){
                res++;
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        当一个灯泡被执行偶数次switch操作时它是关着的，当被执行奇数次switch操作时它是开着的
        A bulb ends up on iff it is switched an odd number of times.
        Call them bulb 1 to bulb n. Bulb i is switched in round d if and only if d divides i. So bulb i ends up on if and only if it has an odd number of divisors.

        Divisors come in pairs, like i=12 has divisors 1 and 12, 2 and 6, and 3 and 4. Except when i is a square, like 36 has divisors 1 and 36, 2 and 18, 3 and 12, 4 and 9, and double divisor 6. So bulb i ends up on if and only if i is a square.

        So just count the square numbers：
        Let R = int(sqrt(n)). That's the root of the largest square in the range [1,n]. And 1 is the smallest root. So you have the roots from 1 to R, that's R roots. Which correspond to the R squares. So int(sqrt(n)) is the answer. (C++ does the conversion to int automatically, because of the specified return type).
    */
    int bulbSwitch(int n) {
        return sqrt(n);
    }
};
