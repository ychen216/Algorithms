264. Ugly Number II
/*
Write a program to find the n-th ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

Note that 1 is typically treated as an ugly number, and n does not exceed 1690.
*/

Solution:
class Solution {
public:
    //一个新丑数是质数和之前生成的丑数的乘积
    int nthUglyNumber(int n) {
        if(n==1)
            return 1;
        int prime[3]={2,3,5};
        int index[3]={0,0,0};//第i个质数应该和第index[k]个丑数相乘生成下一个比较小的丑数
        int ugly[n];
        ugly[0]=1;
        for(int i=1;i<n;i++){
            int candidate=INT_MAX;
            for(int j=0;j<3;j++)
                candidate=min(prime[j]*ugly[index[j]],candidate);
            ugly[i]=candidate;
            //更新index使得指向的每一个数都比当前最大的丑数大
            for(int j=0;j<3;j++){
                while(ugly[index[j]]*prime[j]<=ugly[i])index[j]++;
            }
        }
        return ugly[n-1];
    }
};

update:
class Solution {
public:
    int nthUglyNumber(int n) {
        if(n==1)
            return 1;
        vector<int> ugly(n);
        ugly[0]=1;
        int p2=0,p3=0,p5=0;//表示已有丑数的下标,2,3,5和对应的下标丑数相乘可能得到当前没出现过的最小丑数
        // eg.p2是一个下标 指向生成下一个丑数时,已有的丑数和2相乘可以得到的大于当前最大丑数的最小丑数的已有丑数下标
        // eg.已有丑数1,此时p2=p3=p5=0指向第0个丑数 代表和2,3,5相乘能得到的大于当前丑数的最小丑数下标 那么下一个丑数可能是1*2,1*3,1*5
        for(int i=1;i<n;i++){
            ugly[i]=min(ugly[p2]*2,min(ugly[p3]*3,ugly[p5]*5));
            // update pointer
            if(ugly[p2]*2==ugly[i])p2++;
            if(ugly[p3]*3==ugly[i])p3++;
            if(ugly[p5]*5==ugly[i])p5++;
        }
        return ugly[n-1];
    }
};
