225.Implement Stack using Queues

/*
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
  You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
  Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
  You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
*/

Solution:
class MyStack {
public:
     //在插入过程中保证 队首元素是最后插入的元素
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        queue<int> temp;
        temp.push(x);//保证队首是最后插入的元素
        while(!q.empty()){
            temp.push(q.front());
            q.pop();
        }
        q=temp;
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int t=q.front();
        q.pop();
        return t;
    }
    
    /** Get the top element. */
    int top() {
        return q.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
private:
    queue<int> q;
};


Solution 2:
class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    /*
        利用queue实现stack那么就要保持queue中的元素顺序是先进后出的
        push新元素x时,可以先加入到queue的后面
        在queue中元素x之前的元素已经保持先进后出了 
        可以在此时把queue中在x之前的元素都弹出然后push到queue中x的后面
        eg.push顺序 1 2 3 4 --> 加入4之前 queue中的顺序是 3 2 1
        加入4后 3 2 1 4,然后将4之前的push到对尾 --> 4 3 2 1
    */
    void push(int x) {
        q.push(x);
        int n=q.size();
        for(int i=0;i<n-1;i++){
            q.push(q.front());
            q.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int res=q.front();
        q.pop();
        return res;
    }
    
    /** Get the top element. */
    int top() {
        return q.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
private:
    queue<int> q;
};

Solution 3:与上面方法的不同之处在于 push时正常按照queue的情况加入，在top(),pop()时取出最后加入的元素
class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        queue<int> tmp;
        int last=0;
        while(!q.empty()){
            last=q.front();
            q.pop();
            if(q.size()>0){
                tmp.push(last);
            }
        }
        q=tmp;
        return last;
    }
    
    /** Get the top element. */
    int top() {
        queue<int> tmp;
        int last=0;
        while(!q.empty()){
            last=q.front();
            q.pop();
            tmp.push(last);
        }
        q=tmp;
        return last;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
private:
    queue<int> q;
};

