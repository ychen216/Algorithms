153. Find Minimum in Rotated Sorted Array

/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.
You may assume no duplicate exists in the array.
*/


/*
        idea: 有序的循环数组 有三种形态 选择mid和high比较 然后缩小最小值所在的范围
        \         /           /
         \       /          \/
          \     /
    
*/
    
Solution:
class Solution {
public:
    //给定的循环数组是递增排好序的 对任意一个子数组array 
    //如果有array[first]<=array[last]那么[first,last]不存在循环的部分最小值就是array[first]
    //否则存在循环 取中点mid 如果array[mid]>=array[first] 最小值在后半部分 first=mid+1
    int findMin(vector<int>& nums) {
        int left=0,right=nums.size()-1;
        while(left<right){
            if(nums[left]<=nums[right])
                return nums[left];
            int mid=left+(right-left)/2;
            if(nums[mid]>=nums[left])
                left=mid+1;
            else
                right=mid;
        }
        return nums[left];
    }
};
update:
class Solution {
public:
    /*
        常规方法直接遍历找到最小的数 时间复杂度O(N)
        利用二分查找 O(logN) low high分别代表当前搜索子数组的第一个和最后一个元素
    */
    int findMin(vector<int>& nums) {
        int low=0,high=nums.size()-1;
        while(low<high){
            if(nums[low]<nums[high]) // [low,high]有序
                return nums[low];
            int mid=low+(high-low)/2;
            if(nums[mid]<=nums[high]) // eg[mid,high]->[3,4,5]最小的元素在[3]
                high=mid;
            else // nums[mid]>nums[high] eg[mid,high]->[4,1,2,3] 最小元素在[mid+1,high] 
                low=mid+1;
        }
        return nums[low];
    }
};

update:
class Solution {
public:
    int findMin(vector<int>& nums) {
        int high=nums.size()-1,low=0;
        while(low<=high){
            if(nums[low]<=nums[high])
                return nums[low];
            //nums[low]>nums[high] eg.4 5 0 1 2
            int mid=low+(high-low)/2;
            //左边是递增的 但是由于nums[low]>nums[high] 所以Min落在右侧
            if(nums[low]<=nums[mid]){
                low=mid+1;
            }else{
                //nums[low]>nums[mid]
                //说明在mid的右侧是递增的 Min在low和mid之间
                high=mid;
            }
        }
        return nums[low];
    }
};

update: 二分搜索新模板 加上解释

class Solution {
public:
    /*
        重点在于想到sorted rotated array的形式：
        1. array被minimal分成两节递增的子数组 前半部分比后半部分大 eg. 4 5 1 2 3
        /
          /
        2. 极端情况就是一个递增数组 1 2 3 4 5  / 这样递增的形式 只有情况1中的后半段
        考虑到情况2  我们利用mid和end比较 因为在情况2中不存在前半段 那么start就有可能出现在两个部分不好处理 我们用end来比较 在1,2中end都在后半段
    */
    int findMin(vector<int>& nums) {
        int start=0,end=nums.size()-1,mid;
        if(start>end){
            return -1;
        }
        while(start+1<end){
            mid=start+(end-start)/2;
            //mid在后半段
            if(nums[mid]<=nums[end]){
                end=mid;
            }else{
                start=mid;
            }
        }
        if(nums[start]<=nums[end])
            return nums[start];
        else
            return nums[end];
    }
};

Solution:
class Solution {
public:
    /*
        常规方法直接遍历找到最小的数 时间复杂度O(N)
        利用二分查找 O(logN)
    */
    int findMin(vector<int>& nums) {
        int low=0,high=nums.size()-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[low]<=nums[high]) // [low,high]有序
                return nums[low];
            if(nums[mid]<=nums[high])
                high=mid;
            else if(nums[mid]>nums[high])
                low=mid+1;
        }
        return nums[low];
    }
};

