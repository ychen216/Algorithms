82. Remove Duplicates from Sorted List II
/*
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/

Solution 1:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head||!head->next)
            return head;
        ListNode *feakHead=new ListNode(0);
        feakHead->next=head;
        ListNode *pre=feakHead,*cur=head; // pre指向的是确定是非重复的节点
        while(cur){
            // 找到重复元素区间
            while(cur->next&&cur->val==cur->next->val)
                cur=cur->next;
            // 跳出时分两种情况
            // 1.如果cur不是重复元素 2.cur是重复元素 cur指向最后一个重复元素
            if(pre->next==cur){
                pre=pre->next; // 确定一个非重复节点pre向后走
            }else{
                pre->next=cur->next;
            }
            cur=cur->next;
        }
        return feakHead->next;
    }
};

update:更清楚
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head||!head->next){
            return head;
        }
        ListNode *feakHead=new ListNode(0);
        feakHead->next=head;
        ListNode *cur=feakHead,*first=NULL,*last=NULL;
        //cur是当前重复区间的前一个元素 first和last是当前重复区间的第一个和最后一个元素
        while(cur->next){
            first=cur->next;
            last=cur->next;
            while(last->next&&last->next->val==last->val){
                last=last->next;
            }
            if(last==first){
                //非重复 加入链表
                cur=cur->next;
            }else{
                //有重复 抛弃[first,last]
                cur->next=last->next;
            }
        }
        return feakHead->next;
    }
};

update:
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head||!head->next){
            return head;
        }
        ListNode *feak=new ListNode(0);
        ListNode *cur=feak;
        ListNode *start=head, *end=NULL;
        while(start){
            //重复的部分为[start,end)
            end=start->next;
            while(end&&end->val==start->val){
                end=end->next;
            }
            //只有一个非重复节点
            if(end==start->next){
                cur->next=start;
                cur=cur->next;
                cur->next=NULL;
            }
            start=end;
        }
        return feak->next;
    }
};

Solution 2：recursive
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL)
            return NULL;
        //重复
        if(head->next!=NULL&&head->val==head->next->val){
            while(head->next!=NULL&&head->val==head->next->val)
                head=head->next;
            return deleteDuplicates(head->next);
        }
        else{
            head->next=deleteDuplicates(head->next);
        }
        return head;
    }
};

Solution 3: 很慢
class Solution {
public:
    // 利用map记录每个元素出现的次数来判断是否是Duplicated
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head||!head->next)
            return head;
        unordered_map<int,int> counter; //{val,occur times}
        ListNode *cur=head;
        while(cur){
            counter[cur->val]++;
            cur=cur->next;
        }
        ListNode *feakHead=new ListNode(0);
        cur=feakHead;
        while(head){
            if(counter[head->val]==1){
                cur->next=head;
                cur=cur->next;
            }
            head=head->next;
        }
        cur->next=NULL; //必须的 否则如果最后存在重复将无法删除 eg[1,2,3,3]
        return feakHead->next;
    }
};
