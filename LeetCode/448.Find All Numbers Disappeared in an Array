448.Find All Numbers Disappeared in an Array

/*
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
*/
Solution 1:
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        int size=nums.size();
        bool flag[size+1];
        memset(flag,0,sizeof(flag));
        for(int i=0;i<size;i++){
            flag[nums[i]]=true;
        }
        vector<int> res;
        for(int i=1;i<=size;i++)
            if(!flag[i])
                res.push_back(i);
        return res;
    }
};

Solution 2: trick
class Solution {
public:
    /*
        idea:因为数组元素大小为[1,n]所以可以将他们的值和数组下标做一个映射 使得空间消耗为O(1)
    */
    // 两次遍历 利用1~n 对应数组中1~n的下标值
    // 第一次遍历当出现x时 将num[x]的值置为相反数 表示该数已经出现过
    // 第二次遍历时若num[x]>0则x未出现过
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i=0;i<nums.size();i++){
            int index=abs(nums[i])-1;// 要注意取绝对值 且数组下标从0开始
            if(nums[index]>=0)
                nums[index]=-nums[index];
        }
        for(int j=0;j<nums.size();j++){
            if(nums[j]>=0)
                res.push_back(j+1);// 0~n-1下标回复到1~
        }
        return res;
    }
};
