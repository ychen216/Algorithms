315. Count of Smaller Numbers After Self

/*
You are given an integer array nums and you have to return a new counts array. The counts array has the property 
where counts[i] is the number of smaller elements to the right of nums[i].

Example:
Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].

*/

Solution:
class Solution {
public:
    /*
    求逆序数 可以用归并来做
    */
    vector<int> countSmaller(vector<int>& nums) {
        int size=nums.size();
        if(size==0)
            return {};
        vector<int> cnt(size,0);//存放逆序数
        vector<pair<int,int>> indexNum;//加入num和他的位置
        for(int i=0;i<size;i++)
            indexNum.push_back({nums[i],i});
        mergeSort(cnt,indexNum,0,size-1);
        return cnt;
    }
private:
    void mergeSort(vector<int>&cnt,vector<pair<int,int>>&indexNum,int s,int e){
        if(s<e){
            int mid=s+(e-s)/2;
            mergeSort(cnt,indexNum,s,mid);
            mergeSort(cnt,indexNum,mid+1,e);
            merge(cnt,indexNum,s,mid,e);
        }
    }
    void merge(vector<int>&cnt,vector<pair<int,int>>&indexNum,int s,int mid,int e){
        int p1=s,q1=mid,p2=mid+1,q2=e;
        vector<pair<int,int>> temp;
        while(p1<=q1||p2<=q2){
            //计算逆序数
            if(p2>q2||p1<=q1&&indexNum[p1].first<=indexNum[p2].first){
                cnt[indexNum[p1].second]+=p2-mid-1;//已经加入的[mid+1,e]中的元素必然都比当前元素大 即构成逆序
                temp.push_back(indexNum[p1++]);
            }
            else
                temp.push_back(indexNum[p2++]);
        }
    
        for(int i=0;i<temp.size();i++)
            indexNum[i+s]=temp[i];
    }
};
