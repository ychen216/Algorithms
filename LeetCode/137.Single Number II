137. Single Number II

/*
Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
*/

Solution 1:
class Solution {
public:
    // naive map记录每个数字出现的次数
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int> mmp;
        for(auto num:nums)
            mmp[num]++;
        for(auto &p:mmp){
            if(p.second==1)
                return p.first;
        }
    }
};

Solution2:
空间复杂度 O(1)
class Solution {
public:
    /*
    假设输入中没有single number，那么输入中的每个数字都重复出现了数字，也就是说，对这32位中的每一位i而言，所有的输入加起来之后，第i位一定是3的倍数。
    现在增加了single number，那么对这32位中的每一位做相同的处理，也就是说，逐位把所有的输入加起来，并且看看第i位的和除以3的余数，这个余数就是single 
    nubmer在第i位的取值。这样就得到了single number在第i位的取值。这等价于一个模拟的二进制，接着只需要把这个模拟的二进制转化为十进制输出即可。
    另外，这个做法可以扩展，如果有一堆输入，其中1个数字出现了1次，剩下的数字出现了K次，这样的问题全部可以使用这样的办法来做。
    */
    int singleNumber(vector<int>& nums) {
        int res=0;
        vector<int> cnt(32,0);
        for(int i=0;i<32;i++){
            for(auto num:nums){
                // 记录每个数字在i位的值v(0 or 1) 重复出现k次的数字 一定在i位有k个一样的值v v*k必然整除k
                // 那么在i位得到的各个数字在该位的和对K求余,得到的就是只出现一次的数字在该位的取值情况
                cnt[i]+=((num>>i)&1);
                cnt[i]%=3;
            }
            res|=cnt[i]<<i;
        }
        return res;
    }
};
