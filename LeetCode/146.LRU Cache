146. LRU Cache

/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

  LRUCache cache = new LRUCache( 2 /* capacity */ );

  cache.put(1, 1);
  cache.put(2, 2);
  cache.get(1);       // returns 1
  cache.put(3, 3);    // evicts key 2
  cache.get(2);       // returns -1 (not found)
  cache.put(4, 4);    // evicts key 1
  cache.get(1);       // returns -1 (not found)
  cache.get(3);       // returns 3
  cache.get(4);       // returns 4

*/

Solution:
class LRUCache {
    // 思路利用双向链表维护节点的前后信息(插入删除O(1))  + 利用HashMap记录key所在的node(查找O(1))
    // 在实现双向链表时 为了方便插入删除 加入头尾节点
    private class Node{
        Node prev;
        Node next;
        int key;
        int value;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
            this.prev = null;
            this.next = null;
        }
    }
    private int capacity;
    private HashMap<Integer, Node> hs = new HashMap<Integer, Node>();
    private Node head = new Node(-1, -1);
    private Node tail = new Node(-1, -1);

    public LRUCache(int capacity) {
        this.capacity = capacity;
        tail.prev = head;
        head.next = tail;
    }

    public int get(int key) {
        if( !hs.containsKey(key)) {
            return -1;
        }

        // remove current
        Node current = hs.get(key);
        current.prev.next = current.next;
        current.next.prev = current.prev;

        // move current to tail
        move_to_tail(current);

        return hs.get(key).value;
    }

    public void put(int key, int value) {
        // get 这个方法会把key挪到最末端，因此，不需要再调用 move_to_tail
        if (get(key) != -1) {
            hs.get(key).value = value;
            return;
        }

        if (hs.size() == capacity) {
            hs.remove(head.next.key);
            head.next = head.next.next;
            head.next.prev = head;
        }

        Node insert = new Node(key, value);
        hs.put(key, insert);
        move_to_tail(insert);
    }

    private void move_to_tail(Node current) {
        current.prev = tail.prev;
        tail.prev = current;
        current.prev.next = current;
        current.next = tail;
    }
}

C++ version:
class LRUCache {
public:
    class Node{
    public:
        Node *pre,*next;
        int key,val;
        Node(int k,int v):key(k),val(v),pre(NULL),next(NULL){}
    };
    LRUCache(int capacity) {
        this->capacity=capacity;
        this->head=new Node(0,0);
        this->tail=new Node(0,0);
        head->next=tail;
        tail->pre=head;
    }
    
    int get(int key) {
        if(key_to_pos.find(key)==key_to_pos.end()){
            return -1;
        }
        Node *node=key_to_pos[key];
        int value=node->val;
        //把这个节点删掉 然后移到最后
        node->pre->next=node->next;
        node->next->pre=node->pre;
        move_to_tail(node);
        return value;
    }
    
    //put操作可能插入新节点 也可能改变旧节点的值 put操作的节点也要变成最新节点加在最后
    void put(int key, int value) {
        if(get(key)!=-1){
            key_to_pos[key]->val=value;
            return;
        }
        //要插入一个节点
        Node *node=new Node(key,value);
        if(key_to_pos.size()>=capacity){
            //删除头结点
            Node *first=head->next;
            head->next=first->next;
            first->next->pre=head;
            key_to_pos.erase(first->key);
        }
        key_to_pos[key]=node;
        move_to_tail(node);
    }
    
private:
    void move_to_tail(Node *node){
        tail->pre->next=node;
        node->pre=tail->pre;
        node->next=tail;
        tail->pre=node;
    }
    int capacity;
    unordered_map<int,Node*> key_to_pos;
    Node *head,*tail;
};
