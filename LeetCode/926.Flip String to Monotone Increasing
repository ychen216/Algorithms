926. Flip String to Monotone Increasing

/*
A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)

We are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.

Return the minimum number of flips to make S monotone increasing.

Example 1:
Input: "00110"
Output: 1
Explanation: We flip the last digit to get 00111.

Example 2:
Input: "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.

Example 3:
Input: "00011000"
Output: 2
Explanation: We flip to get 00000000.

Note:
  1 <= S.length <= 20000
  S only consists of '0' and '1' characters.

*/

Solution 1:
class Solution {
public:
    /*
        DP: 将字符串分割为两半 一边是连续的0 一边是连续的1 那么在第一部分的1需要flip to 0 在第二部分需要将0 flip to 1
        我们要决定切分的位置i, i表示切的间隙 长度为n的字符串有n+1个间隙 编号为0~n
        从左到右计算需要将1->0的个数 one2zero[0]=0 one2zero[i+1]=one2zero[i]+S[i]=='1'?1:0 one2zero[i]表示在i切分点前 需要将1->0的个数
        从右到左计算需要将0->1的个数 zero2one[n]=0 zero2one[i]=zero2one[i+1]+S[i]=='0'?1:0 zero2one[i]表示在i切分点后 需要将0->1的个数
        min(zero2one[i]+one2zero[i])就是我们所求的结果
    */
    int minFlipsMonoIncr(string S) {
        int n=S.length();
        if(n<2)
            return 0;
        vector<int> zero2one(n+1,0),one2zero(n+1,0);
        for(int i=0;i<n;i++)
            one2zero[i+1]=one2zero[i]+(S[i]=='0'?0:1);
        for(int i=n-1;i>=0;i--)
            zero2one[i]=zero2one[i+1]+(S[i]=='1'?0:1);
        int res=n;
        for(int i=0;i<=n;i++)
            res=min(res,one2zero[i]+zero2one[i]);
        return res;
    }
};

update 可以更新为空间O(1)
class Solution {
public:
    /*
        DP: 将字符串分割为两半 一边是连续的0 一边是连续的1 那么在第一部分的1需要flip to 0 在第二部分需要将0 flip to 1
        我们要决定切分的位置i, i表示切的间隙 长度为n的字符串有n+1个间隙 编号为0~n
        从左到右计算需要将1->0的个数 one2zero[0]=0 one2zero[i+1]=one2zero[i]+S[i]=='1'?1:0 one2zero[i]表示在i切分点前 需要将1->0的个数
        从右到左计算需要将0->1的个数 zero2one[n]=0 zero2one[i]=zero2one[i+1]+S[i]=='0'?1:0 zero2one[i]表示在i切分点后 需要将0->1的个数
        min(zero2one[i]+one2zero[i])就是我们所求的结果
        可以用变量替代数组 空间开销--> O(1)
    */
    int minFlipsMonoIncr(string S) {
        int n=S.length();
        if(n<2)
            return 0;
        int one2zero=0,zero2one=0; //初始化在第0个切割点one2zero, 在第n个切割点zero2one
        for(int i=0;i<n;i++)
            one2zero+=S[i]-'0';
        int res=one2zero; // 在第n个切割点 zero2one+one2zero=one2zero
        for(int i=n-1;i>=0;i--){
            if(S[i]=='0'){
                zero2one++;
            }
            else{
                one2zero--;
            }
            res=min(res,one2zero+zero2one);
        }
        return res;
    }
};

Solution 2:
// 没懂
int minFlipsMonoIncr(string S) {
        int n = S.length();
        if(n < 2)
            return 0;
        int f0 = 0, f1 = 0;
        for (auto c : S) {
            f0 += c - '0';
            f1 = min(f0, f1 + 1 - (c - '0'));
        }
        return f1;
    }
