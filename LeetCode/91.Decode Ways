91. Decode Ways
/*
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.
*/
Solution:
class Solution {
public:
    /*
    类似爬楼梯问题，但要加很多限制条件。
    定义数组number，number[i]意味着：字符串s[0..i-1]可以有number[i]种解码方法。
    回想爬楼梯问题一样，number[i] = number[i-1] + number[i-2]
    但不同的是本题有多种限制：
    第一： s[i-1]不能是0，如果s[i-1]是0的话，number[i]就只能等于number[i-2]
    第二，s[i-2,i-1]中的第一个字符不能是0，而且Integer.parseInt(s.substring(i-2,i))获得的整数必须在1到26之间。   
    */
    int numDecodings(string s) {
        int len=s.length();
        if(len==0)
            return 0;
        int dp[len+1]={0};
        //初始化
        dp[0]=1;
        dp[1]=s[0]=='0'?0:1;
        for(int i=2;i<=len;i++){
            int first=s[i-1]-'0';
            int second=stoi(s.substr(i-2,2));
            if(first!=0)
                dp[i]+=dp[i-1];
            if(second>=10&&second<=26)
                dp[i]+=dp[i-2];
        }
        return dp[len];
    }
};

update:一样的思路 自己重写了一遍
class Solution {
public:
    /*
        类似于一次只能走一步或是两步的爬楼梯问题
        从左向右转化 第i位可以由i-1位转化完成到达 第i位自己构成一个字符
        也可以是i-2位转换完成到达 然后i-1和i位两位数字构成一个字符
    */
    int numDecodings(string s) {
        int n=s.length();
        if(n==0||s[0]=='0')
            return 0;
        if(n==1)
            return 1;
        // n > 1 && s[0] != '0'
        // dp[i]==0说明无法到达s[i-1]位
        vector<int> dp(n+1,0);
        dp[0]=1;
        for(int i=1;i<=n;i++){
            // 由前一位传递过来 自己是一位
            if(s[i-1]!='0'&&dp[i-1]!=0)
                dp[i]+=dp[i-1];
            // 由前两位传递过来 自己和前一位构成一个字符
            // 两位数不能有前导0 且应该处于[1,26]的区间
            if(i>=2&&s[i-2]!='0'){
                int num2Digit=stoi(s.substr(i-2,2));
                if(num2Digit>=1&&num2Digit<=26&&dp[i-2]!=0)
                    dp[i]+=dp[i-2];
            }
        }
        return dp[n];
    }
};

update:
class Solution {
public:
    /*
        类似于一次只能走一步或是两步的爬楼梯问题
        从左向右转化 第i位可以由i-1位转化完成到达 第i位自己构成一个字符
        也可以是i-2位转换完成到达 然后i-1和i位两位数字构成一个字符
    */
    int numDecodings(string s) {
        int n=s.length();
        if(n==0||s[0]=='0')
            return 0;
        if(n==1)
            return 1;
        // n > 1 && s[0] != '0'
        // dp[i]==0说明无法到达s[i-1]位
        vector<int> dp(n+1,0);
        dp[0]=1;
        for(int i=1;i<=n;i++){
            // 由前一位传递过来 自己是一位
            // 可以简化 不需要判断dp[i-1]和dp[i-2]因为如果无法到达他们的值为0 本来就不会增加dp[i]
            if(s[i-1]!='0')
                dp[i]+=dp[i-1];
            // 由前两位传递过来 自己和前一位构成一个字符
            // 两位数不能有前导0 且应该处于[1,26]的区间
            if(i>=2&&s[i-2]!='0'){
                int num2Digit=stoi(s.substr(i-2,2));
                if(num2Digit>=1&&num2Digit<=26)
                    dp[i]+=dp[i-2];
            }
        }
        return dp[n];
    }
};

update:
class Solution {
public:
    int numDecodings(string s) {
        int n=s.length();
        if(n==0)
            return 0;
        if(s[0]=='0')
            return 0;
        vector<int> dp(n,0);
        dp[0]=1;
        for(int i=1;i<n;i++){
            if(s[i]!='0')
                dp[i]+=dp[i-1];
            if(s[i-1]!='0'){
                int num=(s[i-1]-'0')*10+s[i]-'0';
                if(num>=10&&num<=26){
                    if(i>1)
                        dp[i]+=dp[i-2];
                    else
                        dp[i]+=1;
                }
            }
        }
        return dp[n-1];
    }
};
