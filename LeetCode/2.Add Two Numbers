2. Add Two Numbers
/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *feakHead=new ListNode(0);
        ListNode *cur=feakHead;
        int jinwei=0;
        while(l1!=NULL||l2!=NULL){
            if(l1){
                jinwei+=l1->val;
                l1=l1->next;
            }
            if(l2){
                jinwei+=l2->val;
                l2=l2->next;
            }
            cur->next=new ListNode(jinwei%10);
            jinwei/=10;
            cur=cur->next;
        }
        if(jinwei!=0)
            cur->next=new ListNode(jinwei);
        return feakHead->next;
    }
};
