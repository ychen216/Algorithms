668. Kth Smallest Number in Multiplication Table
/*
Nearly every one have used the Multiplication Table. But could you find out the k-th smallest number quickly from the multiplication table?

Given the height m and the length n of a m * n Multiplication Table, and a positive integer k, you need to return the k-th smallest number in this table.

Example 1:
Input: m = 3, n = 3, k = 5
Output: 
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
3	6	9
The 5-th smallest number is 3 (1, 2, 2, 3, 3).

Example 2:
Input: m = 2, n = 3, k = 6
Output: 
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
The 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).
Note:
  The m and n will be in the range [1, 30000].
  The k will be in the range [1, m * n]

*/

Solution 1:最大堆 TLE
class Solution {
public:
    //最大堆
    int findKthNumber(int m, int n, int k) {
        priority_queue<int> pq;
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                int cur=i*j;
                if(pq.size()<k)
                    pq.push(cur);
                else{
                    if(pq.top()>cur){
                        pq.pop();
                        pq.push(cur);
                    }
                }
            }
        }
        return pq.top();
    }
};


Solution 2:
class Solution {
public:
    //二分搜索 一共有m*n个数 每次查找表中不大于mid值的数的个数
    int findKthNumber(int m, int n, int k) {
        int low=1,high=m*n;
        while(low<high){
            int mid=low+(high-low)/2;
            int cnt=helper(m,n,mid);
            if(cnt>=k){
                high=mid;
            }else{
                low=mid+1;
            }
        }
        return low;
    }

private:
    int helper(int m,int n,int mid){
        int cnt=0;
        for(int i=1;i<=m;i++)
            cnt+=min(n,mid/i);
        return cnt;
    }
};
