403. Frog Jump
/*
A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.

If the frog's last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.

Note:

The number of stones is ≥ 2 and is < 1,100.
Each stone's position will be a non-negative integer < 231.
The first stone's position is always 0.
Example 1:

[0,1,3,5,6,8,12,17]

There are a total of 8 stones.
The first stone at the 0th unit, second stone at the 1st unit,
third stone at the 3rd unit, and so on...
The last stone at the 17th unit.

Return true. The frog can jump to the last stone by jumping 
1 unit to the 2nd stone, then 2 units to the 3rd stone, then 
2 units to the 4th stone, then 3 units to the 6th stone, 
4 units to the 7th stone, and 5 units to the 8th stone.
Example 2:

[0,1,2,3,4,8,9,11]

Return false. There is no way to jump to the last stone as 
the gap between the 5th and 6th stone is too large.
*/

Solution:
class Solution {
public:
    /*
    利用map<int,set<int>>记录下能够到达stone[i]的前一跳跳的距离集合 
    然后用距离集合更新下一跳能够到达的石头j 并计算当前这一跳的距离然后加入到石头j的距离集合中
    如果最后一块石头的距离集合不为空 那么说明存在石头能够跳到这块石头 能够过河
    需要注意的是 青蛙只能往前跳 所以k-1 k k+1必须大于0
    */
    bool canCross(vector<int>& stones) {
        int len=stones.size();
        if(len==0)
            return false;
        map<int,set<int>> mmap;//记录能够到达当前石头的前一跳距离集合
        //初始化
        for(int i=0;i<len;i++)
            mmap[stones[i]]={};
        mmap[0].insert(0);
        //只需要搜索到倒数第二块石头 即可知能否到达最后一块石头
        for(int i=0;i<len-1;i++){
            for(auto lastStep:mmap[stones[i]]){
                for(int nextStep=lastStep-1;nextStep<=lastStep+1;nextStep++){
                    if(nextStep>0&&mmap.find(stones[i]+nextStep)!=mmap.end())
                        mmap[stones[i]+nextStep].insert(nextStep);
                }
            }
        }
        return !mmap[stones[len-1]].empty();
    }
};

update:解释
class Solution {
public:
    /*
        题意：一只不会游泳的青蛙从第0个石头(位置为0)出发开始跳,默认从第0个石头只会跳1 unit
        后面的跳跃要求若跳到当前石头的那一次跳了K units,这次就只能跳 K-1 或者 K 或者 K+1 units
        问青蛙是否能够达到最后一块石头从而到达对岸
        
        很显然,站在每一个石头x我们可以继续往后拓展K-1,K,K+1步,可以到达不同的下一块石头y
        接下来y继续向后拓展，这时我们需要知道从x到达y时跳的距离，所以我们需要在x跳到y时记录下跳的距离是K-1,K还是K+1
        那么对于y来说,可能前面x,x',x''都可以跳到y,我们需要把这些都记录下来,在y处可以选择继续跳的跳跃距离有更多种
        最后看能不能跳到最后一块石头就看最后一块石头的跳的距离集合是否空
    */
    bool canCross(vector<int>& stones) {
        int n=stones.size();
        unordered_map<int,unordered_set<int>> mmp;//{pos,{jump_set}}记录跳到pos处的上一跳距离集合
        for(int i=0;i<n;i++){
            mmp[stones[i]]=unordered_set<int>();
        }
        mmp[0].insert(0);
        for(int i=0;i<n;i++){
            //更新从stone[i]能跳到的下一个位置y 以及stone[i]跳到y时跳的距离
            for(auto &pre_jump:mmp[stones[i]]){
                for(int cur_jump=pre_jump-1;cur_jump<=pre_jump+1;cur_jump++){
                    //每一跳>0 且要能够跳到石头上
                    int next_stone=stones[i]+cur_jump;
                    if(cur_jump>0&&mmp.find(next_stone)!=mmp.end()){
                        mmp[next_stone].insert(cur_jump);
                    }
                }
            }
        }
        return mmp[stones[n-1]].size()>0;
    }
};
