403. Frog Jump
/*
A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.

If the frog's last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.

Note:

The number of stones is ≥ 2 and is < 1,100.
Each stone's position will be a non-negative integer < 231.
The first stone's position is always 0.
Example 1:

[0,1,3,5,6,8,12,17]

There are a total of 8 stones.
The first stone at the 0th unit, second stone at the 1st unit,
third stone at the 3rd unit, and so on...
The last stone at the 17th unit.

Return true. The frog can jump to the last stone by jumping 
1 unit to the 2nd stone, then 2 units to the 3rd stone, then 
2 units to the 4th stone, then 3 units to the 6th stone, 
4 units to the 7th stone, and 5 units to the 8th stone.
Example 2:

[0,1,2,3,4,8,9,11]

Return false. There is no way to jump to the last stone as 
the gap between the 5th and 6th stone is too large.
*/

Solution:
class Solution {
public:
    /*
    利用map<int,set<int>>记录下能够到达stone[i]的前一跳跳的距离集合 
    然后用距离集合更新下一跳能够到达的石头j 并计算当前这一跳的距离然后加入到石头j的距离集合中
    如果最后一块石头的距离集合不为空 那么说明存在石头能够跳到这块石头 能够过河
    需要注意的是 青蛙只能往前跳 所以k-1 k k+1必须大于0
    */
    bool canCross(vector<int>& stones) {
        int len=stones.size();
        if(len==0)
            return false;
        map<int,set<int>> mmap;//记录能够到达当前石头的前一跳距离集合
        //初始化
        for(int i=0;i<len;i++)
            mmap[stones[i]]={};
        mmap[0].insert(0);
        //只需要搜索到倒数第二块石头 即可知能否到达最后一块石头
        for(int i=0;i<len-1;i++){
            for(auto lastStep:mmap[stones[i]]){
                for(int nextStep=lastStep-1;nextStep<=lastStep+1;nextStep++){
                    if(nextStep>0&&mmap.find(stones[i]+nextStep)!=mmap.end())
                        mmap[stones[i]+nextStep].insert(nextStep);
                }
            }
        }
        return !mmap[stones[len-1]].empty();
    }
};
