581. Shortest Unsorted Continuous Subarray
/*
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order,
then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
*/

Solution 1:naive sort
class Solution {
public:
    //与排序好的数组比较看相异的元素有几个
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> copy(nums.begin(),nums.end());
        sort(copy.begin(),copy.end());
        int i=0,j=nums.size()-1;
        // 从前向后 排除不需要重排序的元素
        while(i<=j&&copy[i]==nums[i])i++;
        // 从后向前 
        while(i<=j&&copy[j]==nums[j])j--;
        return j-i+1;
    }
};

Solution 2: 时间空间O(n)
class Solution {
public:
    // 利用栈维护一个递增序列 和 递减序列
    int findUnsortedSubarray(vector<int>& nums) {
        stack<int> st1,st2;// 存放元素下标
        int begin=nums.size(),end=-1;
        // 通过构造递增序列 找到第一个需要重排的元素 
        for(int i=0;i<nums.size();i++){
            while(!st1.empty()&&nums[st1.top()]>nums[i]){
                begin=min(begin,st1.top());
                st1.pop();
            }
            st1.push(i);
        }
        for(int i=nums.size()-1;i>=0;i--){
            while(!st2.empty()&&nums[st2.top()]<nums[i]){
                end=max(end,st2.top());
                st2.pop();
            }
            st2.push(i);
        }
        return begin>end?0:end-begin+1;
    }
};

Solution 3：
class Solution {
public:
    /*O(n)
    利用三个性质
    nums[0, i - 1] and nums[j + 1, n - 1] are both sorted.
    nums[i] != nums_sorted[i] and nums[j] != nums_sorted[j].
    nums[i - 1] <= min and max <= nums[j + 1], where min and max are the minimum and maximum values of subarray nums[i, j].
    */
    int findUnsortedSubarray(vector<int>& nums) {
        int size=nums.size();
        int i=0,j=size-1;
        while(i<j&&nums[i+1]>=nums[i])
            i++;
        
        if(i>=j)
            return 0;
        while(j>0&&nums[j]>=nums[j-1])
            j--;

        int maxV=INT_MIN,minV=INT_MAX;
        for(int k=i;k<=j;k++){
            maxV=max(maxV,nums[k]);
            minV=min(minV,nums[k]);
        }
        while(i>=0&&nums[i]>minV)
            i--;
        while(j<size&&nums[j]<maxV)
            j++;
        return j-i-1;
    }
};


Solution 4: 时间O(n) 空间O(1) 还没理解
public class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        boolean flag = false;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1])
                flag = true;
            if (flag)
                min = Math.min(min, nums[i]);
        }
        flag = false;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] > nums[i + 1])
                flag = true;
            if (flag)
                max = Math.max(max, nums[i]);
        }
        int l, r;
        for (l = 0; l < nums.length; l++) {
            if (min < nums[l])
                break;
        }
        for (r = nums.length - 1; r >= 0; r--) {
            if (max > nums[r])
                break;
        }
        return r - l < 0 ? 0 : r - l + 1;
    }
}
