467. Unique Substrings in Wraparound String
/*
Consider the string s to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz",
so s will look like this: "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".

Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, 
your input is the string p and you need to output the number of different non-empty substrings of p in the string s.

Note: p consists of only lowercase English letters and the size of p might be over 10000.

Example 1:
Input: "a"
Output: 1

Explanation: Only the substring "a" of string "a" is in the string s.
Example 2:
Input: "cac"
Output: 2
Explanation: There are two substrings "a", "c" of string "cac" in the string s.
Example 3:
Input: "zab"
Output: 6
Explanation: There are six substrings "z", "a", "b", "za", "ab", "zab" of string "zab" in the string s.
*/
Solution:
class Solution {
public:
    /*由于封装字符串是26个字符按顺序无限循环组成的，那么满足题意的p的子字符串要么是单一的字符，要么是按字母顺序的子字符串
    abcd这个字符串，以d结尾的子字符串有abcd, bcd, cd, d
    可以发现bcd或者cd这些以d结尾的字符串的子字符串都包含在abcd中
    那么我们知道以某个字符结束的最大字符串包含其他以该字符结束的字符串的所有子字符串
    那么题目就可以转换为分别求出以每个字符(a-z)为结束字符的最长连续字符串就行了
    */
    int findSubstringInWraproundString(string p) {
        int dp[26]={0};//以字符i结尾的子串个数
        int len=0;
        for(int i=0;i<p.length();i++){
            // 对应abc和za的情况
            if(i>0&&(p[i]==p[i-1]+1||p[i]==p[i-1]-25)) // 可以直接p[i-1]=='z'&&p[i]=='a'
                len++;
            else
                len=1;
            //以字符p[i]结尾的符合条件的子字符串个数 unique
            dp[p[i]-'a']=max(dp[p[i]-'a'],len);
        }
        int res=0;
        for(int i=0;i<26;i++)
            res+=dp[i];
        return res;
    }
};
