49. Group Anagrams
/*
Given an array of strings, group anagrams together.

For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"], 
Return:
[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note: All inputs will be in lower-case.
*/

本题其实就是考察如何设计有着相同字符组成的字符串有相同的key

Solution:map
class Solution {
public:
    //相似的字符串 就是组成的字母类型和个数一样
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        int size=strs.size();
        map<map<char,int>,vector<string>> mmap;//有相同字符组成的字符串在 strs中的下标
        for(int i=0;i<size;i++){
            map<char,int> m;
            for(auto &c:strs[i]){
                if(m.count(c)==0)
                    m[c]=1;
                else
                    m[c]++;
            }
            if(mmap.count(m)==0)
                mmap[m]=vector<string>(1,strs[i]);
            else
                mmap[m].push_back(strs[i]);
        }
        vector<vector<string>>res;
        for(auto &it:mmap){
            res.push_back(it.second);
        }
        return res;
    }
};

Solution 2:利用排序 相似的字符串排序后是一样的
class Solution {
public:
    //相似的字符串 就是组成的字母类型和个数一样
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        int size=strs.size();
        unordered_map<string,vector<string>> mmap;//有相同字符组成的字符串在 strs中的下标
        for(int i=0;i<size;i++){
            string s=strs[i];
            sort(s.begin(),s.end());
            if(mmap.count(s)==0)
                mmap[s]=vector<string>(1,strs[i]);
            else
                mmap[s].push_back(strs[i]);
        }
        vector<vector<string>>res;
        for(auto &it:mmap){
            res.push_back(it.second);
        }
        return res;
    }
};

Solution 3:
class Solution {
public:
    /*
        将有相同字符组合的词 放到一起
        有相同字符组合的词拥有相同的key 相当于设计一个词->key的hash
        然后可以利用map将有相同key的词组合起来
        这里的key可以简单设计为一个vector 记录每个字符出现的情况
        这里可以将key设计为一个字符串:记录了不同字符的个数 eg. hash(absbz)=1a2b1s1z
    */
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string>> mmp;
        for(auto &str:strs){
            vector<int> v(26,0);
            for(auto c:str)
                v[c-'a']++;
            string key="";
            for(int i=0;i<26;i++){
                char x=i+'a';
                if(v[i]>0)
                    key+=to_string(v[i])+x;
            }
            mmp[key].push_back(str);
        }
        vector<vector<string>> res;
        for(auto &p:mmp)
            res.push_back(p.second);
        return res;
    }
};

or
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,int> key2Index;//同一个key对应在结果数组中的index
        vector<vector<string>> res;
        for(auto &str:strs){
            vector<int> cnt(26,0);
            for(auto &c:str)
                cnt[c-'a']++;
            string key;
            for(int i=0;i<26;i++){
                if(cnt[i]>0){
                    key.push_back(i+'a');
                    key.append(to_string(cnt[i]));
                }
            }
            if(key2Index.find(key)==key2Index.end()){
                key2Index[key]=res.size();
                res.push_back({});
                res.back().push_back(str);
            }
            else{
                res[key2Index[key]].push_back(str);
            }
        }
        return res;
    }
};

Solution 4:
可以设计将字符串映射到一个数字 比如利用不同的素数代表不同的字符 a->2 b->3 c->5 ..
那么一个数字可以唯一的表示为 n=q1^a1 * q2^a2 * ... * qn^an
但是这样很容易发生溢出 一般的操作时取模 但是这样容易有collision发生 要另外处理
