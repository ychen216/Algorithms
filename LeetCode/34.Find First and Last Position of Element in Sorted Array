34.  Find First and Last Position of Element in Sorted Array
/*
Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

Solution:
class Solution {
public:
    //二分找到目标值 再向两侧扩展
    vector<int> searchRange(vector<int>& nums, int target) {
        int size=nums.size();
        int low=0,high=size-1;
        int leftIndex=-1,rightIndex=-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(target==nums[mid]){
                leftIndex=rightIndex=mid;
                break;
            }
            if(target<nums[mid])
                high=mid-1;
            else
                low=mid+1;
        }
        if(leftIndex==-1)
            return{-1,-1};
        while(leftIndex>0&&nums[leftIndex-1]==target)
            leftIndex--;
        while(rightIndex<size-1&&nums[rightIndex+1]==target)
            rightIndex++;
        return {leftIndex,rightIndex};
    }
};

Solution 2: 两次二分查找
class Solution {
public:
    /*
        二分搜索 找到第一个>=target的位置和最后一个<=target的位置
    */
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1,mid;
        // 第一个>=target
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]>=target)
                high=mid-1;
            else
                low=mid+1;
        }
        // 没有找到
        if(low==n||nums[low]!=target)
            return {-1,-1};
        int start=low;
        low=0,high=n-1;
        // 最后一个<=target
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]<=target)
                low=mid+1;
            else
                high=mid-1;
        }
        if(high<0||nums[high]!=target)
            return {-1,-1};
        return {start,high};
    }
};

update: 
第二次搜索最后一个<=target时 将第一次搜索>=target的结果作为搜索的起始位置 缩小搜索范围
同时在保证了第一次搜索>=target时 搜索到了 必然存在至少一个target 不会产生{-1,-1}的结果
优化后0ms beats 100%
class Solution {
public:
    /*
        二分搜索 找到第一个>=target的位置和最后一个<=target的位置
    */
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1,mid;
        // 第一个>=target
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]>=target)
                high=mid-1;
            else
                low=mid+1;
        }
        // 没有找到
        if(low==n||nums[low]!=target)
            return {-1,-1};
        int start=low;
        //可以不用重置low low所处的位置即为target的起始位置 直接向后搜索即可
        high=n-1;
        // 最后一个<=target
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]<=target)
                low=mid+1;
            else
                high=mid-1;
        }
        // 这一步判断也可以不要 因为上面已经保证了至少有一个元素存在
        /*
        if(high<0||nums[high]!=target)
            return {-1,-1};
        */
        return {start,high};
    }
};

update:另一个二分搜索的模板
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        if(n==0)
            return {-1,-1};
        vector<int> res;
        int start=0,end=n-1,mid;
        while(start+1<end){
            mid=start+(end-start)/2;
            if(nums[mid]>=target){
                end=mid;
            }else{
                start=mid;
            }
        }
        if(nums[start]==target){
            res.push_back(start);
        }else if(nums[end]==target){
            res.push_back(end);
        }else{
            return {-1,-1};
        }
        start=0,end=n-1;
        while(start+1<end){
            mid=start+(end-start)/2;
            if(nums[mid]<=target){
                start=mid;
            }else{
                end=mid;
            }
        }
        if(nums[end]==target){
            res.push_back(end);
        }else{
            res.push_back(start);
        }
        return res;
    }
};
