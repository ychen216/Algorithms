27. Remove Element

/*
Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example:
Given input array nums = [3,2,2,3], val = 3

Your function should return length = 2, with the first two elements of nums being 2.
*/

Solution 1:
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int cur=0;//记录现在可以安放元素的地方
        int size=nums.size();
        for(int i=0;i<size;i++){
            if(nums[i]!=val)
                nums[cur++]=nums[i];
        }
        return cur;
    }
};

Solution 2：
class Solution {
public:
    // 双指针 当当前元素是要删除的元素时就与当前有效的最后一个字符交换
    int removeElement(vector<int>& nums, int val) {
        int start=0,end=nums.size()-1;
        while(start<=end){
            if(nums[start]==val){
                swap(nums[start],nums[end]);
                end--;
            }else{
                start++;
            }
        }
        //start是下一个能够放非val元素的位置 也就是长度
        return start;
    }
};
