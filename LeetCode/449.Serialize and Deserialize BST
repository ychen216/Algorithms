449. Serialize and Deserialize BST
/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
*/
Solution 1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    //利用前序遍历序列化BST保存空节点 然后按照前序的顺序重新构造树
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL){
            return "#";
        }
        string root_str=to_string(root->val);
        string left=serialize(root->left);
        string right=serialize(root->right);
        return root_str+" "+left+" "+right;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        vector<string> preorder;
        string cur;
        while(ss>>cur){
            preorder.push_back(cur);
        }
        return decoder(preorder,0,preorder.size()-1);
    }
private:
    TreeNode *decoder(vector<string> &preorder,int s,int e){
        if(s>e){
            return NULL;
        }
        if(preorder[s]=="#"){
            return NULL;
        }
        TreeNode *root=new TreeNode(stoi(preorder[s]));
        int rightStart=s+1;
        while(rightStart<=e){
            if(preorder[rightStart]!="#" && stoi(preorder[rightStart])>root->val){
                break;
            }
            rightStart++;
        }
        root->left=decoder(preorder,s+1,rightStart-1);
        root->right=decoder(preorder,rightStart,e);
        return root;
    }
};

update:
class Codec {
public:
    //利用前序遍历序列化BST 利用BST的性质不再保存空节点 直接比较根节点和后续节点的大小判断左右子树的边界
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL){
            return "";
        }
        string root_str=to_string(root->val);
        string left=serialize(root->left);
        string right=serialize(root->right);
        return root_str+" "+left+" "+right;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        vector<int> preorder;
        string cur;
        while(ss>>cur){
            preorder.push_back(stoi(cur));
        }
        return decoder(preorder,0,preorder.size()-1);
    }
private:
    TreeNode *decoder(vector<int> &preorder,int s,int e){
        if(s>e){
            return NULL;
        }
        TreeNode *root=new TreeNode(preorder[s]);
        int rightStart=s+1;
        while(rightStart<=e){
            if(preorder[rightStart]>root->val){
                break;
            }
            rightStart++;
        }
        root->left=decoder(preorder,s+1,rightStart-1);
        root->right=decoder(preorder,rightStart,e);
        return root;
    }
};


Solution 2:
class Codec {
public:
    // 前序遍历将NULL节点也表示出来 构成序列化string 不能使用中序这样无法找到根节点
    // 空节点用#表示 用" "分隔不同节点 这样便于用stringstream获取各个节点的值
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL)
            return "# ";
        return to_string(root->val)+" "+serialize(root->left)+serialize(root->right);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        return helper(ss);
    }
private:
    // 利用dfs反序列化 同时利用引用可以将已经构建过的节点从stringstream中剔除
    // 不需要再次记录已经处理到的节点在哪里
    TreeNode *helper(stringstream &ss){
        string curNode;
        ss>>curNode;
        if(curNode=="#")
            return NULL;
        TreeNode *root=new TreeNode(stoi(curNode));
        root->left=helper(ss);
        root->right=helper(ss);
        return root;
    }
};

Solution 3:
class Codec {
public:
    // 前序遍历将NULL节点也表示出来 构成序列化string 不能使用中序这样无法找到根节点
    // 空节点用#表示 用" "分隔不同节点 这样便于用stringstream获取各个节点的值
    // 只要是二叉树就可以用上述方式重构出来
    // 利用BST的性质可以不需要存储NULL 直接保存非空节点的值即可 然后比根节点的值小的即为左子树 大的为右子树
    // 利用队列保存节点值 同时利用引用可以将已经构建过的节点从队列中删去 不需要再次记录已经处理到的节点在哪里
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL)
            return "";
        return to_string(root->val)+" "+serialize(root->left)+serialize(root->right);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        queue<int> q;
        string cur;
        while(ss>>cur){
            q.push(stoi(cur));
        }
        return helper(q);
    }
private:
    TreeNode *helper(queue<int> &q){
        if(q.empty())
            return NULL;
        TreeNode *root=new TreeNode(q.front());
        q.pop();
        queue<int> leftTree;
        while(!q.empty()&&q.front()<root->val){
            leftTree.push(q.front());
            q.pop();
        }
        // q中剩下的即为右子树
        root->left=helper(leftTree);
        root->right=helper(q);
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
