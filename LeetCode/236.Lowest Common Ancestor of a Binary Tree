236. Lowest Common Ancestor of a Binary Tree
/*
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node 
in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //发现目标节点则通过返回值标记该子树发现了某个目标结点
        if(root == NULL || root == p || root == q) return root;
        //查看左子树中是否有目标结点，没有为null
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        //查看右子树是否有目标节点，没有为null
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        //都不为空，说明左右子树都有目标结点，则公共祖先就是本身
        if(left!=NULL&&right!=NULL) return root;
        //如果发现了目标节点，则继续向上标记为该目标节点
        return left == NULL ? right : left;
    }
};


update: 一样的思路 理顺一下思路 O(N)
class Solution {
public:
    /*  
        如果两个节点根节点有其中之一是root 那么LCA就是根节点
        如果不是 就要继续往左右子树搜索,有以下三种情况:
            1.两个节点分别在根节点root的左右子树 对左右子树搜索的时候会在左右子树分别找到一个节点 那么LCA就是根节点
            2、3.如果两个节点分别在根节点的左(右)子树 对左右子树搜索的时候 右(左)子树的搜索结果会是null 那么LCA就在左(右)子树中
    */
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL || root==p || root==q)
            return root;
        TreeNode *findLeft=lowestCommonAncestor(root->left,p,q);
        TreeNode *findRight=lowestCommonAncestor(root->right,p,q);
        // 左右子树各找到一个
        if(findLeft&&findRight)
            return root;
        return findLeft? findLeft:findRight;
        
    }
};
