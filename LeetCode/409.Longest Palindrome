409. Longest Palindrome

/*
Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.

This is case sensitive, for example "Aa" is not considered a palindrome here.

Note:
Assume the length of given string will not exceed 1,010.

Example:
Input:
"abccccdd"

Output:
7

Explanation:
  One longest palindrome that can be built is "dccaccd", whose length is 7.
*/

Solution 1:
class Solution {
    
public:
    static bool cmp(const int&a,const int&b){
        return a>=b;
    }
    /*
    要想是回文 那么每个字符出现的次数要是偶数以一一对应 
    或者只有一个字符出现的次数是奇数 其中一个放在正中间
    对字符出现的次数从大到小排序，选择出现次数最多的奇数字符，而后出现的奇数字符取其次数减一使其次数变为偶数
    这样保证了最大回文长度
    */
    int longestPalindrome(string s) {
        int upper[26*2]={0};
        for(int i=0;s[i]!='\0';i++)
            if(s[i]>='A'&&s[i]<='Z')
                upper[s[i]-'A']++;
            else
                upper[s[i]-'a'+26]++;
        sort(upper,upper+52,cmp);
        int palindromeSize=0;
        bool hasOdd=false;
        for(int i=0;i<52;i++)
            if(upper[i]%2==0)
                palindromeSize+=upper[i];
            else{
                if(!hasOdd){
                    palindromeSize+=upper[i];
                    hasOdd=true;
                }
                else
                    palindromeSize+=(upper[i]>0?upper[i]-1:0);
            }
        return palindromeSize;
    }
};

update:不用排序
class Solution {
public:
    /*
        要构成回文串 那么至多只有一个字符的个数是奇数放在中间 然后将其他的字符要构造成偶数个向两侧拓展
        eg,num[a]=1 num[c]=2 num[b]=3 nums[d]=5  num[e]=2
        那么可以构成的最长回文串为5个d放在中间 然后将2个c,2个b,2个e分别放在两侧 
        cbd ddddd dbc
    */
    int longestPalindrome(string s) {
        int n=s.length();
        if(n<2){
            return n;
        }
        unordered_map<char,int> cnt;
        for(auto &c:s){
            cnt[c]++;
        }
        char maxOdd='1';
        int oddCnt=0;
        //确认串中间的奇数个字符
        for(auto &pair:cnt){
            if(pair.second&1){
                if(oddCnt<pair.second){
                    oddCnt=pair.second;
                    maxOdd=pair.first;
                }
            }
        }
        int res=0;
        for(auto &pair:cnt){
            if(pair.second&1){
                if(pair.first==maxOdd){
                    res+=pair.second;  
                }
                else{
                    //只能有一个奇数个 其他的出现奇数次的字符要进行删减使其有偶数个字符分别放在两侧
                    res+=pair.second-1;
                }
            }
            else{
                res+=pair.second;
            }
        }
        return res;
    }
};

update:
class Solution {
public:
    /*
        可以构成回文串的两种情况：
        1.aaab|baaa 长度为偶数 两两对称 
        2.aaabaaa   长度为奇数,关于中间字符对称 只有中轴字符的个数为奇数其余都为偶数
        
    */
    int longestPalindrome(string s) {
        unordered_map<char,int> cntMap;
        for(auto &c:s)
            cntMap[c]++;
        int maxLen=0;
        bool hasOdd=false;
        for(auto&m:cntMap){
            if(m.second&1){
                hasOdd=true;
                maxLen+=m.second-1;//先加上偶数部分
            }
            else
                maxLen+=m.second;
        }
        if(hasOdd)
            maxLen++;//加上一个奇数字符 构成最长字符
        return maxLen;
    }
};
