7. Reverse Integer
/*
    Reverse digits of an integer.

    Example1: x = 123, return 321
    Example2: x = -123, return -321
    Example3: x = 120,return 21
Note:
    Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. 
    For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

Solution:
class Solution {
public:
    int reverse(int x) {
        long reverseNum=0;
        while(x!=0){   
            reverseNum=reverseNum*10+(x%10);
            if(reverseNum>INT_MAX||reverseNum<INT_MIN)
                return 0;
            x/=10;
        }
        return reverseNum;
    }
};

Solution 2:
class Solution {
public:
    // follow up不使用long
    int reverse(int x) {
        int res=0,update,tail;
        while(x){
            tail=x%10;
            update=res*10+tail;
            if((update-tail)/10!=res)
                return 0;
            res=update;
            x/=10;
        }
        return res;
    }
};

Solution 3:
class Solution {
public:
    int reverse(int x) {
        int res=0,tail;
        bool isPositive=x>0;
        //x==0不会进入循环 isPostive对其没有影响
        while(x){
            tail=x%10;
            if(isPositive){
                if(res>INT_MAX/10||res==INT_MAX/10&&tail>7)
                    return 0;
            }else{
                if(res<INT_MIN/10||res==INT_MIN/10&&tail>8)
                    return 0;
            }
            res=res*10+tail;
            x/=10;
        }
        return res;
    }
};
