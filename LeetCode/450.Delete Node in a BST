450. Delete Node in a BST

/*
Given a root node reference of a BST and a key, delete the node with the given key in the BST. 
Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

Example:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    1. 如果要删除的节点有左孩子, 则可以直接让左孩子替换其位置, 并且让左孩子的右子树连接到要删除节点的右孩子的最左端
    2. 如果要删除的节点有右孩子, 则可以让右孩子替换其位置, 并且让右孩子的左子树连接到要删除节点的左孩子的最右端
    3. 如果要删除的节点有左孩子, 则可以取左孩子的最右节点替换要删除的节点
    4. 如果要删除的节点有右孩子, 则可以去右孩子的最左节点替换要删除的节点.
    */
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;  
        if(root->val > key){  
            root->left = deleteNode(root->left, key);  
            return root;  
        }  
        else if(root->val < key){  
            root->right = deleteNode(root->right, key);  
            return root;  
        }  
        TreeNode* left = root->left, *right = root->right, *tem = left;  
        delete root;  
        if(!left || !right) return left?left: right;  
        while(tem->right) tem = tem->right;  
        tem->right = right->left, right->left = left;  
        return right;  
    }
};
