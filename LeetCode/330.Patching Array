330. Patching Array

/*
Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.

Example 1:
nums = [1, 3], n = 6
Return 1.

Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

Example 2:
nums = [1, 5, 10], n = 20
Return 2.
The two patches can be [2, 4].

Example 3:
nums = [1, 2, 2], n = 5
Return 0.
*/

Solution:
class Solution {
public:
    /*
        定义一个变量miss,用来表示[0,n]之间最小的不能表示的值,初始化为1,此时我们能表示的范围是[0, miss),表示此时我们能表示0到miss-1的数
        如果此时的num <= miss,那么我们可以把我们能表示数的范围扩大到[0, miss+num)
        如果num>miss,那么此时我们需要添加一个数,为了能最大限度的增加表示数范围,加上miss它本身,
        以此类推直至遍历完整个数组
    */
    int minPatches(vector<int>& nums, int n) {
        long res=0,miss=1,i=0;
        while(miss<=n){
            //扩展可表示数的范围
            if(i<nums.size()&&nums[i]<=miss)
                miss+=nums[i++];
            else{
                //加入一个数miss
                res++;
                miss+=miss;
            }
        }
        return res;
    }
};
