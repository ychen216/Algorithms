352. Data Stream as Disjoint Intervals
/*
Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:
[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]
Follow up:
  What if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?
*/

Solution:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class SummaryRanges {
public:
    /*
        这道题说有个数据流每次提供一个数字,然后让我们组成一系列分离的区间,这道题跟之前那道Insert Interval很像,思路也很像
        每进来一个新的数字val,我们都生成一个新的区间[val, val],然后将其插入到当前的区间里,注意分情况讨论,无重叠,相邻,和有重叠分开讨论处理
    */
    /** Initialize your data structure here. */
    SummaryRanges() {
        
    }
    
    //保持v中的Interval按照区间坐标 从左到右排列
    void addNum(int val) {
        Interval cur(val,val);//要插入的的新区间
        vector<Interval> res;
        int pos=0;//新区间插入的位置
        for(auto &in:v){
            //当前区间在in之前
            if(cur.end+1<in.start)
                res.push_back(in);
            else if(cur.start>in.end+1){
                res.push_back(in);
                pos++;
            }else{
                //区间有重叠或相邻的情况
                cur.start=min(cur.start,in.start);
                cur.end=max(cur.end,in.end);
            }
        }
        res.insert(res.begin()+pos,cur);
        v=res;
    }
    
    vector<Interval> getIntervals() {
        return v;
    }
private:
    vector<Interval> v;
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * vector<Interval> param_2 = obj.getIntervals();
 */
