24. Swap Nodes in Pairs

/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

*/

Solution 1: recursive
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //recursive
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL||head->next==NULL)
            return head;
        ListNode *node=head->next;
        head->next=swapPairs(head->next->next);
        node->next=head;
        return node;
    }
};

Solution 2:
class Solution {
public:
    /*  两个指针 https://leetcode.com/problems/swap-nodes-in-pairs/discuss/11046/My-simple-JAVA-solution-for-share
        windliang的解释
    */
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL)
            return NULL;
        ListNode *feakHead=new ListNode(0);
        feakHead->next=head;
        ListNode *cur=feakHead;
        while(cur->next && cur->next->next){
            ListNode *swap1=cur->next;
            ListNode *swap2=cur->next->next;
            cur->next=swap2;
            swap1->next=swap2->next;
            swap2->next=swap1;
            cur=swap1;
        }
        return feakHead->next;
        
    }
};

update:
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL||head->next==NULL){
            return head;
        }
        ListNode *feakHead=new ListNode(0);
        feakHead->next=head;
        ListNode *cur=feakHead;
        while(head!=NULL&&head->next!=NULL){
            ListNode *first=head;
            head=head->next->next;
            cur->next=first->next;
            cur->next->next=first;
            first->next=head;
            cur=cur->next->next;
        }
        return feakHead->next;
    }
};
