454. 4Sum II
/*
Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. 
All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.

Example:

Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]
Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
*/

Solution:
class Solution {
public:
    //将暴力的四层循环降为两层 A[i] + B[j]=-(C[k] + D[l])
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        int len=A.size();
        map<int,int> sumCnt;
        int sum;
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
                sum=A[i]+B[j];
                if(sumCnt.count(sum))
                    sumCnt[sum]++;
                else
                    sumCnt[sum]=1;
            }
        }
        int res=0;    
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
                sum=-(C[i]+D[j]);
                if(sumCnt.count(sum))
                    res+=sumCnt[sum];
            }
        }
        return res;
    }
};
