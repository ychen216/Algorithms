848. Shifting Letters

/*
We have a string S of lowercase letters, and an integer array shifts.

Call the shift of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). 

For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.

Now for each shifts[i] = x, we want to shift the first i+1 letters of S, x times.

Return the final string after all such shifts to S are applied.

Example 1:
Input: S = "abc", shifts = [3,5,9]
Output: "rpl"
Explanation: 
We start with "abc".
After shifting the first 1 letters of S by 3, we have "dbc".
After shifting the first 2 letters of S by 5, we have "igc".
After shifting the first 3 letters of S by 9, we have "rpl", the answer.

Note:
  1 <= S.length = shifts.length <= 20000
  0 <= shifts[i] <= 10 ^ 9
*/

/*
主要考察两个点 一个是要先求余 不能累加后求余(累加操作造成溢出) 同余操作 (a+b)%c=[(a%c)+(b%c)]%c
一个是逆序计算每个字符shift的次数 从O(N^2)-->O(N)
*/
Solution 1:TEL
class Solution {
public:
    string shiftingLetters(string S, vector<int>& shifts) {
        int n=S.length();
        // 记录第i个字符总共要shift几次
        // 注意求余操作 否则累加起来求余 会因为溢出 导致结果出错
        for(int i=0;i<n;i++){
            shifts[i]%=26;
            for(int j=0;j<i;j++){
                shifts[j]+=shifts[i];
                shifts[j]%=26;
            }
        }
        for(int i=0;i<n;i++){
            S[i]=(S[i]-'a'+shifts[i])%26 + 'a';
        }
        return S;
    }
};

update: AC
class Solution {
public:
    string shiftingLetters(string S, vector<int>& shifts) {
        int n=S.length();
        // 记录第i个字符总共要shift几次
        // 注意求余操作 否则累加起来求余 会因为溢出 导致结果出错
        // 逆序累加降低复杂度
        shifts[n-1]%=26;
        for(int i=n-2;i>=0;i--){
            shifts[i]%=26;
            shifts[i]+=shifts[i+1];
            shifts[i]%=26;
        }
        for(int i=0;i<n;i++){
            S[i]=(S[i]-'a'+shifts[i])%26 + 'a';
        }
        return S;
    }
};
