1. Two Sum

/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/

Solution 1: 排序
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
        vector<pair<int,int>> num2Index;
        for(int i=0;i<n;i++){
            num2Index.push_back({nums[i],i});
        }
        sort(num2Index.begin(),num2Index.end());
        int low=0,high=n-1;
        while(low<high){
            if(num2Index[low].first+num2Index[high].first==target){
                return {num2Index[low].second,num2Index[high].second};
            }
            else if(num2Index[low].first+num2Index[high].first<target){
                low++;
            }
            else{
                high--;
            }
        }
        return {};
    }
};

Solution 2:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> m;//记录x最后出现的位置
        int size=nums.size();
        for(int i=0;i<size;i++)
            m[nums[i]]=i;
        for(int i=0;i<size;i++){
            if(m.count(target-nums[i])==1&&m[target-nums[i]]!=i)//两个数必须是不同的
                return {i,m[target-nums[i]]};
        }
        return {};
    }
};


Solution 3:
class Solution {
public:
    // 利用map
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> mmp;//{num,index}记录目前出现过的所有num对应的下标
        int left;
        for(int i=0;i<nums.size();i++){
            left=target-nums[i];
            if(mmp.find(left)!=mmp.end())
                return {mmp[left],i};
            else
                mmp[nums[i]]=i;
        }
        return {-1,-1};
    }
};
