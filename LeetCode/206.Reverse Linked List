206. Reverse Linked List
/*
Reverse a singly linked list.
*/
Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //采用头插法
    ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        ListNode *fakeHead=new ListNode(0);
        fakeHead->next=head;
        ListNode *cur=head->next,*temp=NULL;
        head->next=NULL;//头指针变为最后一个节点 处理其next指针
        while(cur){
            temp=cur->next;
            cur->next=fakeHead->next;
            fakeHead->next=cur;
            cur=temp;
        }
        return fakeHead->next;
    }
};

// 头插法
    ListNode* reverseList(ListNode* head) {
        ListNode *feakNode=new ListNode(0);
        ListNode *cur=head,*temp=NULL;
        while(cur){
            temp=feakNode->next;
            feakNode->next=cur;
            cur=cur->next;
            feakNode->next->next=temp;
        }
        return feakNode->next;
    }
    
Solution 2:recursive
class Solution {
public:
    // recursive
    ListNode* reverseList(ListNode* head) {
       if(head==NULL)
           return NULL;
        if(head->next==NULL)
            return head;
        ListNode *newHead=reverseList(head->next);
        head->next->next=head;
        head->next=NULL;
        return newHead;
    }
};
