122. Best Time to Buy and Sell Stock II

/*
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like
(ie, buy one and sell one share of the stock multiple times).
However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

Solution 1:
class Solution {
public:    
    /*
    可以无限次买卖 那么希望将所有有增幅的股票买入
     suppose the first sequence is "a <= b <= c <= d", the profit is "d - a = (b - a) + (c - b) + (d - c)" without a doubt.
     And suppose another one is "a <= b >= b' <= c <= d", the profit is not difficult to be figured out as "(b - a) + (d - b')"
    */
    int maxProfit(vector<int>& prices) {
        int size=prices.size();
        int profit=0;
      
        for(int i=1;i<size;i++){
            if(prices[i]>prices[i-1])
                profit+=prices[i]-prices[i-1];
        }
        
        return profit;
        
    }
};

update:还是上面的方法更加直观 这个方法是看了LeetCode的Solution2
class Solution {
public:
    // 参考Solution2 把所有的上升沿(valley-->peak) 加入
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        if(n<2)
            return 0;
        int profit=0;
        int valley=prices[0],peak=prices[0];
        int i=0;
        //n-1是因为内部的操作都需要与i+1比较避免i+1越界
        while(i<n-1){
            while(i<n-1&&prices[i]>=prices[i+1]){
                i++;
            }
            valley=prices[i];
            while(i<n-1&&prices[i]<prices[i+1]){
                i++;
            }
            peak=prices[i];
            profit+=peak-valley;
        }
        return profit;
    }
};


Solution 2:
class Solution {
public:
    // 每一天都只有持有或售出两种状态
    int maxProfit(vector<int>& prices) {
        if(prices.size()<2)
            return 0;
        int presell=0,prebuy=-prices[0],buy,sell;
        for(int i=1;i<prices.size();i++){
            buy=max(prebuy,presell-prices[i]);
            sell=max(prebuy+prices[i],presell);
            presell=sell;
            prebuy=buy;
        }
        return max(buy,sell);
    }
};

update: 最后一天后 没有持有股票的时候必定是收益最多的 如果还持有股票相当于永远烂在手上没有卖出去的一天
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        if(n==0)
            return 0;
        int sell=0,buy=-prices[0],tmp;
        for(int i=1;i<n;i++){
            tmp=sell;
            sell=max(sell,buy+prices[i]);
            buy=max(buy,tmp-prices[i]);
        }
        return sell;
    }
};
