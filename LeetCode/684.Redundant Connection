684. Redundant Connection

/*
In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional 
edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that 
represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers,
return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:
The size of the input 2D-array will be between 3 and 1000.
Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.
*/

Solution: 9ms
class Solution {
public:
    //Union Find 加入一条边形成环的 必然是已经在同一个UnionSet中的 也就是有相同的父节点
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n=edges.size();
        int parent[n+1];
        for(int i=1;i<=n;i++)
            parent[i]=i;
        for(auto &edge:edges){
            int u=edge[0],v=edge[1];
            int pu=findParent(u,parent),pv=findParent(v,parent);
            if(pu==pv)
                return edge;
            else
                parent[pu]=pv;
        }
    }
    
    int findParent(int x,int *parent){
        if(x!=parent[x])
            parent[x]=findParent(parent[x],parent);
        return parent[x];
    }
};

update: 4ms 依旧是并查集 
class Solution {
public:
    // 利用并查集 n个结点的树 n条边 必然有一条冗余的
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n=edges.size();
        vector<int> parent(n+1,0);
        // 初始化每一个节点的父节点
        for(int i=1;i<=n;i++)
            parent[i]=i;
        vector<int> remove(2,0);
        for(auto &edge: edges){
            int u=edge[0], v=edge[1];
            int pu=findParent(parent,u);
            int pv=findParent(parent,v);
            if(pu==pv){
                remove[0]=u;
                remove[1]=v;
            }
            parent[pu]=pv;
        }
        return remove;
    }
private:
    int findParent(vector<int>& p,int u){
        return p[u]==u ? u : p[u]=findParent(p, p[u]);
    }
};
