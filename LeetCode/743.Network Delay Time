743. Network Delay Time
/*
There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

Note:
  N will be in the range [1, 100].
  K will be in the range [1, N].
  The length of times will be in the range [1, 6000].
  All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 1 <= w <= 100.
*/

Solution:
class Solution {
public:
    //转化为单源最短路径
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        vector<vector<int>> graph(N+1,vector<int>(N+1));
        vector<int> cost(N+1,INT_MAX);
        for(int i=1;i<=N;i++){
            for(int j=1;j<=N;j++){
                if(i==j)
                    graph[i][j]=0;
                else
                    graph[i][j]=INT_MAX;
            }
        }
        for(auto &edge:times){
            graph[edge[0]][edge[1]]=edge[2];
        }
    
        return Dijkstra(K,cost,graph);
    }
    int Dijkstra(int s,vector<int> &cost,vector<vector<int>>& graph){
        cost[s]=0;
        int N=cost.size()-1;
        bool visit[N+1]={0};
        int maxTime=INT_MIN;
        int t=1;
        while(t<=N){
            int id=-1,minD=INT_MAX;
            for(int i=1;i<=N;i++){
                if(!visit[i]&&cost[i]!=INT_MAX&&cost[i]<minD){
                    minD=cost[i];
                    id=i;
                }
            }
            //不连通
            if(id==-1)
                return -1;
            visit[id]=1;
            //cout<<id<<" "<<cost[id]<<endl;
            maxTime=max(maxTime,cost[id]);
            //更新
            for(int j=1;j<=N;j++){
                if(!visit[j]&&graph[id][j]!=INT_MAX)
                    cost[j]=min(cost[j],cost[id]+graph[id][j]);            
            }
            t++;
        }
        return maxTime;
    }
};
