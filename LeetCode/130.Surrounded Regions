130. Surrounded Regions
/*
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
*/

Solution:
class Solution {
public:
    /*
    将完全被X包围的O区域翻转成X
    从矩形最外面一圈开始逐渐向里拓展。 
    若 O 是在矩形最外圈，它肯定不会被 X 包围，与它相连（邻）的 O 也就不可能被 X 包围，也就不会被替换，所以我们的工作主要是找出： 
    1. 最外圈的 O 
    2. 与最外圈的 O 相连的 O 
    3. 将上述找到的元素替换为某种标识符，如“#” 
    4. 最后按先行后列的顺序遍历矩形，找到没有被替换为 O 的元素，它们就是被 X 完全包围的需要被替换为 X 的元素；
    同时，标记为 # 的元素是没有被 X 包围的元素，此时将它们变回原来的 O
    */
    void solve(vector<vector<char>>& board) {
        int row=board.size();
        if(row==0)
            return;
        int col=board[0].size();
        if(col==0)
            return;
        //遍历第一行和最后一行的每一列
        for(int c=0;c<col;c++){
            check(board,0,c,row,col);
            if(row>1)
                check(board,row-1,c,row,col);
        }
        //遍历每一行的第一列和最后一列
        for(int r=1;r+1<row;r++){
            check(board,r,0,row,col);
            if(col>1)
                check(board,r,col-1,row,col);
        }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='#')
                    board[i][j]='O';
            }
        }
    }
    
    void check(vector<vector<char>>&board,int i,int j,int row,int col){
        if(board[i][j]=='O'){
            board[i][j]='#';
            //UP
            if(i>0)
                check(board,i-1,j,row,col);
            //DOWN
            if(i+1<row)
                check(board,i+1,j,row,col);
            //LEFT
            if(j>0)
                check(board,i,j-1,row,col);
            //RIGHT
            if(j+1<col)
                check(board,i,j+1,row,col);
        }
    }
};
