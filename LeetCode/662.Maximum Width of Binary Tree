662. Maximum Width of Binary Tree

/*
Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width 
among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level,
where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:
Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:
Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:
Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:
Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Note: Answer will in the range of 32-bit signed integer.
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    We know that a binary tree can be represented by an array (assume the root begins from the position with index 1 in the array).
    If the index of a node is i, the indices of its two children are 2*i and 2*i + 1. The idea is to use two arrays (start[] and end[]) to 
    record the the indices of the leftmost node and rightmost node in each level, respectively. For each level of the tree, the width is 
    end[level] - start[level] + 1. Then, we just need to find the maximum width.
    */
    int widthOfBinaryTree(TreeNode* root) {
        return dfs(root,0,1,vector<int>()={},vector<int>()={});
    }
    
    int dfs(TreeNode *root,int depth,int pos,vector<int>&leftmost,vector<int>&rightmost){
        if(root==NULL)
            return 0;
        if(depth==leftmost.size()){
            //深度/层数为depth的第一个节点
            leftmost.push_back(pos);
            rightmost.push_back(pos);
        }
        else
            rightmost[depth]=pos;
        int left=dfs(root->left,depth+1,pos*2,leftmost,rightmost);
        int right=dfs(root->right,depth+1,pos*2+1,leftmost,rightmost);
        return max(rightmost[depth]-leftmost[depth]+1,max(left,right));
    }
};


Solution 2：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    相同思路利用节点i的孩子标号为2*i和2*i+1 利用bfs 
    */
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        queue<pair<TreeNode*,int>>q;
        int maxWidth=1;
        q.push({root,1});
        while(!q.empty()){
            //对每一层最左边的节点进行操作,记录mostleft mostright
            pair<TreeNode *,int> node=q.front();
            q.pop();
            int size=q.size();
            int mostleft=node.second,mostright=node.second;
            if(node.first->left)q.push({node.first->left,node.second*2});
            if(node.first->right)q.push({node.first->right,node.second*2+1});
            for(int i=0;i<size;i++){
                node=q.front();
                q.pop();
                mostright=node.second;
                if(node.first->left)q.push({node.first->left,node.second*2});
                if(node.first->right)q.push({node.first->right,node.second*2+1});
            }
            maxWidth=max(maxWidth,mostright-mostleft+1);
        }
        return maxWidth;
    }
    
};
update:

class Solution {
public:
    // BFS
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)
            return 0;
        int maxWidth=0;
        queue<pair<TreeNode *,int>> q; // node,id
        q.push({root,1});
        // cur id=x 则 cur的左孩子id 2*x 右孩子 2*x+1
        while(!q.empty()){
            int size=q.size();
            int firstId,lastId;
            for(int i=0;i<size;i++){
                auto cur=q.front();
                q.pop();
                if(i==0)
                    firstId=cur.second;
                if(i==size-1)
                    lastId=cur.second;
                if(cur.first->left)
                    q.push({cur.first->left,cur.second*2});
                if(cur.first->right)
                    q.push({cur.first->right,cur.second*2+1});
            }
            maxWidth=max(maxWidth,lastId-firstId+1);
        }
        return maxWidth;
    }
};
