794. Valid Tic-Tac-Toe State

/*
A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The board is a 3 x 3 array, and consists of characters " ", "X", and "O".  The " " character represents an empty square.

Here are the rules of Tic-Tac-Toe:

Players take turns placing characters into empty squares (" ").
The first player always places "X" characters, while the second player always places "O" characters.
"X" and "O" characters are always placed into empty squares, never filled ones.
The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Example 1:
Input: board = ["O  ", "   ", "   "]
Output: false
Explanation: The first player always plays "X".

Example 2:
Input: board = ["XOX", " X ", "   "]
Output: false
Explanation: Players take turns making moves.

Example 3:
Input: board = ["XXX", "   ", "OOO"]
Output: false

Example 4:
Input: board = ["XOX", "O O", "XOX"]
Output: true
Note:
  board is a length-3 array of strings, where each string board[i] has length 3.
  Each board[i][j] is a character in the set {" ", "X", "O"}.
*/

Solution 1:
class Solution {
public:
    /*
        When turns is 1, X moved. When turns is 0, O moved. rows stores the number of X or O in each row.
        cols stores the number of X or O in each column. diag stores the number of X or O in diagonal. 
        antidiag stores the number of X or O in antidiagonal. When any of the value gets to 3, it means X wins.
        When any of the value gets to -3, it means O wins.
        When X wins, O cannot move anymore, so turns must be 1. When O wins, X cannot move anymore, so turns must be 0.
        Finally, when we return, turns must be either 0 or 1, and X and O cannot win at same time.
    */
    bool validTicTacToe(vector<string>& board) {
        int turns = 0;
        bool xwin = false; 
        bool owin = false;
        vector<int> rows(3,0);
        vector<int> cols(3,0);
        int diag = 0;
        int antidiag = 0;
				
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    turns++; rows[i]++; cols[j]++;
                    if (i == j) diag++;
                    if (i + j == 2) antidiag++;
                } else if (board[i][j]== 'O') {
                    turns--; rows[i]--; cols[j]--;
                    if (i == j) diag--;
                    if (i + j == 2) antidiag--;
                }
            }
        }
		
        xwin = rows[0] == 3 || rows[1] == 3 || rows[2] == 3 || 
               cols[0] == 3 || cols[1] == 3 || cols[2] == 3 || 
               diag == 3 || antidiag == 3;
        owin = rows[0] == -3 || rows[1] == -3 || rows[2] == -3 || 
               cols[0] == -3 || cols[1] == -3 || cols[2] == -3 || 
               diag == -3 || antidiag == -3;
        
        if (xwin && turns == 0 || owin && turns == 1) {
            return false;
        }
        return (turns == 0 || turns == 1) && (!xwin || !owin);
    }
};

Solution 2：
class Solution {
public:
    /*
       straightforward
       计算X,O的个数 如果legal必然有cntx==cnto||cntx==cnto+1
       如果X,O的个数合法 则检验是否有一方获胜 获胜的状态是否合法
       若无人获胜且X,O个数合法 那么状态合法
    */
    bool validTicTacToe(vector<string>& board) {
        int cntx=0,cnto=0;
        for(int i=0;i<3;i++)
            for(int j=0;j<3;j++){
                if(board[i][j]==' ')continue;
                board[i][j]=='X'?cntx++:cnto++;
            }
        // X,O个数是否合法
        if(cntx!=cnto&&cntx!=cnto+1)return false;
        if(checkWin(board,'X')&&cntx!=cnto+1)return false;//X获胜不合法的状态
        if(checkWin(board,'O')&&cntx!=cnto)return false;//O获胜不合法的状态
        return true;
    }

private:
    //判断ch是否获胜
    bool checkWin(vector<string>&board,char ch){
        //对角
        if(board[1][1]==ch){
            if(board[0][0]==ch&&board[2][2]==ch)return true;
            if(board[0][2]==ch&&board[2][0]==ch)return true;
        }
        //行
        for(int i=0;i<3;i++){
            if(board[i][0]==ch){
                if(board[i][1]==ch&&board[i][2]==ch)return true;
            }
        }
        //列
        for(int j=0;j<3;j++){
            if(board[0][j]==ch){
                if(board[1][j]==ch&&board[2][j]==ch)return true;
            }
        }
        return false;
    }
};
