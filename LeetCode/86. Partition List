86. Partition List

/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //分别用两个指针指向小于x的链和 大于等于x的链
    ListNode* partition(ListNode* head, int x) {
        ListNode *headsmall=new ListNode(0),*headbig=new ListNode(0);
        ListNode *ps=headsmall,*pb=headbig;
        while(head){
            if(head->val<x){
                ps->next=head;
                ps=ps->next;
            }
            else{
                pb->next=head;
                pb=pb->next;
            }
            head=head->next;
        }
        pb->next=NULL;
        ps->next=headbig->next;
        return headsmall->next;
    }
};
