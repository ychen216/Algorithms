86. Partition List

/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    // 设置两个链表 一个记录num<x的元素 一个记录num>=x的元素 然后拼接起来可以保证相对顺序
    ListNode* partition(ListNode* head, int x) {
        ListNode *lessHead=new ListNode(0), *biggerHead=new ListNode(0);
        ListNode *cur=head;
        ListNode *p=lessHead,*q=biggerHead;
        while(cur){
            if(cur->val<x){
                p->next=cur;
                p=p->next;
            }else{
                q->next=cur;
                q=q->next;
            }
            cur=cur->next;
        }
        // 拼接两个链表 注意要处理biggerList的最后一个节点 next置为NULL
        q->next=NULL;
        p->next=biggerHead->next;
        return lessHead->next;
    }
};
