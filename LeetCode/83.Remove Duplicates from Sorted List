83.Remove Duplicates from Sorted List

/*
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
  Given 1->1->2, return 1->2.
  Given 1->1->2->3->3, return 1->2->3.
*/

Solution 1:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head){
            int preVal=head->val;
            ListNode *pre=head;
            ListNode *cur=head->next;
            while(cur){
                if(cur->val==preVal)
                    pre->next=cur->next;
                else{
                    preVal=cur->val;
                    pre=cur;
                }
                cur=cur->next;
            }
        }
        return head;
    }
};


Solution 2:
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head){
            ListNode *pre=NULL;
            ListNode *cur=head;
            while(cur){
                if(pre!=NULL&&pre->val==cur->val){
                    pre->next=cur->next;
                }
                else{
                    pre=cur;
                }
                cur=cur->next;
            }
        }
        return head;
    }
};


Solution 3:
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head||!head->next){
            return head;
        }
        ListNode *feakHead=new ListNode(0);;
        ListNode *cur=feakHead,*p=head;
        //cur是指向已经确定的不重复链的最后一个节点
        while(p){
            if(cur->next==NULL||p->val!=cur->val){
                cur->next=p;
                cur=cur->next;
            }
            p=p->next;
        }
        cur->next=NULL;
        return feakHead->next;
    }
};
