659. Split Array into Consecutive Subsequences

/*
You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences,
where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.

Example 1:
Input: [1,2,3,3,4,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5
Example 2:
Input: [1,2,3,3,4,4,5,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5
Example 3:
Input: [1,2,3,4,4,5]
Output: False
Note:
The length of the input is in range of [1, 10000]

*/

Solution:
class Solution {
public:
    /*
    一个数要么加到一个已经形成的队列里，要么新开辟一个队列
   如果再加到已经形成的队列的element的个数超过3个，就一定能形成新的队列
   而如果少于3个，就只能加到原有队列，所以是优先加到已经形成的队列
   如果都不行就说明不能形成，return false
   前提是数组是有序的
    */
    bool isPossible(vector<int>& nums) {
        unordered_map<int,int>unuse_freq,need_freq;//每个数字还未使用的次数,在已有的队列中需要的数字个数
        for(auto &n:nums)
            unuse_freq[n]=unuse_freq.count(n)?unuse_freq[n]+1:1;
        for(auto &n:nums){
            if(unuse_freq[n]==0)continue;//已经用完
            //加入已有队列
            if(need_freq.count(n)&&need_freq[n]>0){
                need_freq[n]--;
                need_freq[n+1]=need_freq.count(n+1)?need_freq[n+1]+1:1;
            }//新建一个队列
            else if(unuse_freq.count(n+1)&&unuse_freq[n+1]>0
                     &&unuse_freq.count(n+2)&&unuse_freq[n+2]>0){
                unuse_freq[n+1]--;
                unuse_freq[n+2]--;
                need_freq[n+3]=need_freq.count(n+3)?need_freq[n+3]+1:1;
            }
            else
                return false;
            unuse_freq[n]--;
        }
        return true;
    }
};
same idea 
class Solution {
public:
    /*
        判断一个不递减数组(可能包含重复元素)能否被分割成1个或是几个 连续递增的子序列 要求子序列的长度>=3且是连续的
        满足要求的 数组eg.[1,2,3,4,5]可以分成1个长度为5的连续递增序列 [1,2,3,3,4,5]--> 1,2,3 3,4,5
        那么分析一下做法 由于原数组是不递减的 那么碰上一个元素num 只有两种情况 符合要求:
            1. 将num加入到一个已有序列的末尾
            2. 以num为一个新序列的起始元素
        如果一个数x可以构造以上两种情况的话，我们优先构造第一种，因为如果以x为首可以构造出一个连续序列seq
        那么seq必然能够接续到情况1中的队列末尾,构成满足要求的更长的连续序列，更保险
        eg.已有队列是[1,2] 现在还有数字[3,4]那么对于3来说他可以放在[1,2]后面，先构成[1,2,3]最后构建为[1,2,3,4];
        也可以新开启一个队列[3]最后形成队列[3,4],[1,2]，那么这种情况下，两个序列长度<3，其实可以将[3,4]连接到[1,2]后面构成[1,2,3,4]，构成更长的合法序列
        即使新队列最后的长度是>=3的合法序列，我们将其连接要已有队列的末尾也是合法的。
        
        利用两个map 一个map记录num出现的次数 
        另一个map need维护当前已有的子序列期望的下一个元素的个数 
        eg 已有的子序列有 [1,2,3] 那么need[4]=1 已有子序列[1,2,3,4] need[5]=1 
        已有子序列 [1,2,3] [0,1,2,3] need[4]=2 如果加入一个4 --> [1,2,3,4] [0,1,2,3] 那么need[4]=1 need[5]=1
        
    */
    bool isPossible(vector<int>& nums) {
        unordered_map<int,int> count, need;
        for(auto &num:nums)
            count[num]++;
        for(auto &num:nums){
            if(count[num]==0) continue;
            // 加入到已有序列后面
            if(need.find(num)!=need.end()&&need[num]>0){
                need[num]--;
                need[num+1]=need[num+1]+1;
            } // 作为新序列的起始元素 要保证至少有3个连续的元素
            else if(count.find(num+1)!=count.end() && count[num+1]>0 
                    && count.find(num+2)!=count.end()&&count[num+2]>0){
                count[num+1]--;
                count[num+2]--;
                need[num+3]++;
            }
            else
                return false;
            count[num]--;
        }
        return true;
    }
};
