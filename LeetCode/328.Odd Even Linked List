328. Odd Even Linked List

/*
Given a singly linked list, group all odd nodes together followed by the even nodes. 
Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.

Note:
The relative order inside both the even and odd groups should remain as it was in the input. 
The first node is considered odd, the second node even and so on ...
*/

Solution 1:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head!=NULL&&head->next!=NULL){
            ListNode *odd=head,*even=head->next,*evenhead=even;//evenhead记录偶节点链的头结点
            while(even&&even->next){
                odd->next=even->next;
                even->next=even->next->next;
                odd=odd->next;
                even=even->next;
            }
            odd->next=evenhead;
            return head;
        }
        return head;
    }
};


Solution 2:
class Solution {
public:
    /*
        odd node和even node单独成串 然后拼接起来
    */
    ListNode* oddEvenList(ListNode* head) {
        if(!head)
            return NULL;
        // 至少一个节点
        ListNode *oddHead=new ListNode(0);
        ListNode *evenHead=new ListNode(0);
        ListNode *curOdd=oddHead,*curEven=evenHead;
        while(head){
            curOdd->next=head;
            curOdd=curOdd->next;
            head=head->next;
            curOdd->next=NULL; //重新链接最后一个node
            if(head){
                curEven->next=head;
                curEven=curEven->next;
                head=head->next;
                curEven->next=NULL;//重置最后一个node    
            }
        }
        // odd even list link
        curOdd->next=evenHead->next;
        return oddHead->next;
    }
};

update:
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        // 少于3个节点时 不需要转换
        if(!head||!head->next||!head->next->next)
            return head;
        ListNode* oddHead=new ListNode(0);
        ListNode* evenHead=new ListNode(0);
        ListNode* cur=head, *p1=oddHead, *p2=evenHead;
        while(cur){
            p1->next=cur;
            p1=p1->next;
            cur=cur->next;
            if(cur){
                p2->next=cur;
                p2=p2->next;
                cur=cur->next;
            }
        }
        // 处理两个链表的尾巴
        p1->next=evenHead->next;
        p2->next=NULL;
        return oddHead->next;
    }
};
