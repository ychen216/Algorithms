322. Coin Change
/*
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
coins = [1, 2, 5], amount = 11
return 3 (11 = 5 + 5 + 1)

Example 2:
coins = [2], amount = 3
return -1.

Note:
You may assume that you have an infinite number of each kind of coin.
*/
Solution:
class Solution {
public:
    //完全背包 dp[x]=min(dp[x],dp[x-coins[i]]+1) if coins[i]<=x&&dp[x-coins[i]] can be change
    int coinChange(vector<int>& coins, int amount) {
        if(amount<0)
            return -1;
        int size=coins.size();
        vector<int> dp(amount+1,INT_MAX);
        dp[0]=0;
        for(int i=0;i<size;i++){
            for(int C=coins[i];C<=amount;C++){
                if(dp[C-coins[i]]!=INT_MAX)
                    dp[C]=min(dp[C],dp[C-coins[i]]+1);
            }
        }
        return dp[amount]==INT_MAX?-1:dp[amount];
    }
};

Solution 2: memorized dfs
class Solution {
public:
    //完全背包
    unordered_map<int,int> dp;
    int coinChange(vector<int>& coins, int amount) {
        if(amount<0)
            return -1;
        if(amount==0)
            return 0;
        if(dp.find(amount)!=dp.end())
            return dp[amount];
        int minExchange=INT_MAX;
        for(auto &coin:coins){
            if(coin>amount) continue;
            int exchange=coinChange(coins,amount-coin);
            if(exchange>=0)
                minExchange=min(minExchange,exchange+1);
        }
        minExchange==INT_MAX?dp[amount]=-1:dp[amount]=minExchange;
        return dp[amount];
    }
};
