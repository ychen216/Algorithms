75. Sort Colors
/*
Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, 
with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note:
You are not suppose to use the library's sort function for this problem.
*/

Solution 1:

class Solution {
public:
    // bucket sort O(n)
    void sortColors(vector<int>& nums) {
        int cnt[3]={0};
        for(auto n:nums)
            cnt[n]++;
        int i=0;
        for(int n=0;n<3;n++){
            while(cnt[n]-->0)
                nums[i++]=n;
        }
    }
};

Solution 2:
class Solution {
public:
    // 利用双指针 将0放在数组左侧 2放在数组右侧 1留在中间
    void sortColors(vector<int>& nums) {
        int p0=0,p2=nums.size()-1; //初始化遇到0,2应该放的位置
        for(int i=0;i<nums.size();i++){
            // 必须用循环不能用if 
            // 因为p2处可能本来就是2
            // 交换以后把nums[p2]==2放在了i处 需要把i处这个2再放在左右侧
            // 且必须先检查2 再检查0 不然出错 eg[1,2,0]
            while(i<p2 && nums[i]==2)
                swap(nums[i],nums[p2--]);
            while(p0<i && nums[i]==0)
                swap(nums[i],nums[p0++]);
            
        }
    }
};


Solution 3:更加清晰的解释
class Solution {
public:
    /*
        这里要求one pass完成排序，需要利用只有数组元素只有3个数的特性，否则无法完成。
        排序完成后一定是0...01...12....2，所以可以扫描数组，当遇到0时，交换到前部，当遇到1时，交换到后部。
        用双指针left, right来记录当前已经就位的0序列和2序列的边界位置(也就是下一个可以放置0和2的合法位置)

        假设已经完成到如下所示的状态：

        0......0   1......1  x1 x2 .... xm   2.....2
                   |         |           |
                  left       cur       right

        (1) A[cur] = 1：已经就位，cur++即可
        (2) A[cur] = 0：交换A[cur]和A[left]。由于A[left]=1或left=cur，所以交换以后A[cur]已经就位，cur++，left++
        (3) A[cur] = 2：交换A[cur]和A[right]，right--。由于xm的值未知，cur不能增加，继续判断xm。
        [left,cur)之间都是1,[cur,right]都是未知的
    */
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int zero=0,two=n-1;
        int i=0;
        //这里条件是i<=two 因为two是下一个可以放置2的位置 
        //也就是还没有确定该放什么元素的位置 所以需要check
        while(i<=two){
            if(nums[i]==0){
                swap(nums[i++],nums[zero]);
                zero++;
            }else if(nums[i]==1){
                i++;
            }else{
                swap(nums[i],nums[two]);
                two--;
            }
        }
    }
};
