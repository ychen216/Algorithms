199. Binary Tree Right Side View

/*
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see 
ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

*/

Solution 1:bfs
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    //从右向左进行扫描 每一层的第一个节点就是从右向左看到的节点
    void BFS(vector<int>&res,TreeNode*root){
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode *node=q.front();
                q.pop();
                if(i==0)
                    res.push_back(node->val);
                if(node->right)q.push(node->right);
                if(node->left)q.push(node->left);
            }
        }
    }
    vector<int> rightSideView(TreeNode* root) {
        if(root==NULL)
            return {};
        vector<int> res;
        BFS(res,root);
        return res;
    }
};

update:
class Solution {
public:
    //BFS  先遍历右节点
    vector<int> rightSideView(TreeNode* root) {
        if(!root)
            return {};
        vector<int> res;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode *cur=q.front();
                q.pop();
                if(i==0)
                    res.push_back(cur->val);
                if(cur->right)
                    q.push(cur->right);
                if(cur->left)
                    q.push(cur->left);
            }
        }
        return res;
    }
};

Solution 2:dfs
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //DFS  先遍历右节点 每一层的第一个节点加入结果集合
    vector<int> rightSideView(TreeNode* root) {
        if(!root)
            return {};
        vector<int> res;
        dfs(root,res,0);
        return res;
    }
private:
    void dfs(TreeNode *root,vector<int> &res,int depth){
        if(!root)
            return;
        if(depth==res.size())
            res.push_back(root->val);
        dfs(root->right,res,depth+1);
        dfs(root->left,res,depth+1);
    }
};
