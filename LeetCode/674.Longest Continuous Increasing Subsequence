674. Longest Continuous Increasing Subsequence

/*
Given an unsorted array of integers, find the length of longest continuous increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. 
Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1. 
Note: Length of the array will not exceed 10,000.
*/
Solution:
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int size=nums.size();
        if(size==0)
            return 0;
        int dp[size]={0};
        int maxLen=1;
        dp[0]=1;
        for(int i=1;i<size;i++){
            if(nums[i]>nums[i-1])
                dp[i]=dp[i-1]+1;
            else
                dp[i]=1;
            maxLen=max(dp[i],maxLen);
        } 
        return maxLen;
    }
    
};
改写
class Solution {
public:
    // dp[i]为以第i个元素结尾的最长连续子数组长度
    int findLengthOfLCIS(vector<int>& nums) {
        int size=nums.size();
        if(size<2)
            return size;
        int maxLen=0;
        vector<int> dp(size,1);//初始化
        for(int i=1;i<size;i++){
            if(nums[i]>nums[i-1])
                dp[i]+=dp[i-1];
            maxLen=max(maxLen,dp[i]);
        }
        return maxLen;
    }
};

Solution 2：空间O(1)
class Solution {
public:
    // 第i个元素的结果只与前一个元素有关 可以用一个变量记录
    int findLengthOfLCIS(vector<int>& nums) {
        int maxLen=0,cnt=0;
        for(int i=0;i<nums.size();i++){
            if(i==0||nums[i]>nums[i-1])
                cnt++;
            else
                cnt=1;
            maxLen=max(maxLen,cnt);
        }
        return maxLen;
    }
};
