746. Min Cost Climbing Stairs

/*
On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
Note:
cost will have a length in the range [2, 1000].
Every cost[i] will be an integer in the range [0, 999].
*/

Solution:
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int []dp=new int[n+1];
        dp[0]=cost[0];
        dp[1]=cost[1];
        for(int i=2;i<=n;i++){
            int curCost=i==n?0:cost[i];
            dp[i]=Math.min(dp[i-1],dp[i-2])+curCost;
        }
        return dp[n];
    }
}

Solution 2:
class Solution {
public:
    // 给出0~n-1的cost 求到达顶点n的最小cost 每次可以走一步或两步
    // dp[0]=cost[0] dp[1]=cost[1];
    // dp[i]=cost[i]+min(dp[i-1],dp[i-2]) i<n
    // 到顶点的最小cost 为min(dp[n-1],dp[n-2])
    int minCostClimbingStairs(vector<int>& cost) {
        int ppre=cost[0],pre=cost[1];
        for(int i=2;i<cost.size();i++){
            int cur=min(ppre,pre)+cost[i];
            ppre=pre;
            pre=cur;
        }
        return min(ppre,pre);
    }
};
