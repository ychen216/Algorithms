746. Min Cost Climbing Stairs

/*
On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
Note:
cost will have a length in the range [2, 1000].
Every cost[i] will be an integer in the range [0, 999].
*/

Solution 1:
class Solution {
public:
    /*
        这题要注意的是:
        1.到达第i层只有继续往i+1或i+2层走 第i层才需要支付cost[i],也就是只站着是不收费的！
        2.cost的长度为n最后一个元素是cost[n-1] 而我们要到达的top是n+1层 所以到了第n-1还需要继续向上爬还需要pay cost
        dp[i]设置为到达第i层的最少花费 以为起始时刻 可以选择从第0 or 1层开始,所以
        dp[0]=dp[1]=0, 继续往上走dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])
        站在i-1时最少开销 加上 从i-1往上走的cost
    */
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int> dp(n+1,0);
        // dp[0]=dp[1]=0;
        for(int i=2;i<=n;i++){
            dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);
        }
        return dp[n];
    }
};

Solution 2:
class Solution {
public:
    /*
        这题要注意的是:
        1.到达第i层只有继续往i+1或i+2层走 第i层才需要支付cost[i],也就是只站着是不收费的！
        2.cost的长度为n最后一个元素是cost[n-1] 而我们要到达的top是n+1层 所以到了第n-1还需要继续向上爬还需要pay cost
        dp[i]设置为到达第i层的最少花费 以为起始时刻 可以选择从第0 or 1层开始,所以
        dp[0]=dp[1]=0, 继续往上走dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])
        站在i-1时最少开销 加上 从i-1往上走的cost
        状态i只依赖与i-1和i-2状态 可以简化空间开销O(n)-->O(1)
    */
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        int ppre=0,pre=0;//表示当前位置(i=2)到达前两个位置时的开销
        for(int i=2;i<=n;i++){
            int tmp=ppre;
            ppre=pre;
            pre=min(pre+cost[i-1],tmp+cost[i-2]);
        }
        return pre;
    }
};

// 2018-12-25 时 重写了Solution 1&2 对于以前的方法表示看不懂 Solution3也是
Solution 3:
class Solution {
public:
    // 给出0~n-1的cost 求到达顶点n的最小cost 每次可以走一步或两步
    // dp[0]=cost[0] dp[1]=cost[1];
    // dp[i]=cost[i]+min(dp[i-1],dp[i-2]) i<n
    // 到顶点的最小cost 为min(dp[n-1],dp[n-2])
    int minCostClimbingStairs(vector<int>& cost) {
        int ppre=cost[0],pre=cost[1];
        for(int i=2;i<cost.size();i++){
            int cur=min(ppre,pre)+cost[i];
            ppre=pre;
            pre=cur;
        }
        return min(ppre,pre);
    }
};

