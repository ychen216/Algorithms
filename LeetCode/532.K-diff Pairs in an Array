532. K-diff Pairs in an Array

/*
Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.

Example 1:
Input: [3, 1, 4, 1, 5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:
Input:[1, 2, 3, 4, 5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:
Input: [1, 3, 1, 5, 4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
Note:
  The pairs (i, j) and (j, i) count as the same pair.
  The length of the array won't exceed 10,000.
  All the integers in the given input belong to the range: [-1e7, 1e7].
*/

Solution 1:
class Solution {
public:
    /*
        这道题给我们一个数组要我们找出有多少个不同的pair(num1,num2)满足abs(num1,num2)==k
        要注意的是(num1,num2)和(num2,num1)算同一个pair，同时如果有多个相同的(num1,num2)只算1个
        eg[1,2,2,1] (1,2)==(2,1) (1,第一个2)==(1,第二个2)
        还有一个坑 absolute difference必须check>=0
    */
    int findPairs(vector<int>& nums, int k) {
        if(k<0||nums.size()<2)
            return 0;
        unordered_map<int,int> mmp;
        int res=0;
        for(auto&num:nums)
            mmp[num]++;
        for(auto&m:mmp){
            if(k==0){
                if(m.second>1)
                    res++;
            }else{
                // k>0
                // 避免出现(1,2)(2,1)的情况 只向一个方向查找（这里往正向查找）
                if(mmp.find(m.first+k)!=mmp.end())
                    res++;
            }
        }
        return res;
    }
};


Solution 2:利用排序 可以避免(1,3)和(3,1)同时出现
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(k<0||nums.size()<2)
            return 0;
        sort(nums.begin(),nums.end());
        int res=0;
        int i=0,j=1;
        while(j<nums.size()){
            int diff=nums[j]-nums[i];
            if(diff==k){
                res++;
                // 跳过可能相同值 去重操作 避免有多个(1,3)
                while(i+1<nums.size()&&nums[i+1]==nums[i])i++;
                i++;
                while(j+1<nums.size()&&nums[j+1]==nums[j])j++;
                j++;
            }
            else if(diff<k){
                while(j+1<nums.size()&&nums[j+1]==nums[j])j++;
                j++;    
            }
            else{
                while(i+1<nums.size()&&nums[i+1]==nums[i])i++;
                i++;
            }
            j=max(j,i+1);
        }
        return res;
    }
};
