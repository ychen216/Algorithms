394. Decode String

/*
Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
*/

Solution:
class Solution {
public:
    //利用递归 最重要的一个观察室如果有数字那么数字后面一定跟着一个带有[]的pattern
    string decodeString(string s) {
        int start=0;
        return helper(s,start);
    }
private:
    //将string[i,..end]decode出来
    //i要用引用 因为这个解码的过程是不断向后延伸的
    string helper(string &s,int &i){
        string res;
        while(i<s.length()&&s[i]!=']'){
            if(isdigit(s[i])){
                int repeat=0;
                //把repeat数字截取出来
                while(i<s.length()&&isdigit(s[i])){
                    repeat=repeat*10+s[i]-'0';
                    i++;
                }
                //数字后面一定跟了一个'['
                i++;//skip '['
                //把数字后面[...]中的内容解码出来
                string pattern=helper(s,i);
                i++;//skip pattern[...]中的']'
                while(repeat>0){
                    res+=pattern;
                    repeat--;
                }
            }
            else{
                //字符
                res+=s[i++];
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
    //利用栈
    public String decodeString(String s) {
        Stack<Integer> count = new Stack<>();
        Stack<String> result = new Stack<>();
        int i = 0;
        result.push("");
        while (i < s.length()) {
            char ch = s.charAt(i);
            if (ch >= '0' && ch <= '9') {
                int start = i;
                while (s.charAt(i + 1) >= '0' && s.charAt(i + 1) <= '9') i++;
                count.push(Integer.parseInt(s.substring(start, i + 1)));
            } else if (ch == '[') {
                result.push("");
            } else if (ch == ']') {
                String str = result.pop();
                StringBuilder sb = new StringBuilder();
                int times = count.pop();
                for (int j = 0; j < times; j += 1) {
                    sb.append(str);
                }
                result.push(result.pop() + sb.toString());
            } else {
                result.push(result.pop() + ch);
            }
            i += 1;
        }
        return result.pop();
    }
}

C++ version
class Solution {
public:
    string decodeString(string s) {
        stack<string> res;
        stack<int> count;
        res.push("");
        int len=s.length(),i=0;
        while(i<len){
            if(isdigit(s[i])){
                int n=0;
                while(i<len && isdigit(s[i]))
                    n=n*10+s[i++]-'0';
                i--; // 指针复位
                count.push(n);
            }
            else if(s[i]=='['){
                res.push("");
            }
            else if(s[i]==']'){
                // 遇到] 说明某一个pattern结束 应该结合其出现的次数将其整合到结果中
                int n=count.top(); //该pattern应该出现的次数
                count.pop();
                string temp="";
                string pattern=res.top(); 
                res.pop();
                for(int i=0;i<n;i++)
                    temp+=pattern;
                string preResult=res.top();
                res.pop();
                res.push(preResult+temp);
            }
            else{
                // 遇到单个字符
                string pattern=res.top();
                res.pop();
                pattern+=s[i];
                res.push(pattern);
            }
            i++;
        }
        return res.top();
    }
};

update:
class Solution {
public:
    string decodeString(string s) {
        stack<int> repeat;
        stack<string> pattern;
        pattern.push("");
        int i=0;
        while(i<s.length()){
            if(isdigit(s[i])){
                int rep_time=0;
                while(i<s.length()&&isdigit(s[i])){
                    rep_time=rep_time*10+s[i]-'0';
                    i++;
                }
                repeat.push(rep_time);
                //i指向[ 需要回退到[之前 因为最后我们在ifelse循环外还有一个i++
                i--;
            }
            else if(s[i]=='['){
                //要构建一个新的pattern
                pattern.push("");
            }
            else if(s[i]==']'){
                string patt=pattern.top();
                pattern.pop();
                string new_patt;
                int rep_time=repeat.top();
                repeat.pop();
                while(rep_time-->0){
                    new_patt+=patt;
                }
                //将新的解码出来的pattern和前一个pattern合并
                string &pre_patt=pattern.top();
                pre_patt+=new_patt;
            }
            else{
                string &patt=pattern.top();
                patt+=s[i];
            }
            i++;
        }
        return pattern.top();
    }
};
