394. Decode String

/*
Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
*/

Solution:
class Solution {
public:
    string decodeString(string s) {
        int i=0;
        return helper(s,i);
    }
    //pos应该用引用
    string helper(string &s,int& pos){
        int len=s.length();
        string res="";
        while(pos<len&&s[pos]!=']'){
            if(!isdigit(s[pos]))
                res+=s[pos++];
            else{
                //计算次数
                int cnt=0;
                while(pos<len&&isdigit(s[pos])){
                    cnt=cnt*10+s[pos]-'0';
                    pos++;
                }
                pos++;//'['
                //找pattern
                string pattern=helper(s,pos);
                pos++;//']'
                while(cnt>0){
                    cnt--;
                    res+=pattern;
                }
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
    //利用栈
    public String decodeString(String s) {
        Stack<Integer> count = new Stack<>();
        Stack<String> result = new Stack<>();
        int i = 0;
        result.push("");
        while (i < s.length()) {
            char ch = s.charAt(i);
            if (ch >= '0' && ch <= '9') {
                int start = i;
                while (s.charAt(i + 1) >= '0' && s.charAt(i + 1) <= '9') i++;
                count.push(Integer.parseInt(s.substring(start, i + 1)));
            } else if (ch == '[') {
                result.push("");
            } else if (ch == ']') {
                String str = result.pop();
                StringBuilder sb = new StringBuilder();
                int times = count.pop();
                for (int j = 0; j < times; j += 1) {
                    sb.append(str);
                }
                result.push(result.pop() + sb.toString());
            } else {
                result.push(result.pop() + ch);
            }
            i += 1;
        }
        return result.pop();
    }
}

C++ version
class Solution {
public:
    string decodeString(string s) {
        stack<string> res;
        stack<int> count;
        res.push("");
        int len=s.length(),i=0;
        while(i<len){
            if(isdigit(s[i])){
                int n=0;
                while(i<len && isdigit(s[i]))
                    n=n*10+s[i++]-'0';
                i--; // 指针复位
                count.push(n);
            }
            else if(s[i]=='['){
                res.push("");
            }
            else if(s[i]==']'){
                // 遇到] 说明某一个pattern结束 应该结合其出现的次数将其整合到结果中
                int n=count.top(); //该pattern应该出现的次数
                count.pop();
                string temp="";
                string pattern=res.top(); 
                res.pop();
                for(int i=0;i<n;i++)
                    temp+=pattern;
                string preResult=res.top();
                res.pop();
                res.push(preResult+temp);
            }
            else{
                // 遇到单个字符
                string pattern=res.top();
                res.pop();
                pattern+=s[i];
                res.push(pattern);
            }
            i++;
        }
        return res.top();
    }
};
