537. Complex Number Multiplication

/*
Given two strings representing two complex numbers.

You need to return a string representing their multiplication. Note i2 = -1 according to the definition.

Example 1:
Input: "1+1i", "1+1i"
Output: "0+2i"
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.
Example 2:
Input: "1+-1i", "1+-1i"
Output: "0+-2i"
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.
Note:

The input strings will not have extra blank.
The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100].
And the output should be also in this form.
*/

Solution 1: stringstream
class Solution {
public:
    string complexNumberMultiply(string a, string b) {
        stringstream sa(a),sb(b),ans;
        int ra,rb,ia,ib;
        char c;
        sa>>ra>>c>>ia>>c;
        sb>>rb>>c>>ib>>c;
        ans<<ra*rb-ia*ib<<"+"<<ra*ib+rb*ia<<"i";
        return ans.str();
    }
};


Solution 2:
class Solution {
public:
    // (a+bi)*(c+di)=ac-bd+(ad+bc)i
    string complexNumberMultiply(string a, string b) {
        int realA,imageryA,realB,imageryB;
        getComplexNumber(a,realA,imageryA);
        getComplexNumber(b,realB,imageryB);
        int resReal=realA*realB-imageryA*imageryB;
        int resImg=realA*imageryB+imageryA*realB;
        return to_string(resReal)+"+"+to_string(resImg)+"i";
    }
private:
    void getComplexNumber(string &num,int &real,int &imagery){
        real=0,imagery=0;
        // 找实部
        int i=0;
        bool negReal=false;
        if(num[0]=='-'){
            i++;
            negReal=true;
        }
        while(i<num.length()&&num[i]!='+'){
            real=real*10+num[i]-'0';
            i++;
        }
        if(negReal)
            real=-real;
        // 跳过+
        i++;
        // 找虚部
        bool negImg=false;
        if(num[i]=='-'){
            negImg=true;
            i++;
        }
        while(i<num.length()&&num[i]!='i'){
            imagery=imagery*10+num[i]-'0';
            i++;
        }
        if(negImg)
            imagery=-imagery;
    }
};
