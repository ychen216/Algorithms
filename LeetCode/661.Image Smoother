661. Image Smoother

/*
Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
  The value in the given matrix is in the range of [0, 255].
  The length and width of the given matrix are in the range of [1, 150].
*/

Solution 1:
class Solution {
public:
//naive
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        int row=M.size();
        if(row==0)
            return {};
        int col=M[0].size();
        if(col==0)
            return {};
        int dx[]={-1,-1,-1,0,0,1,1,1},dy[]={-1,0,1,-1,1,-1,0,1};
        vector<vector<int>> res;
        for(int i=0;i<row;i++){
            res.push_back({});
            for(int j=0;j<col;j++){
                int temp=M[i][j],cnt=1;
                for(int k=0;k<8;k++){
                    int x=i+dx[k];
                    int y=j+dy[k];
                    if(x>=0&&x<row&&y>=0&&y<col){
                        temp+=M[x][y];
                        cnt++;
                    }
                }
                res[i].push_back(temp/cnt);
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        利用位操作使得空间开销O(1)
        灰度值为[0,255]可以保存在低八位 平均灰度的结果可以存在上一个八位
    */
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        int row=M.size();
        if(row==0)
            return {};
        int col=M[0].size();
        if(col==0)
            return {};
        int dx[]={-1,-1,-1,0,0,1,1,1},dy[]={-1,0,1,-1,1,-1,0,1};
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                int temp=M[i][j],cnt=1;
                for(int k=0;k<8;k++){
                    int x=i+dx[k];
                    int y=j+dy[k];
                    if(x>=0&&x<row&&y>=0&&y<col){
                        temp+=(M[x][y]&0xFF);//原始信息保存在低八位
                        cnt++;
                    }
                }
                M[i][j]|=((temp/cnt)<<8);//均值存在上八位
            }
        }
        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
                M[i][j]>>=8;
                
        return M;
    }
};
