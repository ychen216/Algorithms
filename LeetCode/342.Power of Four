342. Power of Four

/*
Given an integer (signed 32 bits), write a function to check whether it is a power of 4.

Example:
Given num = 16, return true. Given num = 5, return false.

Follow up: Could you solve it without loops/recursion?
*/

Solution:
class Solution {
public:
    bool isPowerOfFour(int num) {
        if(num<=0)
            return false;
        while(num>1){
            if(num%4)
                return false;
            num/=4;
        }
        return num==1;
        
    }
};

Solution 2:
class Solution {
public:
    //四的指数 二进制表示只有一位为1 还要排除2的指数的可能
    bool isPowerOfFour(int num) {
        return num>0&&(num&(num-1))==0&&(num-1)%3==0;
    }
};

Solution 3:
class Solution {
public:
    // 4的指数必然是正数 且 二进制表示有且只有一位是1 
    // 但是满足这种情况的还包含2的指数 所以要排除仅仅满足2的指数的情况
    bool isPowerOfFour(int num) {
        //0x55555555 is to get rid of those power of 2 but not power of 4
        //so that the single 1 bit always appears at the odd position 
        //0x55555555 is a hexametrical number，it is 1010101010101010101010101010101 in binary with a length of 32
        //To make sure the 1 locates in the odd location.
        return num>0&&(num&(num-1))==0&&(num&0x55555555)!=0;
    }
};

update:
class Solution {
public:
    /*
        4^n=(2^2)^n 4的幂必然是2的幂(二进制表示中,包含且仅包含一位1) 利用n&(n-1)==0判断
        在确定了是2的幂后再判断是否是4的幂
        4^n=2^(2n) 所以4的幂的二进制表示中1的后面必然包含偶数个0 即二进制中4的幂包含的一个1必然出现在奇数位 
        所以利用n&(0x55555555)!=0进一步判断是否是4的幂 0x55555555的奇数位均为1 (0101)的形式出现8组
        同时该判断也能排除num<=0的情况 但是可能num==INT_MIN 此时num-1溢出 所以利用num>0排除
    */
    bool isPowerOfFour(int num) {
        return num>0 && (num&(num-1))==0 && num&(0x55555555);
    }
};

update:同样的思想不同的实现方式
class Solution {
public:
    bool isPowerOfFour(int num) {
        // 4次幂必然是正数 且是2的幂 所以num的二进制表示有且只有一个1 
        // 同时4^n=2^(2n) 那么唯一的一个1 在0,2,4..2n位上 所以1,3,5..2n-1上应该都是0 所以num&(0x aaaaaaaa)==0 a(16)==1010(2)
        return num>0 && ((num-1)&num)==0 && (num&0xaaaaaaaa)==0;
    }
};
