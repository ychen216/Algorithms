572. Subtree of Another Tree

/*
Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
public:
    bool subtreeHelper(TreeNode* s,TreeNode* t){
        if(s==NULL&&t==NULL)
            return true;
        if(s==NULL||t==NULL)
            return false;
        if(s->val==t->val)
            return subtreeHelper(s->left,t->left)&&subtreeHelper(s->right,t->right);
        return false;
    }
    
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(s!=NULL){
            bool res=subtreeHelper(s,t);
            if(res)
                return true;
            bool resLeft=false,resRight=false;
            if(s->left)
                resLeft=isSubtree(s->left,t);
            if(resLeft)
                return true;
            if(s->right)
                resRight=isSubtree(s->right,t);
            return resRight;
        }   
    }
};
