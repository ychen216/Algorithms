540. Single Element in a Sorted Array

/*
Given a sorted array consisting of only integers where every element appears twice except for one element which appears once.
Find this single element that appears only once.

Example 1:
Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:
Input: [3,3,7,7,10,11,11]
Output: 10
Note: Your solution should run in O(log n) time and O(1) space.
*/

Solution 1:
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        set<int> s;//所有出现的元素
        int sum=0;//记录所有元素和
        for(auto p:nums){
            sum+=p;
            s.insert(p);
        }
        for(auto p:s)
            sum-=p*2;
        return -sum;
    }
};

Solution 2:
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int size=nums.size();
        for(int i=0;i<size;i++){
            //重复元素不是出现在前一个就是后一个
            if(i==0){
                if(nums[i]==nums[i+1])
                    continue;
            }
            else if(i==size-1){
                if(nums[i-1]==nums[i])
                    continue;
            }
            else{
                if(nums[i]==nums[i-1]||nums[i]==nums[i+1])
                    continue;
            }
            return nums[i];
        }
    }
};

Solution 3:
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0, high = nums.size() - 1;
        while(low < high) {
        int mid = low + (high - low)/2;
        if(nums[mid] != nums[mid+1] && nums[mid] != nums[mid-1])
            return nums[mid];
        else if(nums[mid] == nums[mid+1] && mid % 2 == 0)
            low = mid+1;
        else if(nums[mid] == nums[mid-1] && mid % 2 == 1)
            low = mid+1;
        else
            high = mid-1;
    }
    return nums[low];
    }
};
