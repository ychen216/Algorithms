540. Single Element in a Sorted Array

/*
Given a sorted array consisting of only integers where every element appears twice except for one element which appears once.
Find this single element that appears only once.

Example 1:
Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:
Input: [3,3,7,7,10,11,11]
Output: 10
Note: Your solution should run in O(log n) time and O(1) space.
*/

Solution 1:
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        set<int> s;//所有出现的元素
        int sum=0;//记录所有元素和
        for(auto p:nums){
            sum+=p;
            s.insert(p);
        }
        for(auto p:s)
            sum-=p*2;
        return -sum;
    }
};

Solution 2:
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int size=nums.size();
        for(int i=0;i<size;i++){
            //重复元素不是出现在前一个就是后一个
            if(i==0){
                if(nums[i]==nums[i+1])
                    continue;
            }
            else if(i==size-1){
                if(nums[i-1]==nums[i])
                    continue;
            }
            else{
                if(nums[i]==nums[i-1]||nums[i]==nums[i+1])
                    continue;
            }
            return nums[i];
        }
    }
};

Solution 3:
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0, high = nums.size() - 1;
        while(low < high) {
        int mid = low + (high - low)/2;
        if(nums[mid] != nums[mid+1] && nums[mid] != nums[mid-1])
            return nums[mid];
        else if(nums[mid] == nums[mid+1] && mid % 2 == 0)
            low = mid+1;
        else if(nums[mid] == nums[mid-1] && mid % 2 == 1)
            low = mid+1;
        else
            high = mid-1;
    }
    return nums[low];
    }
};

改写1
class Solution {
public:
    // single元素出现的下标一定是偶数
    // eg.00122 12233
    int singleNonDuplicate(vector<int>& nums) {
        int low=0,high=nums.size()-1;
        while(low<high){
            int mid=low+(high-low)/2;
            if(nums[mid]==nums[mid+1]&&(mid&1)==0)
                low=mid+2;
            else if(nums[mid]==nums[mid+1]&&(mid&1))
                high=mid-1;
            else if(nums[mid]==nums[mid-1]&&(mid&1)==0)
                high=mid-2;
            else if(nums[mid]==nums[mid-1]&&(mid&1))
                low=mid+1;
            else return nums[mid];
        }
        return nums[low];
    }
};
改写2
class Solution {
public:
    // single元素出现的下标一定是偶数
    // eg.00122 12233
    int singleNonDuplicate(vector<int>& nums) {
        int low=0,high=nums.size()-1;
        while(low<high){
            
            // We want the first element of the middle pair,
            // which should be at an even index if the left part is sorted.
            // Example:
            // Index: 0 1 2 3 4 5 6
            // Array: 1 1 3 3 4 8 8
            int mid=low+(high-low)/2;
            if(mid&1)mid--;
            
            // We found a pair. The single element must be on the right.
            // Example: |1 1 3 3 5 6 6|
            //               ^ ^
            // Next:     1 1 3 3|5 6 6|
            // 说明在此之前的元素都是成对出现的
            if(nums[mid]==nums[mid+1])
                low=mid+2;
            else
                // We didn't find a pair. The single element must be on the left.
                // (pipes mean start & end)
                // Example: |0 1 1 3 3 6 6|
                //               ^ ^
                // Next:    |0 1 1|3 3 6 6
                // 该元素可能就是目标元素 或者 再往前的偶数下标 mid-2*i
                high=mid;
        }
        return nums[low];
    }
};


Solution 4:
class Solution {
public:
    // 所有元素异或得到只出现一次的元素
    int singleNonDuplicate(vector<int>& nums) {
        int single=0;
        for(auto &n:nums)
            single^=n;
        return single;
    }
};
