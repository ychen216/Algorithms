398. Random Pick Index
/*
Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.

Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.

Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);
*/

Solution 1: Memory Limit Exceeded 
class Solution {
public:
    //利用map存储每种元素可能的下标数组 然后随机返回一个
    Solution(vector<int> nums) {
        for(int i=0;i<nums.size();i++)
            mmp[nums[i]].push_back(i);
    }
    
    int pick(int target) {
        return mmp[target][rand()%mmp[target].size()];
    }
private:
    unordered_map<int,vector<int>> mmp;
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */
 
Solution 2:
class Solution {
public:
    Solution(vector<int> nums) {
       v=nums;
    }
    
    int pick(int target) {
        int res=-1,cnt=0;
        for(int i=0;i<v.size();i++){
            if(v[i]!=target)continue;
            //如果有x个相同的元素 那么每个元素的概率是1/x 那么抽到第一个元素的概率是1/x
            if(rand()%(++cnt)==0)res=i;
        }
        return res;
    }
private:
    vector<int> v;
};
