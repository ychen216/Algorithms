567. Permutation in String

/*
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
In other words, one of the first string's permutations is the substring of the second string.

Example 1:
Input:s1 = "ab" s2 = "eidbaooo"
Output:True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
  The input strings only contain lower case letters.
  The length of both given strings is in range [1, 10,000].
*/

Solution: STL next_permutation 超时
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int len1=s1.length();
        int len2=s2.length();
        if(len1>len2)
            return false;
        if(len1==0||len2==0)
            return false;
        sort(s1.begin(),s1.end());
        do{
            if(s2.find(s1)!=string::npos)
                return true;
        }while(next_permutation(s1.begin(),s1.end()));
        return false;
    }
};

Solution 2: slide window
class Solution {
public:
    //s1的一个全排列 即一个字符串s,s中每个字母出现的次数和s1中每个字母出现的次数一致
    //所以只需要在s2中找到一个子串x的长度和s1相同 且x中每个字母出现的次数和s1相同
    //利用一个长度为len(s1)的滑动窗口，在s2上滑动,在这个滑动窗口中的字符及其个数是否刚好等于s1中的字符及其个数
    bool checkInclusion(string s1, string s2) {
        int len1=s1.length();
        int len2=s2.length();
        if(len1>len2)
            return false;
        if(len1==0||len2==0)
            return false;
        vector<int> maps1(26,0),maps2(26,0);
        for(int i=0;i<len1;i++){
            maps1[s1[i]-'a']++;
            maps2[s2[i]-'a']++;
        }
        if(maps1==maps2)
            return true;
        for(int i=0;i+len1<len2;i++){
            maps2[s2[i]-'a']--;
            maps2[s2[i+len1]-'a']++;
            if(maps1==maps2)
                return true;
        }
        return false;
    }
};

Solution 3:
class Solution {
public:
    //s1的一个全排列 即一个字符串s,s中每个字母出现的次数和s1中每个字母出现的次数一致
    //所以只需要在s2中找到一个子串x的长度和s1相同 且x中每个字母出现的次数和s1相同
    //利用一个长度为len(s1)的滑动窗口，在s2上滑动,在这个滑动窗口中的字符及其个数是否刚好等于s1中的字符及其个数
    //改进 只用一个数组存储字母出现的次数
    bool checkInclusion(string s1, string s2) {
        int len1=s1.length();
        int len2=s2.length();
        if(len1>len2)
            return false;
        if(len1==0||len2==0)
            return false;
        vector<int> map(26,0);
        for(int i=0;i<len1;i++){
            map[s1[i]-'a']++;
            map[s2[i]-'a']--;
        }
        if(allZero(map))
            return true;
        for(int i=len1;i<len2;i++){
            map[s2[i]-'a']--;//增加新元素
            map[s2[i-len1]-'a']++;//还原
            if(allZero(map))
                return true;
        }
        return false;
    }
    
    bool allZero(vector<int>&map){
        for(int i=0;i<26;i++)
            if(map[i]!=0)
                return false;
        return true;
    }
};


Solution 4:
class Solution {
public:
    /*  
      要求在s2长度为s1.length的子串中包含所有s1的所有字符
        利用双指针 一旦左右指针范围内的任何一个元素x 超过s1中x出现的次数 就移动指针
    */
    bool checkInclusion(string s1, string s2) {
        int len1=s1.length(),len2=s2.length();
        if(len1>len2)
            return false;
        vector<int> cnt1(26,0);
        for(auto &c: s1)
            cnt1[c-'a']++;
        vector<int> cnt2(26,0);
        for(int left=0,right=0;right<len2;right++){
            int i=s2[right]-'a';
            cnt2[i]++;
            // 区间出现s1不包含的元素 那么包含该元素的区间都不可能是符合要求的
            // 移动整个指针区间到该元素右侧
            if(cnt1[i]==0){
                left=right+1;
                //cnt2.clear();  clear只能将vector的size设为0 实际值存在那里的值没有消失
                cnt2=vector<int>(26,0);
            }
            else if(cnt2[i]>cnt1[i]){
                while(left<=right&&cnt2[i]>cnt1[i]){
                    cnt2[s2[left]-'a']--;
                    left++;
                }
            }
            // cnt2[i]==cnt1[i]刚好凑齐了一个元素 检查一下
            else if(right-left+1==len1)
                return true;
        }
        return false;
    }
};


Solution 5:
class Solution {
public:
    // str是s1的permutation只需要满足str中包含s1中的所有字符
    // 可以利用双指针check window范围内的子串是否满足条件
    bool checkInclusion(string s1, string s2) {
        int len2=s2.length();
        int len1=s1.length(),counter=len1;//counter指示当前区间还需要多少个s1中的字符
        if(len2<len1){
            return false;
        }
        unordered_map<char,int> need;//表示每个字符还需要多少 若为负数则说明该字符有富余
        for(auto &c:s1){
            need[c]++;
        }
        for(int left=0,right=0;right<len2;right++){
            if(need.find(s2[right])!=need.end()){
                //对right还有需求 counter--
                if(need[s2[right]]>0){
                    counter--;
                }
                need[s2[right]]--;
            }
            // 验证区间合法性及收缩left
            while(counter==0){
                //长度相等且不缺少字符 说明[left,right]包含一个permutation
                if(right-left+1==len1){
                    return true;
                }
                // 收缩左侧字符 看是否对left的需求增加 counter++
                if(need.find(s2[left])!=need.end()){
                    need[s2[left]]++;
                    if(need[s2[left]]>0){
                        counter++;
                    }
                }
                left++;
            }
        }
        return false;
    }
};

Solution 5: slide window + map
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1=s1.length();
        int n2=s2.length();
        if(n1>n2){
            return false;
        }
        unordered_map<char,int> target;
        for(auto &c:s1){
            target[c]++;
        }
        unordered_map<char,int> cur(target.begin(),target.end());
        for(int left=0,right=0;right<n2;right++){
            //如果出现不在s1中的字符 所有区间应该直接跳过这个字符
            if(target.find(s2[right])==target.end()){
                left=right+1;
                cur=target;
            }
            else { //s1中包含s2[right]
                cur[s2[right]]--;
                // 保持cur中的任何一个字符还需要的个数都>=0 这样可以保证[left,right]的长度不超过n1
                while(cur[s2[right]]<0){
                    cur[s2[left]]++;
                    left++;
                }
                if(right-left+1==n1){
                    return true;
                }
            }
        }
        return false;
    }
};
