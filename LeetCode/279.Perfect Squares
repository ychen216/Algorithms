279. Perfect Squares

/*
Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.
*/

Solution:
class Solution {
public:
    //DP dp[n]=min(dp[n],dp[n-j*j]+1)其中j*j<=n
    int numSquares(int n) {
        if(n<=0)
            return 0;
        int dp[n+1];
        dp[0]=0;//初始化
        for(int i=1;i<=n;i++){
            dp[i]=INT_MAX;
            int m=sqrt(i);
            for(int j=1;j<=m;j++)
                dp[i]=min(dp[i],dp[i-j*j]+1);
        }
        return dp[n];
    }
};

update: 增加一个直接判断
class Solution {
public:
    int numSquares(int n) {
        int m=sqrt(n);
        if(m*m==n)
            return 1;
        vector<int> dp(n+1,INT_MAX);
        dp[0]=0,dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=1;j<=sqrt(i);j++){
                dp[i]=min(dp[i],1+dp[i-j*j]);
            }
        }
        return dp[n];
    }
};

Solution 2:Math
class Solution {
private:  
    int is_square(int n)
    {  
        int sqrt_n = (int)(sqrt(n));  
        return (sqrt_n*sqrt_n == n);  
    }
    
public:
    // Based on Lagrange's Four Square theorem, there 
    // are only 4 possible results: 1, 2, 3, 4.
    int numSquares(int n) 
    {  
        // If n is a perfect square, return 1.
        if(is_square(n)) 
        {
            return 1;  
        }
        
        // The result is 4 if and only if n can be written in the 
        // form of 4^k*(8*m + 7). Please refer to 
        // Legendre's three-square theorem.
        while ((n & 3) == 0) // n%4 == 0  
        {
            n >>= 2;  
        }
        if ((n & 7) == 7) // n%8 == 7
        {
            return 4;
        }
        
        // Check whether 2 is the result.
        int sqrt_n = (int)(sqrt(n)); 
        for(int i = 1; i <= sqrt_n; i++)
        {  
            if (is_square(n - i*i)) 
            {
                return 2;  
            }
        }  
        
        return 3;  
    }  
};
