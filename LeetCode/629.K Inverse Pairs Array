629. K Inverse Pairs Array
/*
Given two integers n and k, find how many different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs.

We define an inverse pair as following: For ith and jth element in the array, if i < j and a[i] > a[j] then it's an inverse pair; Otherwise, it's not.

Since the answer may be very large, the answer should be modulo 109 + 7.

Example 1:
Input: n = 3, k = 0
Output: 1
Explanation: 
Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.
Example 2:
Input: n = 3, k = 1
Output: 2
Explanation: 
The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.
Note:
The integer n is in the range [1, 1000] and k is in the range [0, 1000].

*/

Solution 1:O(n*n*k)
class Solution {
public:
    /*
    dp[i][j] //represent the number of permutations of (1...i) with j inverse pairs.
    在1~i-1排列好以后 插入i 在最后插入不增加inverse pair 在倒数第二位插入增加1个...在第一位插入增加i-1个
    dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ..... +dp[i-1][j - i + 1]
    */
    int kInversePairs(int n, int k) {
        //k小于0或k大于1~n最多可能的逆序对(降序排列 321)
        if(k<0||k>(n-1)*n/2)
            return 0;
        if(k==0||k==(n-1)*n/2)
            return 1;
        vector<vector<long>> dp(n+1,vector<long>(k+1,0));
        long MOD=1e9+7;
        //dp[i][0]=1;
        dp[0][0]=1;
        for(int i=1;i<=n;i++){
            //找一个插入点 
            for(int j=0;j<i;j++){
                long maxInverse=min(k,(i-1)*i/2);
                //对于i可能的k值
                for(int z=0;z<=maxInverse;z++){
                    if(z-j>=0)
                        dp[i][z]=(dp[i][z]+dp[i-1][z-j])%MOD;
                }
            }
        }
        return dp[n][k];
    }
};

Solution 2:O(n*k)
class Solution {
public:
    /*
    dp[i][j] //represent the number of permutations of (1...i) with j inverse pairs.
    在1~i-1排列好以后 插入i 在最后插入不增加inverse pair 在倒数第二位插入增加1个...在第一位插入增加i-1个
    dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ..... +dp[i-1][j - i + 1]
    
    Can you find the rules about above formula.
    if j < i , we can compute dp[i][j] = dp[i][j-1] +dp[i-1][j]

    So, how about j >= i
    We know if we add number i into permutation(0 … i -1 ), i can create 0 ~i -1 inverse pair
    If j >= i , we still use dp[i][j] = dp[i][j-1] +dp[i-1][j].
    We must minus dp[i][j-i]. (In fact it minusdp[i-1][j-i], because everyj >= iin dp vecor,it minus dp[i-1][j-i]individually)
    */
    int kInversePairs(int n, int k) {
        //k小于0或k大于1~n最多可能的逆序对(降序排列 321)
        if(k<0||k>(n-1)*n/2)
            return 0;
        if(k==0||k==(n-1)*n/2)
            return 1;
        vector<vector<long>> dp(n+1,vector<long>(k+1,0));
        long MOD=1e9+7;
        //dp[i][0]=1;
        dp[0][0]=1;
        for(int i=1;i<=n;i++){
            dp[i][0]=1;
            long maxInverse=min(k,(i-1)*i/2);
            //对于i可能的k值
            for(int z=1;z<=maxInverse;z++){
                dp[i][z]=(dp[i][z-1]+dp[i-1][z])%MOD;
                if(z>=i)
                    dp[i][z]=(dp[i][z]-dp[i-1][z-i]+MOD)%MOD;
            }
            
        }
        return dp[n][k];
    }
};
