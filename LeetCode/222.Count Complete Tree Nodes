222. Count Complete Tree Nodes

/*
Given a complete binary tree, count the number of nodes.
*/
Solution 1:直接递归 TLE
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(root==NULL)
            return 0;
        int left=0,right=0;
        if(root->left)
            left=countNodes(root->left);
        if(root->right)
            right=countNodes(root->right);
        return 1+left+right;
    }
};

Solution 2: TEL
class Solution {
public:
    // BFS 一层一层扫描
    int countNodes(TreeNode* root) {
        if(!root)
            return 0;
        queue<TreeNode *> q;
        q.push(root);
        int res=0;
        while(!q.empty()){
            int size=q.size();
            res+=size;
            for(int i=0;i<size;i++){
                auto cur=q.front();
                q.pop();
                if(cur->left)
                    q.push(cur->left);
                if(cur->right)
                    q.push(cur->right);
            }
        }
        return res;
    }
};

Solution 3:
class Solution {
public:
    /*
    如果从某节点一直向左的高度 = 一直向右的高度, 那么以该节点为root的子树一定是complete binary tree. 
    complete binary tree的节点数,可以用公式算出 2^h - 1. 
    如果高度不相等, 则递归调用 return countNode(left) + countNode(right) + 1.  复杂度为O(h^2)  
    */
    int countNodes(TreeNode* root) {
        if(root==NULL)
            return 0;
        TreeNode *leftchild=root,*rightchild=root;
        int hl=0,hr=0;
        while(leftchild){
            hl++;
            leftchild=leftchild->left;
        }
        while(rightchild){
            hr++;
            rightchild=rightchild->right;
        }
        if(hr==hl)
            return pow(2,hl)-1;
        return 1+countNodes(root->left)+countNodes(root->right);
    }
};

Solution 4:
class Solution {
public:
    /*
        The height of a tree can be found by just going left. Let a single node tree have height 0. 
        Find the height h of the whole tree. If the whole tree is empty, i.e., has height -1, there are 0 nodes.

        Otherwise check whether the height of the right subtree is just one less than that of the whole tree,
        meaning left and right subtree have the same height.
            1. If yes, then the last node on the last tree row is in the right subtree and the left subtree is a full tree of height h-1. 
            So we take the 2^h-1 nodes of the left subtree plus the 1 root node plus recursively the number of nodes in the right subtree.
            
            2. If no, then the last node on the last tree row is in the left subtree and the right subtree is a full tree of height h-2. 
            So we take the 2^(h-1)-1 nodes of the right subtree plus the 1 root node plus recursively the number of nodes in the left subtree.
    */
    int countNodes(TreeNode* root) {
        int h=getHeight(root);
        if(h==-1)  // 空树
            return 0;
        int h1=getHeight(root->right);
        if(h1==h-1) // 最后一层的最右节点在右子树中 左子树是满的
            // 1[root]+pow(2,h-1)-1[左子树]+countNodes(root->right)
            return (1<<h)+countNodes(root->right);
        else // 最后一层的最右节点在左子树中 右子树是满的,树高为h-2
            return (1<<h-1)+countNodes(root->left);
        
    }
private:
    int getHeight(TreeNode *root){
        if(!root)
            return -1;
        return 1+getHeight(root->left); //由于完全二叉树的性质 可以确定树高由左子树确定
    }
};
