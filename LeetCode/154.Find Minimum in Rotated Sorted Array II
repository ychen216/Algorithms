154. Find Minimum in Rotated Sorted Array II

/*
Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates
*/

Solution:
class Solution {
public:
    /*
        idea: 有序的循环数组 有三种形态 选择mid和high比较 然后缩小最小值所在的范围
        \         /           /
         \       /          \/
          \     /
    */
    int findMin(vector<int> &num) {
        int lo = 0;
        int hi = num.size() - 1;
        int mid = 0;
        
        while(lo < hi) {
            mid = lo + (hi - lo) / 2;
            
            if (num[mid] > num[hi]) {
                lo = mid + 1;
            }
            else if (num[mid] < num[hi]) {
                hi = mid;
            }
            else { 
                // When num[mid] == num[hi], we are not sure that 
                // the position of minimum in mid's left or right, so just let upper bound reduce one.
                hi--;
            }
        }
        return num[lo];
    }
};


Solution 2：Binary Search新模板 + 解释
class Solution {
public:
    /*
        如果没有重复元素的话：可以划分为两段上升序列 且前一段的最小值大于后一段的最大值
        然后可以通过比较nums[mid]和nums[end]的关系确定mid所在的区间 然后缩小minima的范围
        下图左 eg. 45 123
        
        然而现在包含了重复元素就不能保持这个特性了因为除了>和<
        还有一种nums[mid]==nums[end]这是不能确定mid出现的位置在哪一段  只能通过一步步减小范围end--
        下图右 eg, 45 12344 这种情况下最坏的情况是O(n)可以用遍历求解
        /       __/ __
        ----       /
           /
    */
    int findMin(vector<int>& nums) {
        int start=0,end=nums.size()-1,mid=0;
        if(start>end){
            return -1;//空数组
        }
        while(start+1<end){
            mid=start+(end-start)/2;
            if(nums[mid]<nums[end]){
                end=mid;
            }
            else if(nums[mid]>nums[end]){
                start=mid;
            }
            else{
                //nums[mid]==nums[end]只能逐步缩小范围
                end--;
            }
        }
        if(nums[start]<=nums[end]){
            return nums[start];
        }
        return nums[end];
    }
};
