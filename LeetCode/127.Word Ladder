127. Word Ladder
/*
Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
*/
Solution:
class Solution {
public:
    //bfs 
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string,int>> q;//word,cnt
        unordered_set<string> visit;
        unordered_set<string> dict(wordList.begin(),wordList.end());//字典
        q.push({beginWord,1});
        visit.insert(beginWord);
        while(!q.empty()){
            auto cur=q.front();q.pop();
            if(cur.first==endWord)
                return cur.second;
            int len=cur.first.length();
            //尝试可能的一位字符的变化
            for(int i=0;i<len;i++){
                for(char j='a';j<='z';j++){
                    if(cur.first[i]==j)continue;
                    string next=cur.first;
                    next[i]=j;
                    if(visit.find(next)==visit.end()&&dict.find(next)!=dict.end()){
                        visit.insert(next);
                        q.push({next,cur.second+1});
                    }
                }
            }
        }
        return 0;
    }
};
