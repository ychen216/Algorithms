127. Word Ladder
/*
Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
*/
Solution:
class Solution {
public:
    //bfs 
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string,int>> q;//word,cnt
        unordered_set<string> visit;
        unordered_set<string> dict(wordList.begin(),wordList.end());//字典
        q.push({beginWord,1});
        visit.insert(beginWord);
        while(!q.empty()){
            auto cur=q.front();q.pop();
            if(cur.first==endWord)
                return cur.second;
            int len=cur.first.length();
            //尝试可能的一位字符的变化
            for(int i=0;i<len;i++){
                for(char j='a';j<='z';j++){
                    if(cur.first[i]==j)continue;
                    string next=cur.first;
                    next[i]=j;
                    if(visit.find(next)==visit.end()&&dict.find(next)!=dict.end()){
                        visit.insert(next);
                        q.push({next,cur.second+1});
                    }
                }
            }
        }
        return 0;
    }
};

update:
class Solution {
public:
    // BSF
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(),wordList.end());
        // endWord不在wordList中 那么必然不存在转换 剪枝
        if(wordSet.find(endWord)==wordSet.end())
            return 0;
        queue<pair<string,int>> q;
        unordered_set<string> visit;
        q.push({beginWord,1});
        visit.insert(beginWord);
        while(!q.empty()){
            auto cur=q.front();
            q.pop();
            if(cur.first==endWord)
                return cur.second;
            for(int i=0;i<cur.first.length();i++){
                char origin=cur.first[i];
                for(char c='a';c<='z';c++){
                    if(c==origin)continue;
                    cur.first[i]=c;//在原串上做变换 避免了字符串重复复制
                    if(wordSet.find(cur.first)!=wordSet.end()&&visit.find(cur.first)==visit.end()){
                        q.push({cur.first, cur.second+1});
                        visit.insert(cur.first);
                    }
                }
                cur.first[i]=origin;//将该位设置为原来的值
                
            }
        }
        return 0;
    }
};

update:
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(),wordList.end());//当做词典 也当做visit数组 在dict中的说明还未使用过
        if(dict.find(endWord)==dict.end())
            return 0;
        if(dict.find(beginWord)!=dict.end())
            dict.erase(beginWord);
        int wordLen=wordList[0].length();
        queue<pair<string,int>> q;
        q.push({beginWord,1});
        while(!q.empty()){
            auto cur=q.front();
            q.pop();
            if(cur.first==endWord)
                return cur.second;
            for(int i=0;i<wordLen;i++){
                char c=cur.first[i];
                for(int j=0;j<26;j++){
                    cur.first[i]=j+'a';
                    if(cur.first[i]==c) continue;
                    if(dict.find(cur.first)!=dict.end()){
                        q.push({cur.first,cur.second+1});
                        dict.erase(cur.first);
                    }
                }
                cur.first[i]=c;
            }
        }
        return 0;
    }
};
