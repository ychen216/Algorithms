106. Construct Binary Tree from Inorder and Postorder Traversal
/*
Given inorder and postorder traversal of a tree, construct the binary tree.
Note:
You may assume that duplicates do not exist in the tree.
*/
Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //后续遍历 最后一个元素是根节点
    TreeNode *helper(vector<int>& inorder, vector<int>& postorder,int is,int ie,int ps,int pe){
        if(is>ie)
            return NULL;
        TreeNode *root=new TreeNode(postorder[pe]);
        int rootid=is;
        //在中序遍历中找根节点
        for(;rootid<=ie;rootid++){
            if(inorder[rootid]==root->val)
                break;
        }
        root->left=helper(inorder,postorder,is,rootid-1,ps,ps+rootid-is-1);
        root->right=helper(inorder,postorder,rootid+1,ie,ps+rootid-is,pe-1);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int len=inorder.size();
        return helper(inorder,postorder,0,len-1,0,len-1);
    }
};
