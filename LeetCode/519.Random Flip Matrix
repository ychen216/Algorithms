519. Random Flip Matrix

/*
You are given the number of rows n_rows and number of columns n_cols of a 2D binary matrix where all values are initially 0.
Write a function flip which chooses a 0 value uniformly at random, changes it to 1, and then returns the position 
[row.id, col.id] of that value. Also, write a function reset which sets all values back to 0. 
Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.

Note:
  1 <= n_rows, n_cols <= 10000
  0 <= row.id < n_rows and 0 <= col.id < n_cols
  flip will not be called when the matrix has no 0 values left.
  the total number of calls to flip and reset will not exceed 1000.

Example 1:
Input: 
["Solution","flip","flip","flip","flip"]
[[2,3],[],[],[],[]]
Output: [null,[0,1],[1,2],[1,0],[1,1]]

Example 2:
Input: 
["Solution","flip","flip","reset","flip"]
[[1,2],[],[],[],[]]
Output: [null,[0,0],[0,1],null,[0,0]]

Explanation of Input Syntax:
  The input is two lists: the subroutines called and their arguments. Solution's constructor has two arguments, 
  n_rows and n_cols. flip and reset have no arguments. Arguments are always wrapped with a list, even if there aren't any.
*/

Solution 1: TEL
class Solution {
public:
    /*
        利用[0,row*col-1]row*col个数字唯一表示矩阵中的元素
        eg. 3*4矩阵  5代表 matrix[5/col][5%col]=matrix[1][1] 第1行1列
        0  1  2  3
        4  5  6  7
        8  9  10 11
        利用数组[0,row*col-1]记录哪些元素被flip了 值1的元素表示已经被flip为1 同时利用一个变量记录还未被flip的元素个数
        每次flip 在未被flip的元素个数内 生成一个随机数 然后在根据随机数在未被flip的元素中选择
    */
    Solution(int n_rows, int n_cols) {
        totalNum=notFlip=n_rows*n_cols;
        cols=n_cols;
        flag=vector<bool>(notFlip,false);
    }
    
    vector<int> flip() {
        assert(notFlip>0);
        int selected=rand()%notFlip; //从未被flip的元素中选择一个
        int cnt=0,index;
        for(index=0;index<totalNum;index++){
            if(flag[index]) continue; //已经被flip
            if(cnt==selected)
                break;
            cnt++;
        }
        notFlip--;
        flag[index]=true;
        return {index/cols,index%cols};
    }
    
    void reset() {
        notFlip=totalNum;
        flag=vector<bool>(notFlip,false);
    }
private:
    int totalNum,notFlip;//元素总个数 还未被flip元素个数
    vector<bool> flag;
    int cols;
};

Solution 2:
class Solution {
public:
    /*
        Fisher–Yates shuffle https://en.wikipedia.org/wiki/Fisher–Yates_shuffle
        So, the steps are:
            1. generate random from 0 to n : m
            2. swap m and n
            3. decrease n
    */
public:
    Solution(int n_rows, int n_cols): row(n_rows), col(n_cols) {
        cnt = row * col;
        srand(time(nullptr));
    }
    
    vector<int> flip() {
        int id = rand() % cnt;

        vector<int> res;
        if (id2pos.find(id) != id2pos.end()) {
            int pos = id2pos[id];
            res = {pos / col, pos % col};
        } else {
            res = {id / col, id % col};
        }

        if (id2pos.find(cnt - 1) != id2pos.end()) {
            id2pos[id] = id2pos[cnt - 1];
        } else {
            id2pos[id] = cnt - 1;
        }
        --cnt;
        return res;
    }
    
    void reset() {
        id2pos.clear();
        cnt = row * col;
    }

private:
    int row = 0;
    int col = 0;
    int cnt = 0;
    unordered_map<int, int> id2pos;

};
