221. Maximal Square
/*
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.
*/

Solution 1:
class Solution {
public:
    /*DP
    dp[i][j]代表以matrix[i][j]为矩阵右下角的正方形的最大边长
    第一行和第一列元素的dp[i][j]值为matrix[i][j] 初始化dp
    dp[0][j]=matrix[0][j] i=0
    dp[i][0]=matrix[i][0] j=0
    dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1 i>0&&j>0 
    */
    int maximalSquare(vector<vector<char>>& matrix) {
        int row=matrix.size();
        if(row==0)
            return 0;
        int col=matrix[0].size();
        if(col==0)
            return 0;
        int dp[row][col]={0};
        int maxSize=0;
        //初始化
        for(int j=0;j<col;j++){
            dp[0][j]=matrix[0][j]-'0';
            maxSize=max(maxSize,dp[0][j]);
        }
        for(int i=0;i<row;i++){
            dp[i][0]=matrix[i][0]-'0';
            maxSize=max(maxSize,dp[i][0]);
        }
        
        for(int i=1;i<row;i++){
            for(int j=1;j<col;j++)
                if(matrix[i][j]=='1'){
                    dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;
                    maxSize=max(maxSize,dp[i][j]);
                }
        }
        return maxSize*maxSize;
    }
};

相同的思想 代码更简洁的版本
class Solution {
public:
    /*
    P[0][j] = matrix[0][j] (topmost row);
    P[i][0] = matrix[i][0] (leftmost column);
    For i > 0 and j > 0: 
        if matrix[i][j] = 0, P[i][j] = 0;
        if matrix[i][j] = 1, P[i][j] = min(P[i - 1][j], P[i][j - 1], P[i - 1][j - 1]) + 1.
    */
    int maximalSquare(vector<vector<char>>& matrix) {
        int row=matrix.size();
        if(row==0)
            return 0;
        int col=matrix[0].size();
        vector<vector<int>> dp(row,vector<int>(col,0));
        int res=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                dp[i][j]=matrix[i][j]-'0';
                if(dp[i][j]&&i>0&&j>0)
                    dp[i][j]=max(dp[i][j],min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]))+1);
                res=max(res,dp[i][j]);
            }
        }
        return res*res;
    }
};

Solution 2:在空间上改进Solution1
class Solution {
public:
    /*DP
    dp[i][j]代表以matrix[i][j]为矩阵右下角的正方形的最大边长
    第一行和第一列元素的dp[i][j]值为matrix[i][j] 初始化dp
    dp[0][j]=matrix[0][j] i=0
    dp[i][0]=matrix[i][0] j=0
    dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1 i>0&&j>0 
    i>0&&j>0时 dp[i][j]只与当前行和前一行的状态有关 用两行保存状态
    */
    int maximalSquare(vector<vector<char>>& matrix) {
        int row=matrix.size();
        if(row==0)
            return 0;
        int col=matrix[0].size();
        if(col==0)
            return 0;
        int cur[col]={0},pre[col]={0};
        int maxSize=0;
        //初始化
        for(int j=0;j<col;j++){
            pre[j]=matrix[0][j]-'0';
            maxSize=max(maxSize,pre[j]);
        }
       
        for(int i=1;i<row;i++){
            //第一列
            cur[0]=matrix[i][0]-'0';
            maxSize=max(maxSize,cur[0]);
            for(int j=1;j<col;j++)
                if(matrix[i][j]=='1'){
                    cur[j]=min(pre[j-1],min(pre[j],cur[j-1]))+1;
                    maxSize=max(maxSize,cur[j]);
                }
            for(int k=0;k<col;k++){
                pre[k]=cur[k];
                cur[k]=0;
            }
        }
        return maxSize*maxSize;
    }
};

update: 空间复杂度降为O(2n)
class Solution {
public:
     /*DP
        dp[i][j]代表以matrix[i][j]为矩阵右下角的正方形的最大边长
        第一行和第一列元素的dp[i][j]值为matrix[i][j] 初始化dp
        dp[0][j]=matrix[0][j] i=0
        dp[i][0]=matrix[i][0] j=0
        dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1 i>0&&j>0&&matrix[i][j]==1
        i>0&&j>0时 dp[i][j]只与当前行和前一行的状态有关 用两行保存状态
    */
    int maximalSquare(vector<vector<char>>& matrix) {
        int m=matrix.size();
        if(m==0)
            return 0;
        int n=matrix[0].size();
        if(n==0)
            return 0;
        int maxEdge=0;
        vector<vector<int>> dp(2,vector<int>(n,0)); //两行交替保存状态 分别存储上一行和当前行的状态
        int preIndex=0; //表示上一行的状态存储在dp[preIndex]中
        // 初始化
        for(int j=0;j<n;j++){
            if(matrix[0][j]=='1'){
                dp[preIndex][j]=1;
                maxEdge=1;
            }
        }
        
        // 遍历1~m-1行
        for(int i=1;i<m;i++){
            // 初始化第一列元素
            int curIndex=1-preIndex;
            dp[curIndex][0]=matrix[i][0]-'0';
            if(dp[curIndex][0]==1)
                maxEdge=max(maxEdge,1);
            for(int j=1;j<n;j++){
                if(matrix[i][j]=='1'){
                    dp[curIndex][j]=min(dp[preIndex][j-1],min(dp[preIndex][j],dp[curIndex][j-1]))+1;
                    maxEdge=max(maxEdge,dp[curIndex][j]);
                }else
                    dp[curIndex][j]=0;
            }
            // 当前行的状态是下一个行的上一个状态 更新preIndex
            preIndex=curIndex;
        }
        return maxEdge*maxEdge;
    }
};
