643. Maximum Average Subarray I

/*
Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.

Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
Note:
  1 <= k <= n <= 30,000.
  Elements of the given array will be in the range [-10,000, 10,000].
*/

Solution 1:Time Limit Exceeded
class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        int size=nums.size();
        double sum[size]={0};//记录以第i个数为起始的k元组的和
        for(int i=0,j;i<size;i++){
            //第i个数可能出现在前k个组里
            for(j=0;i-j>=0&&j<k;j++)
                sum[i-j]+=nums[i];
        }
        int limit=size-k;//最后一组有k个数的元组 首元素下标
        double maxSum=-INT_MAX;
        for(int i=0;i<=limit;i++)
            maxSum=max(maxSum,sum[i]);
        return maxSum/k;
    }
};

Solution 2:滑动窗口
class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        int size=nums.size();
        double sum=0,res;
        // 第一个长度为k的子数组
        for(int i=0;i<k;i++)
            sum+=nums[i];
        res=sum;
        // 遍历子数组可能的右边界
        for(int i=k;i<size;i++){
            sum+=nums[i]-nums[i-k];
            res=max(res,sum);   
        }
        return res/k;
    }
};
