258. Add Digits

/*
Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.

For example:

Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.

Follow up:
Could you do it without any loop/recursion in O(1) runtime?
*/
Solution 1:
class Solution {
public:
    int addDigits(int num) {
        while(num>9){
            int temp=0;
            while(num){
                temp+=num%10;
                num/=10;
            }
            num=temp;
        }
        return num;
    }
};


Solution 2:
class Solution {
public:
    /*
    The essence of this problem is that 10^n ≡ 1 (mod 9), and thus a_n10^n + ... + a_110 + a_0 ≡ a_n + ... + a_1 + a_0 (mod 9). 
    This process can be continued until a number less than 9 is gotten, i.e. num % 9. For any digit n, n = n % 9 unless n = 9. 
    The only confusing case is n % 9 = 0, but addDigits(num) = 0 if and only if num = 0, otherwise it should be 9 in fact.
    */
    int addDigits(int num) {
        int res=num%9;
        return (res!=0||num==0)?res:9;
    }
};

Solution 3:
class Solution {
public:
    /*
    The problem, widely known as digit root problem, has a congruence formula:
    https://en.wikipedia.org/wiki/Digital_root#Congruence_formula
    For base b (decimal case b = 10), the digit root of an integer is:

    dr(n) = 0 if n == 0
    dr(n) = (b-1) if n != 0 and n % (b-1) == 0
    dr(n) = n mod (b-1) if n % (b-1) != 0
 or
    dr(n) = 1 + (n - 1) % 9
    Note here, when n = 0, since (n - 1) % 9 = -1, the return value is zero (correct).

    From the formula, we can find that the result of this problem is immanently periodic, with period (b-1).

    Output sequence for decimals (b = 10):    
    */
    int addDigits(int num) {
        return 1+(num-1)%9;
    }
};
