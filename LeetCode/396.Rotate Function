396. Rotate Function
/*
Given an array of integers A and let n to be its length.

Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a "rotation function" F on A as follow:

F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].

Calculate the maximum value of F(0), F(1), ..., F(n-1).

Note:
n is guaranteed to be less than 105.

Example:
A = [4, 3, 2, 6]
  F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
  F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
  F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
  F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
*/

Solution:
class Solution {
public:
    /*
    F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]
    F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]
           = 0 * Bk[1] + 1 * Bk[2] + ... + (n-2) * Bk[n-1] + (n-1) * Bk[0]
    Then,
    F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]
              = (Bk[0] + ... + Bk[n-1]) - nBk[0]
              = sum - nBk[0]
    F(k) = F(k-1) + sum - nBk[0]
    Bk[0]:
    k = 0; B[0] = A[0];
    k = 1; B[0] = A[len-1];
    k = 2; B[0] = A[len-2];
    ...
    */
    int maxRotateFunction(vector<int>& A) {
        int F=0,sum=0;
        int len=A.size();
        for(int i=0;i<len;i++){
            F+=i*A[i];//F0
            sum+=A[i];
        }
        int res=F;
        for(int i=len-1;i>=1;i--){
            F=F+sum-len*A[i];
            res=max(F,res);
        }
        return res;
    }
};

update:
class Solution {
public:
    // F[k]=F[k-1]+sum-n*A[n-k] k>0 这里将sum F设置为long是因为测试用例里有[INT_MAX,INT_MAX]
    int maxRotateFunction(vector<int>& A) {
        long sum=0;
        long F=0;
        int n=A.size();
        for(int i=0;i<n;i++){
            sum+=A[i];
            F+=i*A[i];
        }
        long res=F;
        for(int i=1;i<n;i++){
            F=F-(long)n*A[n-i]+sum;
            res=max(F,res);
        }
        return res;
    }
};


update：
class Solution {
public:
    /*
        F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]
        F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]
               = 0 * Bk-1[n-1] + 1 * Bk-1[0] + ... + (n-2) * Bk-1[n-3] + (n-1) * Bk-1[n-2]
        Then,
        F(k) - F(k-1) = (1-n)Bk-1[n-1] + Bk-1[1] + Bk-1[2] + ... + Bk-1[n-1]
                  = (Bk-1[0] + ... + Bk-1[n-1]) - nBk-1[n-1]
                  = sum - nBk-1[n-1]
        F(k) = F(k-1) + sum - nBk-1[n-1]
        Bk-1[n-1]:
        k-1 = 0; B[n-1] = A[n-1];
        k-1 = 1; B[n-1] = A[n-2];
        k-1 = 2; B[n-1] = A[n-3];
        ...
        
    */
    int maxRotateFunction(vector<int>& A) {
        int F=0, sum=0, n=A.size();
        for(int i=0;i<n;i++){
            F+=i*A[i];
            sum+=A[i];
        }
        int res=F;
        for(int i=n-1;i>0;i--){
            F=F+sum-n*A[i];
            res=max(res,F);
        }
        return res;
    }
};
