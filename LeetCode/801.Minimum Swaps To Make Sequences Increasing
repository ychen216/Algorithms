801. Minimum Swaps To Make Sequences Increasing

/*
We have two integer sequences A and B of the same non-zero length.

We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)

Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.

Example:
Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
Explanation: 
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.

Note:
  A, B are arrays with the same length, and that length will be in the range [1, 1000].
  A[i], B[i] are integer values in the range [0, 2000].
*/

Solution:
class Solution {
public:
    /*  DP
        state function:
            1.state(i, 0) is the minimum swaps to make A[0..i] and B[0..i] both increasing if we donot swap A[i] with B[i]
            2.state(i, 1) is the minimum swaps to make A[0..i] and B[0..i] both increasing if we do swap A[i] with B[i]
        goal state: min{state(n - 1, 0), state(n - 1, 1)} where n = A.length
        state transition:
        note : We define case 1: A[i - 1] < A[i] && B[i - 1] < B[i], case 2: A[i - 1] < B[i] && B[i - 1] < A[i].
        Since the given input always makes it possible, at least one of the two cases above should be satisfied.
        
        if (A[i - 1] < A[i] && B[i - 1] < B[i] && A[i - 1] < B[i] && B[i - 1] < A[i])
	        // doesn't matter whther the previous is swapped or not
	        state(i, 0) = Math.min(state(i, 0), state(i, 1));
	        state(i, 1) = Math.min(state(i, 0), state(i, 1)) + 1;
	else if (A[i - 1] < A[i] && B[i - 1] < B[i])
	        // following the previous action
	        state(i, 0) =  state(i - 1, 0);
	        state(i, 1) =  state(i - 1, 1) + 1;
	else if (A[i - 1] < B[i] && B[i - 1] < A[i]) 
	        // opposite to the previous action
	        state(i, 0) = state(i - 1, 1);
	        state(i, 1) = state(i - 1, 0) + 1;
    */
    int minSwap(vector<int>& A, vector<int>& B) {
        int n=A.size();
        vector<vector<int>> dp(n,vector<int>(2,0));
        // 初始化
        dp[0][0]=0,dp[0][1]=1;
        for(int i=1;i<n;i++){
            if(A[i-1]<A[i]&&B[i-1]<B[i]&&A[i-1]<B[i]&&B[i-1]<A[i]){
                // 满足条件那么不论i-1是否交换 i不论是否交换都可以保证AB在[0,i]上递增
                dp[i][0]=min(dp[i-1][0],dp[i-1][1]);
                dp[i][1]=min(dp[i-1][0],dp[i-1][1])+1;
            }
            else if(A[i-1]<A[i]&&B[i-1]<B[i]){
                // i-1一定是不能交换的才行 否则在A的数组里就是B[i-1] A[i]在B的数组里就是A[i-1] B[i]
                // 否则在不交换i的情况下又有A[i-1]<B[i]&&B[i-1]<A[i]不成立 是不可能做到不交换但是保持AB在[0,i]是递增的
                dp[i][0]=dp[i-1][0];
                // 同理如果i位交换 i-1位也必须要交换 否则不能保证AB递增
                dp[i][1]=dp[i-1][1]+1;
            }
            else if(A[i-1]<B[i]&&B[i-1]<A[i]){
                // 与上面的情况相反 i是否交换 与i-1的情况应该相反
                dp[i][0]=dp[i-1][1];
                dp[i][1]=dp[i-1][0]+1;
            }
        }
        return min(dp[n-1][0],dp[n-1][1]);
    }
};

update:
class Solution {
public:
    /*  DP
        state function:
            1.state(i, 0) is the minimum swaps to make A[0..i] and B[0..i] both increasing if we donot swap A[i] with B[i]
            2.state(i, 1) is the minimum swaps to make A[0..i] and B[0..i] both increasing if we do swap A[i] with B[i]
        goal state: min{state(n - 1, 0), state(n - 1, 1)} where n = A.length
        state transition:
            note : We define case 1: A[i - 1] < A[i] && B[i - 1] < B[i], case 2: A[i - 1] < B[i] && B[i - 1] < A[i].
            Since the given input always makes it possible, at least one of the two cases above should be satisfied.
        
        if (A[i - 1] < A[i] && B[i - 1] < B[i] && A[i - 1] < B[i] && B[i - 1] < A[i])
	        // doesn't matter whther the previous is swapped or not
	        state(i, 0) = Math.min(state(i, 0), state(i, 1));
	        state(i, 1) = Math.min(state(i, 0), state(i, 1)) + 1;
        else if (A[i - 1] < A[i] && B[i - 1] < B[i])
                // following the previous action
                state(i, 0) =  state(i - 1, 0);
                state(i, 1) =  state(i - 1, 1) + 1;
        else if (A[i - 1] < B[i] && B[i - 1] < A[i]) 
                // opposite to the previous action
                state(i, 0) = state(i - 1, 1);
                state(i, 1) = state(i - 1, 0) + 1;
        还可以改进空间复杂度O(n^2)==>O(1)
    */
    int minSwap(vector<int>& A, vector<int>& B) {
        int n=A.size();
        int swap=1,notswap=0,tmp; //初始化第一个元素的情况
        for(int i=1;i<n;i++){
            if(A[i-1]<A[i]&&B[i-1]<B[i]&&A[i-1]<B[i]&&B[i-1]<A[i]){
                // 满足条件那么不论i-1是否交换 i不论是否交换都可以保证AB在[0,i]上递增
                tmp=min(swap,notswap);
                notswap=tmp;
                swap=tmp+1;
            }
            else if(A[i-1]<A[i]&&B[i-1]<B[i]){
                // i-1一定是不能交换的才行 否则在A的数组里就是B[i-1] A[i]在B的数组里就是A[i-1] B[i]
                // 否则在不交换i的情况下又有A[i-1]<B[i]&&B[i-1]<A[i]不成立 是不可能做到不交换但是保持AB在[0,i]是递增的
                notswap=notswap;
                // 同理如果i位交换 i-1位也必须要交换 否则不能保证AB递增
                swap=swap+1;
            }
            else if(A[i-1]<B[i]&&B[i-1]<A[i]){
                // 与上面的情况相反 i是否交换 与i-1的情况应该相反
                tmp=notswap;
                notswap=swap;
                swap=tmp+1;
            }
        }
        return min(swap,notswap);
    }
};

