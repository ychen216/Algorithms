648. Replace Words

/*
In English, we have a concept called root, which can be followed by some other words to form another longer word - 
let's call this word successor. For example, the root an, followed by other, which can form another word another.

Now, given a dictionary consisting of many roots and a sentence. You need to replace all the successor in the sentence 
with the root forming it. If a successor has many roots can form it, replace it with the root with the shortest length.
You need to output the sentence after the replacement.

Example 1:
Input: dict = ["cat", "bat", "rat"]
sentence = "the cattle was rattled by the battery"
Output: "the cat was rat by the bat"
Note:
  The input will only have lower-case letters.
  1 <= dict words number <= 1000
  1 <= sentence words number <= 1000
  1 <= root length <= 100
  1 <= sentence words length <= 1000
*/

Solution 1:
class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        if(dict==null||dict.size()==0)
            return sentence;
        Set<String>  set=new HashSet<>();
        for(String s:dict)
            set.add(s);
        StringBuilder sb=new StringBuilder();
        String []words=sentence.split("\\s+");
        for(int j=0;j<words.length;j++){
            String prefix="";
            for(int i=1;i<=words[j].length();i++){
                prefix=words[j].substring(0,i);
                if(set.contains(prefix))
                    break;
            }
            if(j==0)
                sb.append(prefix);
            else
                sb.append(" "+prefix);
        }
        return sb.toString();
    }
}

Solution 2:
class Solution {
public:
    // trie 
    string replaceWords(vector<string>& dict, string sentence) {
        if(dict.size()==0)
            return sentence;
        Node *root=build(dict);
        stringstream ins(sentence),outs;
        string word,out;
        while(ins>>word){
            if(findRoot(root,word,out))
                outs<<out<<" ";
            else
                outs<<word<<" ";
        }
        string res=outs.str();
        return res.substr(0,res.length()-1);
    }
struct Node{
    Node *next[26];
    string word;
    bool flag;
    Node(){
        for(int i=0;i<26;i++)
            next[i]=NULL;
        word="";
        flag=false;
    }
};
    
private:
    Node *build(vector<string>&dict){
        Node *root=new Node();
        Node *cur=NULL;
        for(auto&word:dict){
            cur=root;
            for(auto&c:word){
                if(!cur->next[c-'a'])
                    cur->next[c-'a']=new Node();
                cur=cur->next[c-'a'];
            }
            cur->flag=true;
            cur->word=word;
        }
        return root;
    }
    
    bool findRoot(Node *root,string &word,string &rootWord){
        Node *cur=root;
        for(auto &c:word){
            if(!cur->next[c-'a'])
                return false;
            cur=cur->next[c-'a'];
            if(cur->flag){
                rootWord=cur->word;
                return true;
            }
        }
        return false;
    }
};
