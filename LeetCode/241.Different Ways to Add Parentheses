241. Different Ways to Add Parentheses

/*
Given a string of numbers and operators, return all possible results from computing all the different possible ways 
to group numbers and operators. The valid operators are +, - and *.


Example 1
Input: "2-1-1".
((2-1)-1) = 0
(2-(1-1)) = 2
Output: [0, 2]

Example 2
Input: "2*3-4*5"
(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]
*/

Solution:
class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> res;
        int len=input.length();
        for(int i=0;i<len;i++){
            char c=input[i];
            if(c=='+'||c=='-'||c=='*'){
                vector<int> res1=diffWaysToCompute(input.substr(0,i));
                vector<int> res2=diffWaysToCompute(input.substr(i+1));
                for(auto n1:res1){
                    for(auto n2:res2){
                        switch(c){
                            case '+':
                                res.push_back(n1+n2);break;
                            case '-':
                                res.push_back(n1-n2);break;
                            case '*':
                                res.push_back(n1*n2);break;
                        }
                    }
                }
            }
        }
        // if the input string contains only number
        if (res.empty())
            res.push_back(stoi(input));
        return res;
    }
};

Solution 2: memorized recursive 
class Solution {
public:
    /*  
        利用递归 括号都是加在双目运算符的两侧 
        分别得出两侧有多少种不同的计算结果 然后根据运算符进行两两计算
        同时可以利用memorized方法降低时间复杂度
    */
    vector<int> diffWaysToCompute(string input) {
        vector<int> res;
        for(int i=0;i<input.length();i++){
            char c=input[i];
            if(c=='+'||c=='-'||c=='*'){
                vector<int> res1,res2;
                string left=input.substr(0,i);
                string right=input.substr(i+1);
                if(mmp.find(left)==mmp.end()){
                    mmp[left]=diffWaysToCompute(left);   
                }
                res1=mmp[left];
                if(mmp.find(right)==mmp.end()){
                    mmp[right]=diffWaysToCompute(right);
                }
                res2=mmp[right];
                
                for(auto i:res1){
                    for(auto j:res2){
                        if(c=='+')
                            res.push_back(i+j);
                        else if(c=='-')
                            res.push_back(i-j);
                        else if(c=='*')
                            res.push_back(i*j);
                    }
                }
            }
        }
        // 只有一个数字的情况
        if(res.empty())
            res.push_back(stoi(input));
        return res;
    }
private:
    unordered_map<string,vector<int>> mmp;//存储表达式s 不同加括号方式得出的不同结果
};

update:
class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        unordered_map<string,vector<int>> mmp;
        return helper(input,mmp);
    }
private:
    vector<int> helper(string input,unordered_map<string,vector<int>>&mmp){
        if(mmp.find(input)!=mmp.end()){
            return mmp[input];
        }
        vector<int> res;
        bool onlyNum=true;
        for(int i=0;i<input.length();i++){
            char c=input[i];
            if(c=='+'||c=='-'||c=='*'||c=='/'){
                onlyNum=false;
                vector<int> left=helper(input.substr(0,i),mmp);
                vector<int> right=helper(input.substr(i+1),mmp);
                for(auto num1:left){
                    for(auto num2:right){
                        if(c=='+'){
                            res.push_back(num1+num2);
                        }else if(c=='-'){
                            res.push_back(num1-num2);
                        }else if(c=='*'){
                            res.push_back(num1*num2);
                        }else{
                            res.push_back(num1/num2);
                        }
                    }
                }
            }
        }
        if(onlyNum){
            res.push_back(stoi(input));
        }
        mmp[input]=res;
        return res;
    }
};
