785. Is Graph Bipartite?

/*
Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

Example 1:
Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation: 
The graph looks like this:
0----1
|    |
|    |
3----2
We can divide the vertices into two groups: {0, 2} and {1, 3}.
Example 2:
Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
Output: false
Explanation: 
The graph looks like this:
0----1
| \  |
|  \ |
3----2
We cannot find a way to divide the set of nodes into two independent subsets.
 

Note:
  graph will have length in range [1, 100].
  graph[i] will contain integers in range [0, graph.length - 1].
  graph[i] will not contain i or duplicate values.
  The graph is undirected: if any element j is in graph[i], then i will be in graph[j].

*/

Solution:
class Solution {
public:
    /*
        利用染色法,一条边的两个节点分别染上不同颜色 并利用BFS
        如果所有边都可以染色成功那么就是bipartite 如果出现冲突就不是
    */
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size(); // 节点数
        vector<int> color(n,-1); // -1未染色 0,1分别为两种颜色
        for(int i=0;i<n;i++){
            if(color[i]==-1 && graph[i].size()>0){
                color[i]=1;
                queue<int> q;
                q.push(i);
                while(!q.empty()){
                    int cur=q.front();
                    q.pop();
                    for(auto &v:graph[cur]){
                        if(color[v]==-1){
                            color[v]=1-color[cur];
                            q.push(v);
                        }else if(color[v]==color[cur]){
                            // 出现冲突
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
};

update:
class Solution {
public:
    /*
        主要思想就是利用染色法来判断是否所有的边的两个端点都分属于两个颜色集。
        如果遇到一条边两个端点颜色相同，冲突，则不是二部图。
        具体的:通过对还未染色的节点进行染色，将与他相邻接的节点颜色设置为不同颜色。判断这么操作后会不会产生冲突(不断拓展、遍历所有这个节点可达的通路上的节点是否有冲突)
        可以通过BFS、DFS来拓展。
    */
    // DFS
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> colors(n,0);//0:unvisit,1:blue,-1:red
        for(int i=0;i<n;i++){
            //还未染色,默认染成1,进行染色后、拓展检查这样是否会造成冲突
            if(colors[i]==0&&!check(graph,colors,i,1)){
                return false;
            }
        }
        return true;
    }
private:
    //希望colors[cur_node]的颜色是color
    bool check(vector<vector<int>>&graph, vector<int>&colors,int cur_node,int color){
        if(colors[cur_node]!=0){
            return colors[cur_node]==color;
        }
        //还未染色
        colors[cur_node]=color;
        //判断是否会对其他联通的节点造成冲突
        for(auto &next_node: graph[cur_node]){
            if(!check(graph,colors,next_node,-color)){
                return false;
            }
        }
        return true;
    }
};
