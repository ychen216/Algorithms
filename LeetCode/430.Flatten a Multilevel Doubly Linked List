430. Flatten a Multilevel Doubly Linked List

/*
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

Example:

Input:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL

Output:
1-2-3-7-8-11-12-9-10-4-5-6-NULL

*/

Solution:
/*
// Definition for a Node.
class Node {
public:
    int val = NULL;
    Node* prev = NULL;
    Node* next = NULL;
    Node* child = NULL;

    Node() {}

    Node(int _val, Node* _prev, Node* _next, Node* _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
public:
    /*
        从头遍历 遇到一个节点p有孩子节点,处理一下,举例来说:
        遍历到3,有孩子节点 把7 8 9 10整个接到主链上
         1---2---3---7---8---9---10--4---5---6--NULL
                         |
                         11--12--NULL
        继续遍历到8 把8的孩子链  接到主链上 得到1-2-3-7-8-11-12-9-10-4-5-6-NULL
    */
    Node* flatten(Node* head) {
        for(Node *cur=head;cur;cur=cur->next){
            if(cur->child){
                // 将孩子链  接到主链上
                Node *next=cur->next;
                Node *firstChild=cur->child;
                cur->next=firstChild;
                firstChild->prev=cur;
                cur->child=NULL;
                // 找到孩子链的最后一个节点
                Node *p=firstChild;
                while(p->next)
                    p=p->next;
                p->next=next;
                if(next!=NULL)
                    next->prev=p;
            }
        }
        return head;
    }
};
