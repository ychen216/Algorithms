123. Best Time to Buy and Sell Stock III
/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

*/

Solution:
class Solution {
public:
    /*
    参考188的思想
    利用背包的思想 背包的容量至多容纳k次交易
    sell[i]=max(sell[i],buy[i]+price[j]) 表示进行至多i次交易后没有持有股票时的最高利润 
    buy[i]是因为一次买一次卖算一次交易 卖出时不增加交易次数
    buy[i]=max(buy[i],(i>0?sell[i-1]:0)-price[j])表示进行至多i次交易后持有股票时的最高利润
    */
    int maxProfit(vector<int>& prices) {
        int size=prices.size();
        if(size<2)
            return 0;
        vector<int> buy(3,INT_MIN);
        vector<int> sell(3,0);
        for(int i=0;i<size;i++){
            for(int k=2;k>=1;k--){
                sell[k]=max(sell[k],buy[k]+prices[i]);
                buy[k]=max(buy[k],sell[k-1]-prices[i]);
            }
        }
        return sell[2];
    }
};
