728. Self Dividing Numbers
/*
A self-dividing number is a number that is divisible by every digit it contains.
For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
Also, a self-dividing number is not allowed to contain the digit zero.
Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:
The boundaries of each input argument are 1 <= left <= right <= 10000.
*/
Solution:
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        
        vector<int> res;
        for(int i=left;i<=right;i++){
            string num=to_string(i);
            if(num.find("0")!=string::npos)
                continue;
            bool ok=true;
            for(int j=0;j<num.length();j++){
                if(i%(num[j]-'0')){
                    ok=false;
                    break;
                }
            }
            if(ok)
                res.push_back(i);
        }
        return res;
    }
};


Solution 2:
class Solution {
public:
    // 简单验证每一个元素
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> res;
        for(int i=left;i<=right;i++){
            int num=i;
            bool ok=(num==0?false:true);
            // 特别注意每次用原来的数i做被除数 在num上获得i的每一位数
            while(ok&&num!=0){
                int reminder=num%10;
                if(reminder==0||i%reminder!=0)
                    ok=false;
                num/=10;
            }
            if(ok)
                res.push_back(i);
        }
        return res;
    }
};
