565. Array Nesting
/*
A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]],
and then A[A[A[i]]]… By that analogy, we stop adding right before a duplicate element occurs in S.

Example 1:
Input: A = [5,4,0,3,1,6,2]
Output: 4
Explanation: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

One of the longest S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
Note:
N is an integer within the range [1, 20,000].
The elements of A are all distinct.
Each element of A is an integer within the range [0, N-1].
*/

Solution:
class Solution {
public:
    /*
        因为数组中的每一个元素都是不同的 每一个集合里的元素构成一个环C 
        这个环里的每一个元素为起始遍历 最后得到的结果是一致的(同一个环) 不理解可以画图
        所以将每一个已经遍历过的的元素标记 避免重复计算
    */
    int arrayNesting(vector<int>& nums) {
        int n=nums.size();
        int res=0;
        for(int i=0;i<n;i++){
            int cnt=0,p=i,temp;
            while(p>=0&&nums[p]!=-1){
                cnt++;
                temp=nums[p];
                nums[p]=-1;
                p=temp;
            }
            res=max(res,cnt);
        }
        return res;
    }
};

update:
class Solution {
public:
    /*
        因为数组中的每一个元素都是不同的 每一个集合里的元素构成一个环C 
        这个环里的每一个元素为起始遍历 最后得到的结果是一致的(同一个环) 不理解可以画图
        所以将每一个已经遍历过的的元素标记 避免重复计算
        就是比较数组中的几个环的长度
    */
    int arrayNesting(vector<int>& nums) {
        int res=0;
        for(int i=0;i<nums.size();i++){
            int cnt=0,tmp;
            for(int j=i;nums[j]!=-1;cnt++){
                tmp=j;
                j=nums[j];//更新下一跳位置
                nums[tmp]=-1;//标记为已访问
            }
            res=max(res,cnt);
        }
        return res;
    }
};
