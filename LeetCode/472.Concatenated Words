472. Concatenated Words
/*
Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.
*/

Solution:
class Solution {
public:
    //一个字符串只可能由比他短的字符串拼接
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        vector<string> res;
        unordered_set<string> preString;
        sort(words.begin(),words.end(),[&](string &s1,string &s2){return s1.size()<s2.size();});//字符串从短到长排序
        for(auto &w:words){
            if(canForm(w,preString))
                res.push_back(w);
            preString.insert(w);
        }
        return res;
    }
private:
    //word是否可以由比他短的其他字符串拼接成
    bool canForm(string &w,unordered_set<string>&dict){
        if(dict.empty())return false;
        int len=w.length();
        bool dp[len+1];// dp[i]表示word[0-i-1]可以被成功拼接
        dp[0]=true;//初始化空串 可以拼接成功
        for(int i=1;i<=len;i++){
            dp[i]=false;
            //寻找已经成功拼接的点j 在其后继续拼接 看是否能够成功j-i部分 
            for(int j=0;j<i;j++){
                if(dp[j]&&dict.find(w.substr(j,i-j))!=dict.end()){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[len];
    }
};
