329.Longest Increasing Path in a Matrix

/*
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:
nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:
nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
*/

Solution:
class Solution {
public:
    /*DP dp[i][j]表示 以(i,j)结尾的最长递增路径长度
    memorized dfs
    不需要visit数组判断是否走过 因为要保证matrix[i][j]<=matrix[x][y] 所以i,j不会重新走到x,y处
    */
    // dp[i][j]表示以i,j结尾的LIP 
    // dp[i][j]=max(1,max(1+dp[x][y])) xy是ij的上下左右且matrix[i][j]>matrix[x][y]
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int r=matrix.size();
        if(r==0){
            return 0;
        }
        int c=matrix[0].size();
        if(c==0){
            return 0;
        }
        vector<vector<int>> dp(r,vector<int>(c,0));
        int res=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                res=max(res,dfs(matrix,dp,i,j,r,c));
            }
        }
        return res;
    }
private:
    int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};
    int dfs(vector<vector<int>> &matrix,vector<vector<int>> &dp,int x,int y,int r,int c){
        if(dp[x][y]!=0){
            return dp[x][y];
        }
        int res=0,xx,yy;
        for(int i=0;i<4;i++){
            xx=x+dx[i];
            yy=y+dy[i];
            if(xx<0||xx>=r||yy<0||yy>=c||matrix[xx][yy]>=matrix[x][y]) continue;
            res=max(res,dfs(matrix,dp,xx,yy,r,c));
        }
        dp[x][y]=res+1;
        return dp[x][y];
    }
};
};

update:
class Solution {
public:
    // dp[i][j]表示以i,j结尾的LIP 
    // dp[i][j]=max(1,max(1+dp[x][y])) xy是ij的上下左右且matrix[i][j]>matrix[x][y]
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int r=matrix.size();
        if(r==0)
            return 0;
        int c=matrix[0].size();
        if(c==0)
            return 0;
        vector<vector<int>> dp(r,vector<int>(c,0));//以ij结尾的LIP
        vector<vector<bool>> visit(r,vector<bool>(c,false));
        int maxLen=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                maxLen=max(maxLen,dfs(matrix,dp,visit,i,j,r,c));
            }
        }
        return maxLen;
    }
private:
    int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};
    int dfs(vector<vector<int>>&matrix,vector<vector<int>> &dp,vector<vector<bool>>&visit,int x,int y,int row,int col){
        if(visit[x][y]){
            return dp[x][y];
        }
        int maxLen=1;
        for(int i=0;i<4;i++){
            int xx=x+dx[i];
            int yy=y+dy[i];
            if(xx<0||xx>=row||yy<0||yy>=col||matrix[x][y]<=matrix[xx][yy]) continue;
            maxLen=max(maxLen,1+dfs(matrix,dp,visit,xx,yy,row,col));
        }
        dp[x][y]=maxLen;
        visit[x][y]=true;
        return dp[x][y];
    }
};
