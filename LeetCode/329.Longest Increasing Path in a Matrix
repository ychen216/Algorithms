c
/*
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:
nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:
nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
*/

Solution:
class Solution {
public:
    /*DP dp[i][j]表示 以(i,j)结尾的最长递增路径长度
    memorized dfs
    不需要visit数组判断是否走过 因为要保证matrix[i][j]<=matrix[x][y] 所以i,j不会重新走到x,y处
    */
   
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int row=matrix.size();
        if(row==0)
            return 0;
        int col=matrix[0].size();
        if(col==0)
            return 0;
        vector<vector<int>> dp(row,vector<int>(col,0));
        int res=1,temp;
        //遍历
        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++){
                temp=dfs(matrix,dp,i,j,row,col);
                res=max(temp,res);
            }
        return res;
    }
private:
    int dfs(vector<vector<int>>&matrix,vector<vector<int>>&dp,int i,int j,int row,int col){
        if(dp[i][j]!=0)
            return dp[i][j];
        int res=1;
        int dx[]={-1,1,0,0},dy[]={0,0,-1,1};
        //上下左右
        for(int k=0;k<4;k++){
            int x=dx[k]+i;
            int y=dy[k]+j;
            if(x<0||x>=row||y<0||y>=col||matrix[x][y]>=matrix[i][j])continue;
            int len=1+dfs(matrix,dp,x,y,row,col);
            res=max(res,len);
        }
        dp[i][j]=res;
        return res;
    }
};
