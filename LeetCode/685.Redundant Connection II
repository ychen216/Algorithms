685. Redundant Connection II

/*
In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.

The given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, ..., N), with one additional directed edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] that represents a directed edge connecting nodes u and v, where u is a parent of child v.

Return an edge that can be removed so that the resulting graph is a rooted tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given directed graph will be like this:
  1
 / \
v   v
2-->3
Example 2:
Input: [[1,2], [2,3], [3,4], [4,1], [1,5]]
Output: [4,1]
Explanation: The given directed graph will be like this:
5 <- 1 -> 2
     ^    |
     |    v
     4 <- 3
Note:
  The size of the input 2D-array will be between 3 and 1000.
  Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.
*/

Solution:
class Solution {
public:
    /*
    这道题要我们从给出边中删去一条边，使有向图成为一棵树。 
    显然有两种情况： 
    1.有个节点有两个父亲 
    2.有环 
    因此我们先遍历一次所有边，看看是否有节点有两个父亲，有的话记录下来，记这两条边为e1，e2
    并且把后面出现的那条边e2删除，然后判断剩余边是否是一棵合法树，是则应删除e2，否则应删除e1。 
    如果没有节点有两个父亲，就意味着有一个包括了根节点的环。一条一条边加入构图，看看是否成环，只需判断加入的边u，v是否有共同祖先。
    可以利用并查集来做
    */
    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
        int n=edges.size();//节点数 一颗有n个节点的树有n-1条边 加上一条可删除的边 共n条边
        vector<int> parent(n+1,0);//节点从1开始计数 把每一个节点的父节点设为0
        vector<int> cand1,cand2;//存储有两个父亲的节点的无效边 作为要删除的候选边
        for(auto &edge:edges){
            if(parent[edge[1]]!=0){
                //有两个父节点
                cand1={parent[edge[1]],edge[1]};
                cand2=edge;
                edge[1]=0;//删除cand2
            }
            else
                parent[edge[1]]=edge[0];
        }
        //初始化并查集
        for(int i=1;i<=n;i++)parent[i]=i;
        for(auto &edge:edges){
            if(edge[1]==0)continue;//删除的cand2
            int v=edge[0],u=edge[1];
            int pu=findParent(parent,u),pv=findParent(parent,v);
            if(pu==pv)//删除cand2的情况下还有环 返回cand1 或者没有节点有两个父节点 这时候edge的加入造成了环
                return cand1.empty()?edge:cand1;
            parent[u]=pv;
        }
        return cand2;
    }
private:
    int findParent(vector<int> parent,int i){
        return parent[i]==i?i:parent[i]=findParent(parent,parent[i]);
    }
};
