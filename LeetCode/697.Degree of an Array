697. Degree of an Array
/*
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of 
any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
Note:
  nums.length will be between 1 and 50,000.
  nums[i] will be an integer between 0 and 49,999.
*/

Solution：
class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        int maxfreq=0;
        vector<int> v;//出现次数最多的元素
        map<int,int> cntmap;//每个数字出现的频率
        map<int,int> firstindexmap;//每个数字最先出现和最后出现的下标
        map<int,int> lastindexmap;
        int size=nums.size();
        for(int i=0;i<size;i++){
            if(cntmap.count(nums[i])){
                cntmap[nums[i]]++;
                lastindexmap[nums[i]]=i;
            }
            else{
                cntmap[nums[i]]=1;
                firstindexmap[nums[i]]=lastindexmap[nums[i]]=i;
            }
            if(maxfreq<cntmap[nums[i]]){
                maxfreq=cntmap[nums[i]];
                v.clear();
                v.push_back(nums[i]);
            }
            else if(maxfreq==cntmap[nums[i]])
                v.push_back(nums[i]);
        }
        int smallLen=INT_MAX;
        for(int j=0;j<v.size();j++){
            smallLen=min(smallLen,lastindexmap[v[j]]-firstindexmap[v[j]]+1);
        }
        return smallLen;
    }
};
