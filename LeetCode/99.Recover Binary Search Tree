99. Recover Binary Search Tree
/*
Two elements of a binary search tree (BST) are swapped by mistake.
Recover the tree without changing its structure.
Note:
  A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*中序遍历二叉树，出现的节点的值会升序排序，如果有两个节点位置错了，那肯定会出现降序。  
    设置一个pre节点指针，记录当前节点中序遍历时的前节点，如果当前节点小于pre节点的值，说明需要调整次序。  
    如果在中序遍历时节点值出现了两次降序，第一个错误的节点为第一次降序时较大的节点，第二个错误节点为第二次降序时较小的节点。  
    比如，原来的搜索二叉树在中序遍历的节点值依次为{1,2,3,4,5}，如果因为两个节点位置错了而出现{1,5,3,4,2}，  
    第一次降序为5->3，所以第一个错误节点为5，第二次降序为4->2,所以第二个错误节点为2，将5和2换过来就可以恢复
    */
    
    void recoverTree(TreeNode* root) {
        if(root==NULL)
            return;
        TreeNode *mistake1=NULL;
        TreeNode *mistake2=NULL;
        TreeNode *p=root,*pre=NULL;
        stack<TreeNode *> st;
        //中序遍历
        while(p!=NULL||!st.empty()){
            if(p!=NULL){
                st.push(p);
                p=p->left;
            }else{
                p=st.top();
                st.pop();
                //出现降序
                if(pre!=NULL&&p->val<pre->val){
                    if(mistake1==NULL)
                        mistake1=pre;
                    mistake2=p;//不能用else 保证两个节点的情况正确
                }
                pre=p;
                p=p->right;
            }   
        }
        if(mistake1!=NULL&&mistake2!=NULL){
            swap(mistake2->val,mistake1->val);
        }
    }
};


update:
  这个题是对【LeetCode】98.Validate Binary Search Tree的加深。我们知道：二叉搜索树的中序遍历是一个升序序列，我们只要对一个二叉树进行中序遍历，
  然后检验其序列是否为升序便可以判断该二叉树是否为合法的二叉搜索树，同理，本题中二叉搜索树的两个节点数值发生了互换，
  那么正常的升序序列必然会出现局部降序，我们只要找到局部降序点并将对应数据进行交换，便可恢复二叉搜索树。关于局部降序有几种情况必须分析清楚：
      1、特殊情况：输入二叉搜索树根节点为空，或者只有一个节点，直接返回，无处理；
      2、输入二叉搜索树只有两个节点，直接互换，返回；
      3、输入二叉搜索树的节点数>=3，中序遍历序列出现局部降序的位置有两种情况：a.相邻，如[3,6,4]；b.不相邻，如[6,4,5,3],两种情况，
      最明显的区别就是前者只会出现一次降序点（4<6）；后者则有两个降序点(4<6,3<5)，且第一个降序点前一个数6是错误位置，
      后一个降序点后一个数3是错误位置，一定要注意。
--------------------- 
作者：Jin_Kwok 
来源：CSDN 
原文：https://blog.csdn.net/Jin_Kwok/article/details/51159546 
版权声明：本文为博主原创文章，转载请附上博文链接！

【解法一】
根据上述分析，一个非常的直观的思路就是对二叉树进行中序遍历，用一个动态空间存储中序遍历结果，然后对这个序列进行检验，找出局部降序点的位置并交换，
然后再对二叉搜索树进行一次中序遍历并利用恢复后的序列对各个节点进行赋值。这样做思路很简单，但空间复杂度O(n)，时间复杂度O(n)，
由于使用了非常量空间存储中序遍历结果，因此并不契合题意，不过，作为一种可行的解法还是可以的

//博主的code太不简洁了,自己实现了一个
class Solution {
public:
    void recoverTree(TreeNode* root) {
        if(!root){
            return;
        }
        vector<int> record;
        travel(root,record);
        int n=record.size();
        if(n==1){
            return;
        }
        int first=-1,second=-1;
        //first,second表示要交换的两个元素下标
        //如果只有一个下降序列(a>b)first指向a second指向b
        //如果有两个下降序列(a>b,c>d)那么first指向a second指向d
        //即first需要注意只在第一个序列时赋较大值 
        //而second无论是在哪种情况下都是相同的操作:遇到下降序列时指向较小元素
        for(int i=1;i<n;i++){
            if(record[i]>record[i-1]){
                continue;
            }
            if(first==-1){
                first=i-1;
            }
            second=i;
        }
        //交换错误元素在中序遍历中的位置
        swap(record[first],record[second]);
        
        //利用恢复后的中序遍历顺序去纠正之前错误的BST
        int cnt=0;
        rebuild(root,record,cnt);
    }
private:
    void rebuild(TreeNode *root,vector<int>&nums,int &i){
        if(!root){
            return;
        }
        rebuild(root->left,nums,i);
        root->val=nums[i++];
        rebuild(root->right,nums,i);
    }
    void travel(TreeNode *root,vector<int> &res){
        if(!root){
            return;
        }
        travel(root->left,res);
        res.push_back(root->val);
        travel(root->right,res);
    }
};
【解法二】
和Solution 1是一样的解法 利用三个指针找到两个需要交换的节点
class Solution {
public:
    void recoverTree(TreeNode* root) {
        if(!root){
            return;
        }
        TreeNode *pre=NULL,*cur=root;
        TreeNode *first=NULL,*second=NULL;
        stack<TreeNode *> st;
        //first,second表示要交换的两个元素下标
        //如果只有一个下降序列(a>b)first指向a second指向b
        //如果有两个下降序列(a>b,c>d)那么first指向a second指向d
        //即first需要注意只在第一个序列时赋较大值 
        //而second无论是在哪种情况下都是相同的操作:遇到下降序列时指向较小元素
        while(cur||!st.empty()){
            if(cur){
                st.push(cur);
                cur=cur->left;
            }
            else{
                cur=st.top();
                st.pop();
                //出现降序
                if(pre&&pre->val>cur->val){
                    if(first==NULL){
                        first=pre;
                    }
                    second=cur;
                }
                pre=cur;
                cur=cur->right;
            }
        }
        if(first&&second){
            int num=first->val;
            first->val=second->val;
            second->val=num;
        }
    }
};


