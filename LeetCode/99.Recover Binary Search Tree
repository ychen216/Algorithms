99. Recover Binary Search Tree
/*
Two elements of a binary search tree (BST) are swapped by mistake.
Recover the tree without changing its structure.
Note:
  A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*中序遍历二叉树，出现的节点的值会升序排序，如果有两个节点位置错了，那肯定会出现降序。  
    设置一个pre节点指针，记录当前节点中序遍历时的前节点，如果当前节点小于pre节点的值，说明需要调整次序。  
    如果在中序遍历时节点值出现了两次降序，第一个错误的节点为第一次降序时较大的节点，第二个错误节点为第二次降序时较小的节点。  
    比如，原来的搜索二叉树在中序遍历的节点值依次为{1,2,3,4,5}，如果因为两个节点位置错了而出现{1,5,3,4,2}，  
    第一次降序为5->3，所以第一个错误节点为5，第二次降序为4->2,所以第二个错误节点为2，将5和2换过来就可以恢复
    */
    
    void recoverTree(TreeNode* root) {
        if(root==NULL)
            return;
        TreeNode *mistake1=NULL;
        TreeNode *mistake2=NULL;
        TreeNode *p=root,*pre=NULL;
        stack<TreeNode *> st;
        //中序遍历
        while(p!=NULL||!st.empty()){
            if(p!=NULL){
                st.push(p);
                p=p->left;
            }else{
                p=st.top();
                st.pop();
                //出现降序
                if(pre!=NULL&&p->val<pre->val){
                    if(mistake1==NULL)
                        mistake1=pre;
                    mistake2=p;//不能用else 保证两个节点的情况正确
                }
                pre=p;
                p=p->right;
            }   
        }
        if(mistake1!=NULL&&mistake2!=NULL){
            swap(mistake2->val,mistake1->val);
        }
    }   
    
};
