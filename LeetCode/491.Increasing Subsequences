491. Increasing Subsequences

/*
Given an integer array, your task is to find all the different possible increasing subsequences of the given array, 
and the length of an increasing subsequence should be at least 2 .

Example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
Note:
  The length of the given array will not exceed 15.
  The range of integer in the given array is [-100,100].
  The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.
*/

Solution:
class Solution {
public:
    void helper(set<vector<int>>&res,vector<int>&nums,vector<int> temp,int start,int pos){
        if(pos>1)
            res.insert(temp);
        for(int i=start;i<nums.size();i++){
            if(pos==0||(pos>0&&temp[pos-1]<=nums[i])){
                temp.push_back(nums[i]);
                helper(res,nums,temp,i+1,pos+1);
                temp.pop_back();
            }
        }
    }
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        if(nums.size()==0)
            return {};
        set<vector<int>> res;//因为num中可能有重复元素 所以要用set避免有重复vector
        helper(res,nums,vector<int>(),0,0);
        return vector<vector<int>>(res.begin(),res.end());
    }
};

update:
class Solution {
public:
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        set<vector<int>> res;
        vector<int> candidate;
        helper(nums,0,candidate,res);
        return vector<vector<int>> (res.begin(),res.end());
    }
private:
    void helper(vector<int> &nums,int start,vector<int> &v,set<vector<int>> &res){
        if(v.size()>=2)
            res.insert(v);
        for(int i=start;i<nums.size();i++){
            if(v.empty()||v.back()<=nums[i]){
                v.push_back(nums[i]);
                helper(nums,i+1,v,res);
                v.pop_back();
            }
        }
    }
};

Solution 2:
class Solution {
public:
    // 在dfs内部利用set去重
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> candidate;
        helper(nums,0,candidate,res);
        return res;
    }
private:
    void helper(vector<int> &nums,int start,vector<int> &v,vector<vector<int>> &res){
        if(v.size()>=2)
            res.push_back(v);
        unordered_set<int> sset;
        for(int i=start;i<nums.size();i++){
            // eg[3,3,4]避免出现两个[3,4]
            if((v.empty()||v.back()<=nums[i]) && sset.find(nums[i])==sset.end()){
                v.push_back(nums[i]);
                sset.insert(nums[i]);
                helper(nums,i+1,v,res);
                v.pop_back();
            }
        }
    }
};

update:
class Solution {
public:
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> cand;
        helper(res,cand,nums,0);
        return res;
    }
private:
    //从nums[start,...]开始选一个数字加入到cand中
    void helper(vector<vector<int>>& res,vector<int> &cand,vector<int> &nums,int start){
        if(cand.size()>1){
            res.push_back(cand);
        }
        unordered_set<int> visit;
        for(int i=start;i<nums.size();i++){
            //不能直接用这种方法来去重因为这里我们不能保证数组是有序的 可能两个相同数数组出现在不同位置
            //if(i!=start&&nums[i]==nums[i-1]) continue;
            //利用set来保存在该位已经尝试过的数字避免重复结果的产生
            if(visit.find(nums[i])!=visit.end()) continue;//避免重复
            if(!cand.empty()&&nums[i]<cand.back()) continue;//要求非递减
            cand.push_back(nums[i]);
            visit.insert(nums[i]);
            helper(res,cand,nums,i+1);
            cand.pop_back();
        }
    }
};
