63. Unique Paths II
/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/

Solution 1:
class Solution {
public:
    //有墙的地方可达到的路径数为0
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int row=obstacleGrid.size();
        if(row==0)
            return 0;
        int col=obstacleGrid[0].size();
        if(col==0||obstacleGrid[0][0]==1)
            return 0;
        vector<vector<int>>dp(row+1,vector<int>(col+1,0));//上面和左边加一层墙 避免去判断越界问题
        dp[0][1]=1;//初始化
        for(int i=1;i<=row;i++){
            for(int j=1;j<=col;j++){
                if(obstacleGrid[i-1][j-1]==0){
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[row][col];
    }
};

Solution 2:处理边界
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        if(m==0)
            return 0;
        int n=obstacleGrid[0].size();
        // 起始位置有障碍那么后面就没法走了
        if(n==0||obstacleGrid[0][0]==1)
            return 0;
        vector<vector<int>> dp(m,vector<int>(n,0));
        // 初始化第一行第一列
        dp[0][0]=1;
        for(int i=1;i<m;i++){
            // 没有障碍的情况下才能走得到
            if(obstacleGrid[i][0]==0)
                dp[i][0]=dp[i-1][0];
        }
        for(int j=1;j<n;j++){
            if(obstacleGrid[0][j]==0)
                dp[0][j]=dp[0][j-1];
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(obstacleGrid[i][j]==0)
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};
