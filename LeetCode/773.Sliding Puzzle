773.Sliding Puzzle
/*
On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:
  board will be a 2 x 3 array as described above.
  board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5].
*/

Solution:
class Solution {
public:
    /* 
        bfs 利用set来记录状态 为了方便记录数组 将其拼接成一个字符串记录
        123405   <== 0 is at index 4, nextMoves[4]={1,3,5}, so swap 0 with the value
    */
    int slidingPuzzle(vector<vector<int>>& board){
        string target="123450",
        begin=to_string(board[0][0])+to_string(board[0][1])+to_string(board[0][2])
             +to_string(board[1][0])+to_string(board[1][1])+to_string(board[1][2]);
        vector<vector<int>> nextMoves{{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};//nextMoves[i]记录了0在第i位时可以与之进行交换的位下标
        unordered_set<string> visited{begin};
        queue<pair<string,int>> q; 
        q.push({begin,0});
        while(!q.empty()){
            auto cur=q.front(); q.pop();
            if (cur.first==target) return cur.second;
            int zero=(int)cur.first.find("0");
            for (auto next: nextMoves[zero]){
                auto candidate=cur.first;
                swap(candidate[zero],candidate[next]);
                if (visited.find(candidate)==visited.end()){
                    visited.insert(candidate);
                    q.push({candidate,cur.second+1});
                }
            }
        }
        return -1;
    }
};

Solution 2:
题目大意：给你一个2×3的棋盘，放着0-5。每一步0可以和上下左右的一个数交换。问需要多少步可以构成123450的棋盘状态。
参考：http://zxi.mytechroad.com/blog/searching/leetcode-773-sliding-puzzle/
class Solution {
public:
    /*
        利用BFS进行搜索，将棋盘状态用一个string来表示
        下面是一个m*n sliding puzzle的模板
        搜索空间为(m*n)! 有(m*n)!个状态 该方法的时空复杂度都是O((mn)!)
    */
    int slidingPuzzle(vector<vector<int>>& board) {
        int row=board.size();
        int col=board[0].size();
        string start,goal;//构建初始状态和目标状态
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                start+=board[i][j]+'0';
                //构造123450 这种方法最多只适用于3*3的情况 
                //因为>9的数字不能简单的 通过数字+'0'来获得 eg 11不能通过11+'0'获得"11"
                goal+=(i*col+j+1)%(col*row)+'0';
            }
        }
        int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};
        queue<string> q({start});
        unordered_set<string> visit({start});
        int step=0;
        while(!q.empty()){
            int n=q.size();
            while(n--){
                string cur=q.front();
                q.pop();
                if(cur==goal){
                    return step;
                }
                int index0=cur.find('0');
                int x0=index0/col;
                int y0=index0%col;
                //拓展下一轮节点
                for(int i=0;i<4;i++){
                    int x=x0+dx[i];
                    int y=y0+dy[i];
                    if(x<0||x>=row||y<0||y>=col) continue;
                    //构造新的状态字符串
                    int newIndex=x*col+y;
                    string next(cur);
                    swap(next[newIndex],next[index0]);
                    if(visit.find(next)!=visit.end()) continue;
                    visit.insert(next);
                    q.push(next);
                }
            }
            //更新step
            step++;
        }
        return -1;
    }
};

Solution 2:运行不通过 代码和http://zxi.mytechroad.com/blog/searching/leetcode-773-sliding-puzzle/一样的
class Solution {
public:
    /*
        还是BFS 只是针对2*3可以做一些优化 比如：
        1.对于不同位置的0，他可以交换的位置可以打表记录下来，这样就不用遍历四次并且check是否越界就可以直接进行交换
        2.每一次我们都要去search字符串中0的位置，我们其实可以将这个信息保存在queue中，因为每一次生成下一个state时都是0和四个方向的其他数字进行交换
        所以下一个state中新的0的位置必然是本次交换数字的位置
    */
     int slidingPuzzle(vector<vector<int>>& board) {    
        const string goal = "123450";
        string start;
        for (int i = 0; i < board.size(); ++i){
            for (int j = 0; j < board[0].size(); ++j)
                start += (board[i][j] + '0');
        }

        if (start == goal) return 0;

        //打表在state string中0的位置在1的话，可以跟坐标为0,2,4的字符交换
        const vector<vector<int>> idx({{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}});
        unordered_set<string> visited({start});
        int steps = 0;
        queue<pair<string, int>> q;
        q.push({start, start.find('0')});
        while (!q.empty()) {
            ++steps;
            int size = q.size();
            while (size--) {
                const auto& p = q.front();
                q.pop();
                for (int index : idx[p.second]) { 
                    string t(p.first);
                    swap(t[p.second], t[index]);
                    if (visited.find(t)!=visited.end()) continue;
                    if (t == goal) return steps;
                    visited.insert(t);
                    q.push({t, index});
                }
            }      
        }
        return -1;
     }
};
