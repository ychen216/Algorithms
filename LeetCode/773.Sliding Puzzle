773.Sliding Puzzle
/*
On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:
  board will be a 2 x 3 array as described above.
  board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5].
*/

Solution:
class Solution {
public:
    /* 
        bfs 利用set来记录状态 为了方便记录数组 将其拼接成一个字符串记录
        123405   <== 0 is at index 4, nextMoves[4]={1,3,5}, so swap 0 with the value
    */
    int slidingPuzzle(vector<vector<int>>& board){
        string target="123450",
        begin=to_string(board[0][0])+to_string(board[0][1])+to_string(board[0][2])
             +to_string(board[1][0])+to_string(board[1][1])+to_string(board[1][2]);
        vector<vector<int>> nextMoves{{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};//nextMoves[i]记录了0在第i位时可以与之进行交换的位下标
        unordered_set<string> visited{begin};
        queue<pair<string,int>> q; 
        q.push({begin,0});
        while(!q.empty()){
            auto cur=q.front(); q.pop();
            if (cur.first==target) return cur.second;
            int zero=(int)cur.first.find("0");
            for (auto next: nextMoves[zero]){
                auto candidate=cur.first;
                swap(candidate[zero],candidate[next]);
                if (visited.find(candidate)==visited.end()){
                    visited.insert(candidate);
                    q.push({candidate,cur.second+1});
                }
            }
        }
        return -1;
    }
};
