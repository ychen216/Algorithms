331. Verify Preorder Serialization of a Binary Tree

/*
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false
*/

Solution 1:
class Solution {
    /*
         In a binary tree, if we consider null as leaves, then
            all non-null node provides 2 outdegree and 1 indegree (2 children and 1 parent), except root
            all null node provides 0 outdegree and 1 indegree (0 child and 1 parent).
        Suppose we try to build this tree. During building, we record the difference between out degree and in degree 
        diff = outdegree - indegree. When the next node comes, we then decrease diff by 1, because the node provides an in degree.
        If the node is not null, we increase diff by 2, because it provides two out degrees. 
        If a serialization is correct, diff should never be negative and diff will be zero when finished.
    */
    public boolean isValidSerialization(String preorder) {
        String []nodes=preorder.split(",");
        int diff=1;//为了初始化根节点
        for(String node:nodes){
            if(--diff<0)return false;
            if(!node.equals("#"))diff+=2;
        }
        return diff==0;
    }
}

C++ version
class Solution {
public:
    // diff=sum(outdegree-indegree) for all node
    bool isValidSerialization(string preorder) {
        stringstream ss(preorder);
        int diff=1;
        string cur;
        while(getline(ss,cur,',')){
            // 一个新节点不论是否是null 增加一个入度
            if(--diff<0)return false;
            // 非空节点 增加两个入度
            if(cur!="#") diff+=2;
        }
        return diff==0;
    }
};


Solution 2: use stack
// absorbing stack
// replace [num, #, #] with [#]
class Solution {
public:
    /*
     below is my understanding

     when you iterate through the preorder traversal string, for each char:

     case 1: you see a number c, means you begin to expand a new tree rooted with c, you push it to stack

     case 2.1: you see a #, while top of stack is a number, you know this # is a left null child, put it there as a mark for 
     next coming node k to know it is being the right child.
          
     case 2.2: you see a #, while top of stack is #, you know you meet this # as right null child, you now cancel the sub tree
     (rooted as t, for example) with these two-# children. But wait, after the cancellation, you continue to check top of stack is
     whether # or a number:

          ---- if a number, say u, you know you just cancelled a node t which is left child of u. You need to leave a # mark to 
          the top of stack. So that the next node know it is a right child.如下左图

          ---- if a #, you know you just cancelled a tree whose root, t, is the right child of u. So you continue to cancel sub tree of u, 
          and the process goes on and on.如下右图
          u          u
         / \        / \ 
        t          #   t
       / \            / \
      #   #          #   #
    
    */
    bool isValidSerialization(string preorder) {
        stack<string> s;
        stringstream ss(preorder);
        while (!ss.eof()) {
            string val_str;
            getline(ss, val_str, ',');

            if (val_str != "#") {
                s.push(val_str);
            } else {  // val_str == "#"
               // 不断检查是否完成了当前根的右子树的遍历 如果完成了右子树的遍历 那么不断把左子树的null pop
               // 并且将该根节点设置为# 表示已经完成以该节点为根的子树的遍历 并且提示后续遍历的节点你们是在右子树当中 因为当前节点被标记为#是左子树 
                while (!s.empty() && s.top() == "#") {
                    s.pop();
                    if (s.empty()) {
                        return false;
                    }
                    s.pop();
                }
                s.push("#");
            }
        }
        return s.size() == 1 && s.top() == "#";
    }
};
