336. Palindrome Pairs
/*
Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:
Given words = ["bat", "tab", "cat"]
Return [[0, 1], [1, 0]]
The palindromes are ["battab", "tabbat"]
Example 2:
Given words = ["abcd", "dcba", "lls", "s", "sssll"]
Return [[0, 1], [1, 0], [3, 2], [2, 4]]
The palindromes are ["dcbaabcd", "abcddcba", "slls", "llssssll"]
*/

Solution:
class Solution {
public:
    /*  暴力 TLE
        参考 https://www.cnblogs.com/grandyang/p/5272039.html
        用哈希表来建立每个单词和其位置的映射，然后需要一个set来保存出现过的单词的长度
        算法的思想：遍历单词集，对于遍历到的单词，对其翻转 然后在哈希表查找翻转后的字符串是否存在 注意不能和原字符串的坐标位置相同 现在我们只是处理了bat和tab的情况
        还存在abcd和cba，dcb和abcd这些情况需要考虑 这就是我们为啥需要用set，由于set是自动排序的，我们可以找到当前单词长度在set中的iterator，然后从开头开始遍历set，遍历比当前单词小的长度，比如abcdd翻转后为ddcba，我们发现set中有长度为3的单词，然后我们dd是否为回文串，若是，再看cba是否存在于哈希表，若存在，则说明abcdd和cba是回文对，存入结果中，对于dcb和aabcd这类的情况也是同样处理，我们要在set里找的字符串要在遍历到的字符串的左边和右边分别尝试，看是否是回文对，这样遍历完单词集，就能得到所有的回文对
    */
    vector<vector<int>> palindromePairs(vector<string>& words) {
        unordered_map<string,int> mmp;//记录每个字符串的位置
        set<int> sset;
        vector<vector<int>> res;
        for(int i=0;i<words.size();i++){
            mmp[words[i]]=i;
            sset.insert(words[i].length());
        }
        for(int i=0;i<words.size();i++){
            string t=words[i];
            reverse(t.begin(),t.end());
            // abc cba 两个串长度相同
            if(mmp.count(t)&&mmp[t]!=i)
                res.push_back({i,mmp[t]});
            // abcd cba 另一个串长度小于当前串
            int len=t.length();
            auto end=sset.find(len);
            for(auto it=sset.begin();it!=end;it++){
                int d=*it;
                // abcdd的逆序是 ddcba寻找是否存在cda ->abcdd cba
                if(isValid(t,0,len-d-1)&&mmp.count(t.substr(len-d)))
                    res.push_back({i,mmp[t.substr(len-d)]});
                // bbabc的逆序是 cbabb寻找是否存在cba -> cba bbabc
                if(isValid(t,d,len-1)&&mmp.count(t.substr(0,d)))
                    res.push_back({mmp[t.substr(0,d)],i});
            }
        }
         return res;
    }
private:
    bool isValid(string &t,int i,int j){
        while(i<j){
            if(t[i++]!=t[j--])
                return false;
        }
        return true;
    }
};
