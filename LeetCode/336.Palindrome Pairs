336. Palindrome Pairs
/*
Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:
Given words = ["bat", "tab", "cat"]
Return [[0, 1], [1, 0]]
The palindromes are ["battab", "tabbat"]
Example 2:
Given words = ["abcd", "dcba", "lls", "s", "sssll"]
Return [[0, 1], [1, 0], [3, 2], [2, 4]]
The palindromes are ["dcbaabcd", "abcddcba", "slls", "llssssll"]
*/

Solution:
class Solution {
public:
    /*  暴力 TLE
        参考 https://www.cnblogs.com/grandyang/p/5272039.html
        用哈希表来建立每个单词和其位置的映射，然后需要一个set来保存出现过的单词的长度
        算法的思想：遍历单词集，对于遍历到的单词，对其翻转 然后在哈希表查找翻转后的字符串是否存在 注意不能和原字符串的坐标位置相同 现在我们只是处理了bat和tab的情况
        还存在abcd和cba，dcb和abcd这些情况需要考虑 这就是我们为啥需要用set，由于set是自动排序的，我们可以找到当前单词长度在set中的iterator，然后从开头开始遍历set，遍历比当前单词小的长度，比如abcdd翻转后为ddcba，我们发现set中有长度为3的单词，然后我们dd是否为回文串，若是，再看cba是否存在于哈希表，若存在，则说明abcdd和cba是回文对，存入结果中，对于dcb和aabcd这类的情况也是同样处理，我们要在set里找的字符串要在遍历到的字符串的左边和右边分别尝试，看是否是回文对，这样遍历完单词集，就能得到所有的回文对
    */
    vector<vector<int>> palindromePairs(vector<string>& words) {
        unordered_map<string,int> mmp;//记录每个字符串的位置
        set<int> sset;
        vector<vector<int>> res;
        for(int i=0;i<words.size();i++){
            mmp[words[i]]=i;
            sset.insert(words[i].length());
        }
        for(int i=0;i<words.size();i++){
            string t=words[i];
            reverse(t.begin(),t.end());
            // abc cba 两个串长度相同
            if(mmp.count(t)&&mmp[t]!=i)
                res.push_back({i,mmp[t]});
            // abcd cba 另一个串长度小于当前串
            int len=t.length();
            auto end=sset.find(len);
            for(auto it=sset.begin();it!=end;it++){
                int d=*it;
                // abcdd的逆序是 ddcba寻找是否存在cda ->abcdd cba
                if(isValid(t,0,len-d-1)&&mmp.count(t.substr(len-d)))
                    res.push_back({i,mmp[t.substr(len-d)]});
                // bbabc的逆序是 cbabb寻找是否存在cba -> cba bbabc
                if(isValid(t,d,len-1)&&mmp.count(t.substr(0,d)))
                    res.push_back({mmp[t.substr(0,d)],i});
            }
        }
         return res;
    }
private:
    bool isValid(string &t,int i,int j){
        while(i<j){
            if(t[i++]!=t[j--])
                return false;
        }
        return true;
    }
};


Solution 2:
class Solution {
public:
    /*
        对于词AB来说，如果A是回文串,那么revsere_B A B是回文串;如果B是回文串,那么A B reverseA是回文串
        可以遍历每个词找到合适的切分点(应该包括A,B是空串的情况),将词分成AB然后寻找是否存在reverse_A和reverse_B
        问了方便找到每个词对应的下标 利用map记录string-->index
        这里要注意生成答案的时候要保证不重复 一种方法是通过下面代码的方式；一种通过set的方式
    */
    vector<vector<int>> palindromePairs(vector<string>& words) {
        vector<vector<int>> res;
        unordered_map<string,int> mmp;
        int n=words.size();
        for(int i=0;i<n;i++){
            mmp[words[i]]=i;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<=words[i].length();j++){
                string A=words[i].substr(0,j);
                string B=words[i].substr(j);
                if(is_palindrom(A)){
                    string revB=B;
                    reverse(revB.begin(),revB.end());
                    //这里必须要check A的长度!=0 来避免重复答案的生成
                    //eg 如果存在两个字符串"abcd","dcba"
                    //便利到abcd时 划分""abcd 如果存在dcba 这里会生成答案dcba "" abcd
                    //下面划分为abcd""时 check B 会生成abcd "" dcba
                    //在遍历到dcba时 会出现划分""dcba--> abcd "" dcba; 划分为dcba""--> dcba "" abcd
                    if(mmp.find(revB)!=mmp.end()&&mmp[revB]!=i&&A.length()!=0){
                        res.push_back({mmp[revB],i});
                    }
                }
                if(is_palindrom(B)){
                    string revA=A;
                    reverse(revA.begin(),revA.end());
                    if(mmp.find(revA)!=mmp.end()&&mmp[revA]!=i){
                        res.push_back({i,mmp[revA]});
                    }
                }
            }
        }
        return res;
    }
private:
    bool is_palindrom(string &s){
        int i=0,j=s.length()-1;
        while(i<j){
            if(s[i]!=s[j]){
                return false;
            }
            i++;j--;
        }
        return true;
    }
};
