220. Contains Duplicate III
/*
Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute 
difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.
*/
Solution 1:暴力TLE
class Solution {
public:
    //检查子数组长度在[2,k+1]之间是否有满足条件的
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        int len=nums.size();
        if(k<=0||t<0||len==0)
            return false;
        int l=(k+1)>len?len:k+1;
        for(;l>=2;l--){
            for(int begin=0;begin<=len-l;begin++){
                int end=l+begin-1;
                if(labs((long)nums[begin]-(long)nums[end])<=t)
                    return true;
            }
        }
        return false;
            
    }
};

update：TLE
class Solution {
public:
    // 注意两数的绝对距离可能会超过INT_MAX
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDis, int valueDis) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j-i<=indexDis&&j<n;j++){
                if(abs((long)nums[i]-(long)nums[j])<=valueDis)
                    return true;
            }
        }
        return false;
    }
};

Solution 2:
class Solution {
public:
    /*  k是indexDistance t是valueDistance
        要注意可能有[-1,INT_MAX]的测试用例 两者绝对距离超过INT_MAX要用long
        同时利用set维护一个长度为k的窗口 对于利用set可能有以下顾虑:
            I have one concern about removing element values.remove(nums[ind - k]) that may delete an element that should remain in the set, if nums[ind-k] is the same as some num[x] s.t. ind-k < x <ind.
            Reply:If that is the case, the algorithm has returned in previous stage, since it finds two same values, within window size k.
            因为绝对距离t>=0所以在窗口k内出现两个相等的元素 必然在之前已经返回true了
    */
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        int n = nums.size();
        if(k < 1 || t < 0 || n < 2)
            return false;
        set<long> window; // set is ordered automatically 维护一个大小为k的窗口
        for (int i = 0; i < nums.size(); i++) {
            if (i > k) window.erase(nums[i-k-1]); // keep the set contains nums i j at most k
            // |x - nums[i]| <= t  ==> -t <= x - nums[i] <= t;
            auto pos = window.lower_bound((long)nums[i] - t); // x-nums[i] >= -t ==> x >= nums[i]-t 
            //pos指向>=nums[i]-t的第一个元素
            // x - nums[i] <= t ==> |x - nums[i]| <= t
            // 直接验证pos是否满足pos<=nums[i]+t 因为pos是有可能满足条件的最小值 如果他都不满足<=nums[i]+t 那么后面更大的数更不可能满足
            if (pos != window.end() && *pos - nums[i] <= t) return true;
            window.insert(nums[i]);
        }
        return false;
    }
};

update: 同一种思路 不同的实现方式 较上面这种实现更复杂一些
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        int n=nums.size();
        if(n<2||k<1){
            return false;
        }
        set<long> window;//维护一个k-1大小的window 这里的数字和nums[i]都满足距离上的要求 即dis(i,j)<=k
        //这个window的数字升序排列 从这个window里找有没有符合条件的x 使得-t <= x-nums[i] <=t
        for(int i=0;i<n;i++){
            //abs(nums[i]-x)<=t; -t<=x-nums[i]<=t 
            //nums[i]-t<=x<=t+nums[i]
            auto small=window.lower_bound((long)nums[i]-t);//这是x的最小值
            if(small!=window.end()){
                auto big=window.upper_bound((long)nums[i]+t);
                //big是>t+nums[i]的第一个值 如果已经是第一个元素 说明没有<=t+nums[i]的元素
                if(big!=window.begin()){
                    //往前走一个就是<=t+nums[i]的最大值 也就是符合要求的x的最大值
                    big=prev(big);
                    //比较nums[i]-t 和 nums[i]+t
                    if(*big>=*small){
                        return true;
                    }
                }
                
            }
            if(i>=k){
                window.erase(nums[i-k]);
            }
            window.insert(nums[i]);
        }
        return false;
    }
};

Solution 3: 没理解
public class Solution {
    /*
        我们可以构建一个大小为t+1的bucket, 比如[0, 1, 2, 3, ... , t] 最大绝对值差的两个数就是t和0. 
        如果两个数字出现在同一个Bucket内，说明我们已经找到了。 如果不是，则在相邻的两个bucket内再找。
        如果相邻的bucket内元素绝对值只差在t以内，说明我们知道到了，返回true.
        为了保证j - i <= k，我们在i>=k时，删除 nums[i-k]对应的Bucket.
    */
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if( k < 1 || t < 0) return false;
        Map<Long, Long> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            // [-t, 0] [0, t] 的元素都会落在bucket[0]里。
            // 为了解决这个问题，所有元素横移Integer.MIN_VALUE。
            long remappedNum = (long) nums[i] - Integer.MIN_VALUE;
            long bucket = remappedNum / ((long)t + 1);
            if(map.containsKey(bucket) 
                ||(map.containsKey(bucket-1) && remappedNum - map.get(bucket-1) <= t)
                    || (map.containsKey(bucket+1) && map.get(bucket+1) - remappedNum <= t) )
                    return true;
            if(i >= k) {
                long lastBucket = ((long) nums[i-k] - Integer.MIN_VALUE) / ((long)t + 1);
                map.remove(lastBucket);
            }
            map.put(bucket,remappedNum);
        }
        
        return false;
    }
}
