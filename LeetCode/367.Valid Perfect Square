367. Valid Perfect Square

/*
Given a positive integer num, write a function which returns True if num is a perfect square else False.

Note: Do not use any built-in library function such as sqrt.

Example 1:
Input: 16
Returns: True

Example 2:
Input: 14
Returns: False
*/


/*
idea:
1.a square number is 1+3+5+7+... Time Complexity O(sqrt(N)) (Credit to lizhibupt, thanks for correcting this).
2.binary search. Time Complexity O(logN)
3.Newton Method. See [this wiki page][1]. Time Complexity is close to constant, given a positive integer.
[1]: https://en.wikipedia.org/wiki/Newton%27s_method
*/

Solution 1:
class Solution {
public:
    // 一个完全平方数n=1+3+5+7+...+..
    bool isPerfectSquare(int num) {
        if(num<0)
            return false;
        if(num==0)
            return true;
        for(int i=1;num>0;i+=2)
            num-=i;
        return num==0;
    }
};

Solution 2:
class Solution {
public:
    bool isPerfectSquare(int num) {
        if(num<1)
            return false;
        long low=1,high=num;// long type to avoid 2147483647 case
        while(low<=high){
            int mid=(low+high)/2;
            long temp=mid*mid;
            if(temp==num)
                return true;
            else if(temp<num)
                low=mid+1;
            else
                high=mid-1;
        }
        return false;
    }
};

Solution 3:
