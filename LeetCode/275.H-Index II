275. H-Index II
/*
Follow up for H-Index: What if the citations array is sorted in ascending order? Could you optimize your algorithm?
*/

Solution:
class Solution {
public:
    int hIndex(vector<int>& citations) {
        int len=citations.size();
        if(len==0)
            return 0;
        int low=0,high=len-1;
        int maxH=0;
        while(low<=high){
            int mid=low+(high-low)/2;
            int h=len-mid;
            if(citations[mid]>=h){
                high=mid-1;
                maxH=max(maxH,h);
            }
            else
                low=mid+1;
        }
        return maxH;
    }
};

update:
class Solution {
public:
    /* 
        利用二分查找 h∈[1,N] eg.
        citations 0 1 3 5 6
        h value   5 4 3 2 1
        citiation个递增的序列,下面一行是此处若满足条件对应的h值,可见h值是降序序列
        因此在二分查找的过程中 如果某个h值满足条件（即h值小于它对应的值）我们就到前半部分继续查找；如果h值不满足条件（即h值大于它对应的值），我们就到前半部分继续查找
    */
    int hIndex(vector<int>& citations) {
        int n=citations.size();
        int low=0,high=n-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            int cnt=n-mid; // cite>=citation的文章数
            if(cnt<=citations[mid])
                high=mid-1;
            else
                low=mid+1;
        }
        return n-low;
    }
};
