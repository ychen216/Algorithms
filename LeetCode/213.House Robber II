213. House Robber II
/*
Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place for his thievery so that 
he will not get too much attention. This time, all houses at this place are arranged in a circle. 
That means the first house is the neighbor of the last one. 
Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house,
determine the maximum amount of money you can rob tonight without alerting the police.
*/

Solution:
class Solution {
public:
    /*
        现在是一个环 所以0和n-1户不能同时偷
        即按照0和n-1的偷盗情况 有三种可能 结果为 max(偷0不偷n-1, 偷n-1不偷0, 0和n-1都不偷)
        那么将问题转换为House Robber问题 求解[0,n-2]和[1,n-1]子问题 
        [0,n-2]的最优解等价于max(偷0不偷n-1,0和n-1都不偷) [1,n-1]的最优解等价于max(偷n-1不偷0,0和n-1都不偷)
    */
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        if(n==1)
            return nums[0];
        // n > 1 偷了第一个就不能偷最后一个
        return max(helper(nums,0,n-2), helper(nums,1,n-1));
    }
private:
    int helper(vector<int>&nums, int s, int e){
        int rob=0,skip=0,pre_rob=0;
        for(int i=s;i<=e;i++){
            pre_rob=rob;
            rob=skip+nums[i];
            skip=max(pre_rob,skip);
        }
        return max(skip,rob);
    }
};
