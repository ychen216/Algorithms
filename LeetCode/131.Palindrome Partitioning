131. Palindrome Partitioning

/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

[
  ["aa","b"],
  ["a","a","b"]
]
*/

Solution:
class Solution {
public:
    //recursive 把一个字符串看成一个字符数组 相当于 找不同的划分使得每一个子串都是回文串
    void helper(int pos,string &s,vector<string> temp,vector<vector<string>>&res){
        if(pos==s.length()){
            res.push_back(temp);
            return;
        }
        for(int i=pos;i<s.length();i++){
            string cur=s.substr(pos,i-pos+1);
            if(isPalindrome(cur)){
                temp.push_back(cur);
                helper(i+1,s,temp,res);
                temp.pop_back();
            }
        }
    }
    bool isPalindrome(string &s){
        int len=s.length();
        int i=0,j=len-1;
        while(i<j){
            if(s[i]!=s[j])
                return false;
            i++;j--;
        }
        return true;
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> temp;
        helper(0,s,temp,res);
        return res;
    }
};
