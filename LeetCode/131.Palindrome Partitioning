131. Palindrome Partitioning

/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

[
  ["aa","b"],
  ["a","a","b"]
]
*/

Solution:
class Solution {
public:
    //recursive 把一个字符串看成一个字符数组 相当于 找不同的划分使得每一个子串都是回文串
    void helper(int pos,string &s,vector<string> temp,vector<vector<string>>&res){
        if(pos==s.length()){
            res.push_back(temp);
            return;
        }
        for(int i=pos;i<s.length();i++){
            string cur=s.substr(pos,i-pos+1);
            if(isPalindrome(cur)){
                temp.push_back(cur);
                helper(i+1,s,temp,res);
                temp.pop_back();
            }
        }
    }
    bool isPalindrome(string &s){
        int len=s.length();
        int i=0,j=len-1;
        while(i<j){
            if(s[i]!=s[j])
                return false;
            i++;j--;
        }
        return true;
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> temp;
        helper(0,s,temp,res);
        return res;
    }
};

update: 更新 将划分的数组用引用变量
class Solution {
public:
    /*
        其实就是求字符串切割的所有可能 只是每一个子串都要是回文串
        利用recursive求解
    */
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> curPartition;
        helper(res,curPartition,s,0);
        return res;
    }
private:
    // 从start开始下一个划分
    void helper(vector<vector<string>> &res, vector<string> &curPartition, string &str, int start){
        if(start == str.length()){
            res.push_back(curPartition);
            return;
        }
        // 当前要划分的字符串从start开始 尝试可行的所有
        for(int i=start;i<str.length();i++){
            if(!isPalindrome(str,start,i)) continue;
            curPartition.push_back(str.substr(start, i-start+1));
            helper(res,curPartition,str,i+1);
            curPartition.pop_back();
        }
    }
    bool isPalindrome(const string &str, int s, int e){
        if(s>e)
            return false;
        while(s<e){
            if(str[s++]!=str[e--])
                return false;
        }
        return true;
    }
};

or 避免不断进行substr截取 字符串赋值
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        if(s.length()==0)
            return res;
        vector<string> cand;
        helper(res,cand,s,0);
        return res;
    }
private:
    // 从start开始下一个划分
    void helper(vector<vector<string>> &res,vector<string> &cand,string &s,int start){
        if(start==s.length()){
            res.push_back(cand);
            return;
        }
        //避免不断执行 cur=s.substr()
        string cur;
        // 该划分的最后一个元素是s[i]
        for(int i=start;i<s.length();i++){
            cur+=s[i];
            if(isValid(cur)){
                cand.push_back(cur);
                helper(res,cand,s,i+1);
                cand.pop_back();
            }
        }
    }
    bool isValid(const string &s){
        int i=0,j=s.length()-1;
        while(i<j){
            if(s[i]!=s[j])
                return false;
            i++;j--;
        }
        return true;
    }
};
