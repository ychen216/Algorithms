414. Third Maximum Number

/*
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist,
return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]
Output: 1
Explanation: The third maximum is 1.

Example 2:
Input: [1, 2]
Output: 2
Explanation: The third maximum does not exist, so the maximum (2) is returned instead.

Example 3:
Input: [2, 2, 3, 1]
Output: 1
Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
*/

Solution 1:
class Solution {
public:
    int thirdMax(vector<int>& nums) {
        long max1=LONG_MIN,max2=LONG_MIN,max3=LONG_MIN;//使用LONG_MIN是为了避免数组中出现INT_MIN的情况
        for(int i=0;i<nums.size();i++){
            if(nums[i]>max1){
                max3=max2;
                max2=max1;
                max1=nums[i];
            }
            else if(nums[i]<max1&&nums[i]>max2){
                max3=max2;
                max2=nums[i];
            }
            else if(nums[i]<max2&&nums[i]>max3)
                max3=nums[i];
        }
    
        return max3==LONG_MIN?max1:max3;
    }
};

Solution 2:
class Solution {
public:
    int thirdMax(vector<int>& nums) {
        set<int> top3;
        for(int i=0;i<nums.size();i++){
            top3.insert(nums[i]);
            if(top3.size()>3)
                top3.erase(top3.begin());
        }
    
        return top3.size()==3?*top3.begin():*top3.rbegin();
    }
};
