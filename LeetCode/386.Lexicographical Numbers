386. Lexicographical Numbers

/*
Given an integer n, return 1 - n in lexicographical order.
For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].
Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.

*/

Solution:
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> res;
        int cur=1;
        //依次选择数加入
        for(int i=0;i<n;i++){
            res.push_back(cur);
            if(cur*10<=n)
                cur*=10;
            else{
                if(cur>=n)
                    cur/=10;
                cur++;
                while(cur%10==0)
                    cur/=10;
            }
        }
        return res;
    }
};
update:
class Solution {
public:
    /*
        找规律 第一个加入的是1
        1. 优先向后添加0 10,100,1000 这些都比 2,11字符序小 
        2. 情况1超过n 后往后+1 11 12 13 要注意如果末尾是9那么不应该继续往下加 继续加则会进位 eg 19+1->20 字符序的下一个应该是190才是
        3. 上述两种情况都不满足的话应该回退一位直到到最后一个末位不为9的数字 +1
    */
    vector<int> lexicalOrder(int n) {
        vector<int> res;
        int cur=1;
        // 找规律依次加入n个数字
        for(int i=1;i<=n;i++){
            res.push_back(cur);
            if(cur*10<=n){
                cur=cur*10;
            }else if(cur%10!=9 && cur+1<=n){
                cur++;
            }else{
                while((cur/10)%10==9)
                    cur/=10;
                cur=cur/10+1;
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> res;
        // 首字符1~9任意一个 第二位及后续的可以是0~9
        for(int i=1;i<=9&&i<=n;i++){
            dfs(i,n,res);
        }
        return res;
    }
private:
    void dfs(int cur,int n,vector<int>&res){
        if(cur>n)
            return;
        res.push_back(cur);
        for(int i=0;i<10;i++){
            if(cur*10+i>n)
                break;
            dfs(cur*10+i,n,res);
        }
    }
};
