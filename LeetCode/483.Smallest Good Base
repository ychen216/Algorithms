483. Smallest Good Base
/*
For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.

Now given a string representing n, you should return the smallest good base of n in string format. 

Example 1:
Input: "13"
Output: "3"
Explanation: 13 base 3 is 111.
Example 2:
Input: "4681"
Output: "8"
Explanation: 4681 base 8 is 11111.
Example 3:
Input: "1000000000000000000"
Output: "999999999999999999"
Explanation: 1000000000000000000 base 999999999999999999 is 11.
Note:
  The range of n is [3, 10^18].
  The string representing n is always valid and will not have leading zeros.
*/

Solution:
class Solution {
public:
    /*
        Solution 1：
            一个数最大的符合条件的base是n-1 n=1*(n-1)^0+1(n-1)^1
            可以用在[2,n-1]之间搜索合理的值 O(NlgN)
            但此题的数据范围很大 TLE
        
        Solution 2: 从n转化为k进制后的数字长度m入手 m的范围就很有限了
            base的范围在[2,n-1] base越小转化后的位数m越大 当base=2时m最大 m=log(n)+1 base=n-1时 m=2 对应串"11"
            如果这个k进制数长度为m，那么n可以表示为:
            n = 1 + k + k^2 + k^3 + ... + k^(m-1) > k^(m-1)
            k < n^(1 / (m-1))  这样可以确定base k值范围[2,n^(1 / (m-1))]然后利用二分搜索确定k值     
    */
    string smallestGoodBase(string n) {
        long long num = stol(n);
        //枚举m
        for (int m = log(num + 1) / log(2); m >= 2; m--) {
            //二分求k
            long long left = 2, right = pow(num, 1.0 / (m - 1)) + 1;
            while (left < right) {
                long long mid = left + (right - left) / 2, sum = 0;
                for (int j = 0; j < m; ++j) {
                    sum = sum * mid + 1;
                }
                if (sum == num) return to_string(mid);
                else if (sum < num) left = mid + 1;
                else right = mid-1;
            }
        }
        return to_string(num - 1);
    }
};

update:
class Solution {
public:
    string smallestGoodBase(string n) {
        long long num=stoll(n);
        for(int m=log(num+1)/log(2);m>=2;m--){
            long long start=2,end=pow(num,1.0/(m-1)),mid;
            while(start+1<end){
                mid=start+(end-start)/2;
                long long sum=getSum(mid,m);
                if(sum<num){
                    start=mid;
                }
                else{
                    end=mid;
                }
            }
            if(getSum(start,m)==num){
                return to_string(start);
            }
            if(getSum(end,m)==num){
                return to_string(end);
            }
        }
        return to_string(num-1);
    }
private:
    //给定base和长度m计算1+base+...+base^(m-1)的和
    long long getSum(long long base,long long m){
        long long sum=0;
        for(int i=0;i<m;i++){
            sum=sum*base+1;
        }
        return sum;
    }
};
