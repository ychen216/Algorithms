98. Validate Binary Search Tree
/*
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:
  The left subtree of a node contains only nodes with keys less than the node's key.
  The right subtree of a node contains only nodes with keys greater than the node's key.
  Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.
*/

Solution 1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //中序遍历的结果应该是一个递增数组
    bool isValidBST(TreeNode* root) {
        if(root==NULL)
            return true;
        vector<int> res;
        travel(root,res);
        int len=res.size();
        for(int i=1;i<len;i++){
            if(res[i]<=res[i-1])
                return false;
        }
        return true;
    }
    void travel(TreeNode *root,vector<int> &res){
        if(root==NULL)
            return;
        travel(root->left,res);
        res.push_back(root->val);
        travel(root->right,res);
    }
};


Solution 2:递归
class Solution {
public:
    //为每一个节点维护一个其必须满足的区间
    bool isValidBST(TreeNode* root) {
        return helper(root,LONG_MIN,LONG_MAX);
    }
    bool helper(TreeNode *root,long minNum,long maxNum){
        if(root==NULL)
            return true;
        if(root->val>=maxNum||root->val<=minNum)return false;
        return helper(root->left,minNum,root->val)&&helper(root->right,root->val,maxNum);
    }
};
