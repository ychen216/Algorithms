376. Wiggle Subsequence

/*
A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate 
between positive and negative. The first difference (if one exists) may be either positive or negative. 
A sequence with fewer than two elements is trivially a wiggle sequence.

For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative.
In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive 
and the second because its last difference is zero.

Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. 
A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence,
leaving the remaining elements in their original order.

Examples:
Input: [1,7,4,9,2,5]
Output: 6
The entire sequence is a wiggle sequence.

Input: [1,17,5,10,13,15,10,5,16,8]
Output: 7
There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].

Input: [1,2,3,4,5,6,7,8,9]
Output: 2
*/

Solution 1:
class Solution {
public:
    //DP
    int wiggleMaxLength(vector<int>& nums) {
        int size=nums.size();
        if(size<=1)
            return size;
        int pos[size]={0},neg[size]={0};//该位应该的差值为正和负 最长的串长度
        pos[0]=1,neg[0]=1;
        for(int i=1;i<size;i++){
            int p=0,n=0;
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i])
                    p=max(p,neg[j]);
                else if(nums[j]>nums[i])
                    n=max(n,pos[j]);
            }
            pos[i]=p+1;
            neg[i]=n+1;
        }
        return max(pos[size-1],neg[size-1]);
    }
};

Solution 2:
class Solution {
public:
    //利用贪心 将时间复杂度降为O(n)
    int wiggleMaxLength(vector<int>& nums) {
        int size=nums.size();
        if(size<=1)
            return size;
        bool begin=false;
        bool prePos=false;//前一个序列是正
        int res=1;
        for(int i=1;i<size;i++){
            if(nums[i]>nums[i-1]&&(!begin||!prePos)){
                prePos=true;
                begin=true;
                res++;
            }else if(nums[i]<nums[i-1]&&(!begin||prePos)){
                prePos=false;
                begin=true;
                res++;
            }
        }
        return res;
    }
};

Solution 3:
class Solution {
public:
    // DP 类似于最长递增子序列 up[i]表示到i为止的最后是上升的最长序列长度 down[i]表示到i为止的最后是下降的最长序列长度
    // up[0]=down[0]=1 单个元素可以认为是上升或者下降的
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        if(n<2)
            return n;
        vector<int> up(n,0),down(n,0);
        up[0]=down[0]=1;
        for(int i=1;i<n;i++){
            if(nums[i]>nums[i-1]){
                up[i]=max(up[i-1],down[i-1]+1);
                down[i]=down[i-1];
            }else if(nums[i]<nums[i-1]){
                down[i]=max(down[i-1],up[i-1]+1);
                up[i]=up[i-1];
            }else{
                down[i]=down[i-1];
                up[i]=up[i-1];
            }
        }
        return max(up[n-1],down[n-1]);
    }
};

update:
class Solution {
public:
    /*
        up[i]代表到i为止 所有wiggle subsequent最后两个元素是上升的最大长度 这类型记为type U
        down[i]代表..... 最后两个元素是下降的最大长度 这种类型记为type D
    */
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        if(n<=1)
            return n;
        vector<int> up(n,0),down(n,0);
        up[0]=down[0]=1; // 第0个元素可以认为上升或下降
        for(int i=1;i<n;i++){
             /** If nums[i] > nums[i-1], then we can use nums[i] to make a longer subsequence of type U
                Proof: We consider a subsequence of type D in {0,...,i-1} (its length is down[i-1]).
                Let N be the last number of this subsequence.
                - If nums[i] > N, then we can add nums[i] to the subsequence and it gives us a longer
                valid subsequence of type U.
                - If nums[i] <= N, then:
                (1) N cannot be nums[i-1], because nums[i-1] < nums[i] <= N i.e. nums[i-1] < N
                (2) 我们可以利用nums[i-1]替换N,既然最后一个元素为N可以构成长度为down[i-1]的type D序列 那么nums[i-1]<N,与N构成down的元素x
                (x在N之前,且x>N)必然可以与nums[i-1]构成 type D 即, x > nums[i-1] <nums[i]
                We can replace N with nums[i-1] (we still have a valid
                subsequence of type D, since N >= nums[i] > nums[i-1] i.e. N > nums[i-1]),
                and then add nums[i] to the subsequence, and we have a longer subsequence of type U.
                Therefore up[i] = down[i-1] + 1

                There is no gain in using nums[i] to make a longer subsequence of type D.
                Proof: Let N be the last number of a subsequence of type U
                in {0,...,i-1}.
                Assume we can use nums[i] to make a longer subsequence of type D. Then:
                (1) N cannot be nums[i-1], otherwise we would not be able to use nums[i]
                to make a longer subsequence of type D as nums[i] > nums[i-1]
                (2) Necessarily nums[i] < N, and therefore nums[i-1] < N since nums[i-1] < nums[i].
                But this means that we could have used nums[i-1] already to make a longer
                subsequence of type D.
                So even if we can use nums[i], there is no gain in using it, so we keep the old value of
                down (down[i] = down[i-1])
            */
            if(nums[i]>nums[i-1]){
                up[i]=down[i-1]+1;
                down[i]=down[i-1];
            }else if(nums[i]<nums[i-1]){
                down[i]=up[i-1]+1;
                up[i]=up[i-1];
            }else{
                down[i]=down[i-1];
                up[i]=up[i-1];
            }
        }
        return max(down[n-1], up[n-1]);
    }
};

advance:
class Solution {
public:
    /*
        up[i]代表到i为止 所有wiggle subsequent最后两个元素是上升的最大长度 这类型记为type U
        down[i]代表..... 最后两个元素是下降的最大长度 这种类型记为type D
        可以做空间上的优化 O(1)
    */
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        if(n<=1)
            return n;
        int up=1,down=1; // 第0的元素可以认为上升或下降
        for(int i=1;i<n;i++){
            if(nums[i]>nums[i-1]){
                up=down+1;
            }else if(nums[i]<nums[i-1]){
                down=up+1;
            }
        }
        return max(up,down);
    }
};

Solution 4:
class Solution {
public:
    // DP 类似于最长递增子序列 up[i]表示以i结尾的最后是上升的最长序列长度 down[i]表示以i结尾的最后是下降的最长序列长度
    // up[0]=down[0]=1 单个元素可以认为是上升或者下降的
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        if(n<2)
            return n;
        vector<int> up(n,0),down(n,0);
        up[0]=down[0]=1;
        int maxLen=1;
        for(int i=1;i<n;i++){
            int preUp=0,preDown=0;
            for(int j=0;j<i;j++){
                // check在j,i间上升
                if(nums[j]<nums[i]&&preDown<down[j]){
                    preDown=down[j];
                }
                // check在j,i间下降
                if(nums[j]>nums[i]&&preUp<up[j]){
                    preUp=up[j];
                }
            }
            up[i]=preDown+1;
            down[i]=preUp+1;
            maxLen=max(maxLen,max(up[i],down[i]));
        }
        return maxLen;
    }
};
