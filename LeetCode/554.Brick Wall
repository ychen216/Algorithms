554. Brick Wall

/*
There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height
but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.

The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row 
from left to right.

If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line 
to cross the least bricks and return the number of crossed bricks.

You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.

Example:
Input: 
[[1,2,2,1],
 [3,1,2],
 [1,3,2],
 [2,4],
 [3,1,2],
 [1,3,1,1]]
Output: 2
Explanation: 

Note:
The width sum of bricks in different rows are the same and won't exceed INT_MAX.
The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.
*/

Solution:
class Solution {
public:
    /*
        最佳的切割点一定在某个brick的终点
    */
    int leastBricks(vector<vector<int>>& wall) {
        int size=wall.size();
        if(size==0)
            return 0;
        unordered_map<int,int> mmp;
        for(auto &row:wall){
            int len=0;
            //不能切在最后
            for(int i=0;i<row.size()-1;i++){
                len+=row[i];
                if(mmp.find(len)==mmp.end())
                    mmp[len]=1;
                else
                    mmp[len]++;
            }
        }
        int maxBrick=0;
        for(auto p:mmp)
            maxBrick=max(maxBrick,p.second);
        return size-maxBrick;
    }
};

class Solution {
public:
    /*
        找一条垂线 尽可能少地cross brick
        换个角度想尽可能少cross,那就是尽可能多的brick的边界在同一个位置
        记录下水平方向上不同位置边界 包含的brick数目(要排除起始位置和终止位置)
    */
    int leastBricks(vector<vector<int>>& wall) {
        unordered_map<int,int> mmp;
        int max_cross=wall.size();//最多每一行都cross1个brick;
        int max_brick=0;
        for(auto &v:wall){
            int margin=0;
            // 要排除左右两个墙
            for(int i=0;i<v.size()-1;i++){
                margin+=v[i];
                mmp[margin]++;
                max_brick=max(max_brick,mmp[margin]);
            }
        }
        return max_cross-max_brick;
    }
};
