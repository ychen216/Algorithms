215. Kth Largest Element in an Array

/*
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order,
not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.
Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.
*/

Solution 1:sort
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        int size=nums.size();
        return nums[size-k];
    }
};

Solution 2: 最大堆
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq(nums.begin(),nums.end());//最大堆
        int i=1;
        while(i++<k)
            pq.pop();
        return pq.top();
    }
};

Solution 3: 最小堆
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>> pq;//最小堆
        for(int i=0;i<nums.size();i++){
            pq.push(nums[i]);
            if(pq.size()>k)//保持堆大小为k 每次堆顶都是最小元素 到最后保留的k的元素是数组中最大的k个元素
                pq.pop();
        }
        return pq.top();
    }
};
update: 另一种写法
class Solution {
public:
    // Solution 2 最小堆 优先队列默认最大堆less<int> greater<int> 为最小堆
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>> pq;
        // 队列大小为k 始终维护最大的k个数 堆顶就是Kth Largest number
        for(auto &n:nums){
            if(pq.size()<k)
                pq.push(n);
            else{
                if(pq.top()<n){
                    pq.push(n);
                    pq.pop();
                }
            }
        }
        return pq.top();
    }
};

Solution 4:partition 
class Solution {
public:
    // Solution 3 partition
    int findKthLargest(vector<int>& nums, int k) {
        int n=nums.size();
        int low=0,high=n-1;
        int pos,target=n-k;
        pos=partition(nums,low,high);
        while(pos!=target){
            if(pos<target){
                low=pos+1;
            }else{
                high=pos-1;
            }
            pos=partition(nums,low,high);
        }
        return nums[target];
    }
private:
    int partition(vector<int> &nums, int p, int q){
        int pivot=nums[q];
        int j=p-1;
        for(int i=p;i<q;i++){
            if(nums[i]<=pivot){
                j=j+1;
                swap(nums[j],nums[i]);
            }
        }
        swap(nums[j+1],nums[q]);
        return j+1;
    }
};
