740. Delete and Earn
/*
Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying such operations.

Example 1:
Input: nums = [3, 4, 2]
Output: 6
Explanation: 
Delete 4 to earn 4 points, consequently 3 is also deleted.
Then, delete 2 to earn 2 points. 6 total points are earned.
Example 2:
Input: nums = [2, 2, 3, 3, 3, 4]
Output: 9
Explanation: 
Delete 3 to earn 3 points, deleting both 2's and the 4.
Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.
9 total points are earned.
Note:

The length of nums is at most 20000.
Each element nums[i] is an integer in the range [1, 10000].
*/

Solution:
class Solution {
    /*
    本题其实类似House Robber 做一个转换
    [2,2,2,3,4]->[0,0,6,3,4]下标为i的值为所有值为i的元素和,代表第i个房子的财产
    那么类似House Robber每次偷盗不能偷相邻的房子(也就是偷了一个房子i要删掉i-1和i+1)
    */
    public int deleteAndEarn(int[] nums) {
        int n=nums.length;
        int RANGE=10001;
        int []dp=new int[RANGE];
        //求第i个房子的价值
        for(int x:nums)
            dp[x]+=x;
        int res=dp[1];
        for(int i=2;i<RANGE;i++){
            //偷i或者不偷i
            dp[i]=Math.max(dp[i-1],dp[i-2]+dp[i]);
            res=Math.max(res,dp[i]);
        }
        return res;
    }
}
