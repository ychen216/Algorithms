740. Delete and Earn
/*
Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying such operations.

Example 1:
Input: nums = [3, 4, 2]
Output: 6
Explanation: 
Delete 4 to earn 4 points, consequently 3 is also deleted.
Then, delete 2 to earn 2 points. 6 total points are earned.
Example 2:
Input: nums = [2, 2, 3, 3, 3, 4]
Output: 9
Explanation: 
Delete 3 to earn 3 points, deleting both 2's and the 4.
Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.
9 total points are earned.
Note:

The length of nums is at most 20000.
Each element nums[i] is an integer in the range [1, 10000].
*/

Solution 1:
class Solution {
    /*
    本题其实类似House Robber 做一个转换
    [2,2,2,3,4]->[0,0,6,3,4]下标为i的值为所有值为i的元素和,代表第i个房子的财产
    那么类似House Robber每次偷盗不能偷相邻的房子(也就是偷了一个房子i要删掉i-1和i+1)
    */
    public int deleteAndEarn(int[] nums) {
        int n=nums.length;
        int RANGE=10001;
        int []dp=new int[RANGE];
        //求第i个房子的价值
        for(int x:nums)
            dp[x]+=x;
        int res=dp[1];
        for(int i=2;i<RANGE;i++){
            //偷i或者不偷i
            dp[i]=Math.max(dp[i-1],dp[i-2]+dp[i]);
            res=Math.max(res,dp[i]);
        }
        return res;
    }
}

Solution 2:
class Solution {
public:
    /*
        要认识到一点:如果pick一个数num,且num在数组中出现多次,那么我们一定会pick所有的num,否则数组中会剩下num
        because after picking num,all num+1 and num-1 will be deleted.那么也就不存在一个数,使得num会被删除
        那么就将问题转化为每次看到一个数num,是否选择pick num.if pick u will earn n*num;n为num在数组中出现的次数
        类似于rob house的问题 不能偷相邻的房子
        预处理将pick每一个num的获利记录下来 然后从小到大进行遍历 
        dp[i]=max(dp[i-1],dp[i-2]+earn[i]) dp[i]到i可以获得的最多利润
        可以利用map进行优化空间 同时对于每一个num只有pick和skip两者状态 可以用两个变量记录 进一步优化空间
    */
    int deleteAndEarn(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        map<int,int> mmp;
        // 预处理获利
        for(auto &num:nums)
            mmp[num]+=num;
        int pick=0,skip=0;
        for(auto &pair:mmp){
            int temp=skip; 
            if(mmp.find(pair.first-1)==mmp.end()){
                skip=max(skip,pick);
                //pick=max(pick,temp)+pair.second;
                pick=skip+pair.second;
            }else{
                skip=max(pick,skip);
                pick=temp+pair.second;
            }
        }
        return max(skip,pick);
    }
};
