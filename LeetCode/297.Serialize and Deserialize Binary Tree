297. Serialize and Deserialize Binary Tree
/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
*/
Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder ans=new StringBuilder();
        sHelper(root,ans);
        return ans.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String []tree=data.split(" ");
        Deque<String> dq = new LinkedList<>();
        dq.addAll(Arrays.asList(tree));
        return dHelper(dq);
    }
    //按照前序遍历
    private void sHelper(TreeNode root,StringBuilder res){
        if(root==null){
            res.append("null").append(" ");
            return;
        }
        res.append(root.val).append(" ");
        sHelper(root.left,res);
        sHelper(root.right,res);
    }
    
    private TreeNode dHelper(Deque<String> tree){
        TreeNode root=null;
        String cur=tree.remove();
        if(cur.equals("null"))
            return root;
        root=new TreeNode(Integer.parseInt(cur));
        root.left=dHelper(tree);
        root.right=dHelper(tree);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
