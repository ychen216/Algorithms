689. Maximum Sum of 3 Non-Overlapping Subarrays

/*
In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). 
If there are multiple answers, return the lexicographically smallest one.

Example:
Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
Note:
nums.length will be between 1 and 20000.
nums[i] will be between 1 and 65535.
k will be between 1 and floor(nums.length / 3).
*/

Solution 1:Brute
class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n=nums.length;
        int maxSum=0,temp=0;
        int []res=new int[3];
        for(int first=0;first<=n-3*k;first++){
            for(int second=first+k;second<=n-2*k;second++){
                for(int last=second+k;last<=n-k;last++){
                    for(int i=0;i<k;i++){
                        temp+=nums[first+i]+nums[second+i]+nums[last+i];
                    }
                    if(maxSum<temp){
                        maxSum=temp;
                        res[0]=first;res[1]=second;res[2]=last;
                    }
                    temp=0;
                }
            }
            
        }
        return res;
    }
}

Solution 2:
class Solution {
public:
/*
  The question asks for three non-overlapping intervals with maximum sum of all 3 intervals. 
  If the middle interval is [i, i+k-1], where k <= i <= n-2k, the left interval has to be in subrange [0, i-1],
  and the right interval is from subrange [i+k, n-1].

  So the following solution is based on DP.
    posLeft[i] is the starting index for the left interval in range [0, i];
    posRight[i] is the starting index for the right interval in range [i, n-1]; 
*/
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        
        // sum[i] means nums[0] + nums[1] + ... + nums[i-1]
        vector<int> sum = {0};
        for (int& num:nums) {
            sum.push_back(sum.back() + num);
        }
        
        // posLeft[i] means if the middle interval start index is i, what's the index for left interval 
        // such that left interval has the maximum sum.
        // initial value is 0 because if middle interval start index is k, then left interval start index is 0.
        vector<int> posLeft(n, 0); 
        int leftMaxSum = sum[k] - sum[0]; // if left interval start index is 0, what's the sum of the left interval
        int leftMaxSumIndex = 0;
        // middle interval start index can only be k, k + 1, ... , n - 2*k and we start from k + 1 
        // since i = k is our initial value.
        for (int i = k + 1; i <= n - 2*k; i++) {
            if (sum[i]-sum[i-k] > leftMaxSum) {
                posLeft[i] = i-k;
                leftMaxSum = sum[i]-sum[i-k];
                leftMaxSumIndex = i-k; // if left interval start index is i - k, the sum of the left interval is bigger.
            } else {
                posLeft[i] = leftMaxSumIndex;
            } 
        }
        
        
        // posRight[i] means if the middle interval start index is i, what's the index for right interval 
        // such that right interval has the maximum sum.
        // initial value is n-k because if middle interval start index is n - 2*k, then right interval start index is n-k.
        vector<int> posRight(n,n-k);
        int rightMaxSum = sum[n] - sum[n-k];
        int rightMaxSumIndex = n-k;
        // caution: the condition is ">= tot" for right interval, and "> tot" for left interval
        // middle interval start index can only be n - 2*k, n - 2*k - 1, ... , k and we start from n - 2*k - 1
        // since i = n - 2*k is our initial value
        for (int i = n - 2*k - 1; i >= k; i--) {
            if (sum[i+2*k]-sum[i+k] >= rightMaxSum) {
                posRight[i] = i + k;
                rightMaxSum = sum[i+2*k]-sum[i+k];
                rightMaxSumIndex = i + k;
            } else {
                posRight[i] = rightMaxSumIndex;
            }
        }
        int maxSum = 0;
        vector<int> ans(3,0);
        // test all possible middle interval
        for (int i = k; i <= n-2*k; i++) {
            int l = posLeft[i], r = posRight[i];
            int totalSum = (sum[i+k]-sum[i]) + (sum[l+k]-sum[l]) + (sum[r+k]-sum[r]);
            if (totalSum > maxSum) {
                maxSum = totalSum;
                ans = {l, i, r};
            }
        }
        return ans;
    }
};

JAVA
class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n=nums.length;
        int []sum=new int[n+1];
        //sum[i]表示nums[0]~nums[i-1]的和
        for(int i=1;i<=n;i++)
            sum[i]=sum[i-1]+nums[i-1];
        // posLeft[i] means if the middle interval start index is i, what's the index for left interval 
        // such that left interval has the maximum sum.
        // initial value is 0 because if middle interval start index is k, then left interval start index is 0.
        int []posLeft=new int[n];
        int leftMaxSum=sum[k]-sum[0],leftMaxIndex=0;
        //中间区间选择起点为i
        for(int i=k;i<=n-2*k;i++){
            if(sum[i]-sum[i-k]>leftMaxSum){
                leftMaxSum=sum[i]-sum[i-k];
                leftMaxIndex=i-k;
            }
            posLeft[i]=leftMaxIndex;
        }
        
        // posRight[i] means if the middle interval start index is i, what's the index for right interval 
        // such that right interval has the maximum sum.
        // initial value is n-k because if middle interval start index is n - 2*k, then right interval start index is n-k.
        int []posRight=new int[n];
        int rightMaxSum=sum[n]-sum[n-k],rightMaxIndex=n-k;
        for(int i=n-2*k;i>=k;i--){
            if(sum[i+2*k]-sum[i+k]>=rightMaxSum){
                rightMaxSum=sum[i+2*k]-sum[i+k];
                rightMaxIndex=i+k;
            }
            posRight[i]=rightMaxIndex;
        }
        
        int []res=new int[3];
        int maxSum=0;
        for (int i = k; i <= n-2*k; i++) {
            int l = posLeft[i], r = posRight[i];
            int totalSum = (sum[i+k]-sum[i]) + (sum[l+k]-sum[l]) + (sum[r+k]-sum[r]);
            if (totalSum > maxSum) {
                maxSum = totalSum;
                res[0]=l;res[1]=i;res[2]=r;
            }
        }
        return res;
    }
}
