725. Split Linked List in Parts
/*
Given a (singly) linked list with head node root, write a function to split the linked list into k consecutive linked list "parts".

The length of each part should be as equal as possible: no two parts should have a size differing by more than 1. This may lead to some parts being null.

The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.

Return a List of ListNode's representing the linked list parts that are formed.

Examples 1->2->3->4, k = 5 // 5 equal parts [ [1], [2], [3], [4], null ]
Example 1:
Input: 
root = [1, 2, 3], k = 5
Output: [[1],[2],[3],[],[]]
Explanation:
The input and each element of the output are ListNodes, not arrays.
For example, the input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null.
The first element output[0] has output[0].val = 1, output[0].next = null.
The last element output[4] is null, but it's string representation as a ListNode is [].
Example 2:
Input: 
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
Explanation:
The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.

Note:
  The length of root will be in the range [0, 1000].
  Each value of a node in the input will be an integer in the range [0, 999].
  k will be an integer in the range [1, 50].
*/
Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /*
        list的长度为len 每个部分至少有len/k个元素 在前len%k的部分,每个部分分配一个元素
    */
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
        vector<ListNode*> res(k,NULL);
        int len=0;
        // list长度
        for(ListNode *p=root;p!=NULL;p=p->next)
            len++;
        int base=len/k,r=len%k;
        ListNode *pre=NULL,*cur=root;
        for(int i=0;i<k&&cur;i++,r--){
            res[i]=cur;
            for(int j=0;j<base+(r>0);j++){
                pre=cur;
                cur=cur->next;
            }
            pre->next=NULL;
        }
        return res;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /*
        链表长度为len,平分为k段 每段长度为len/k
        若不能整除 则将剩余的部分平摊到前len%k中 每一段多一个node
    */
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
        int len=getLen(root);
        int perLen=len/k; //每段平均包含node数
        int r=len%k; // 余数 平摊到前r段中 每段+1个node
        ListNode *cur=root,*pre=NULL;
        vector<ListNode *> res;
        for(int i=0;i<k;i++){
            res.push_back(cur);
            for(int j=0;j<perLen;j++){
                pre=cur;
                cur=cur->next;
            }
            // 增加一个node
            if(r>0){
                pre=cur;
                cur=cur->next;
                r--;
            }
            // 该段截断 
            // 有可能root是一个空list k!=0
            // eg.root=null k=3 =>[null,null,null]
            if(pre!=NULL)
                pre->next=NULL;
        }
        return res;
    }
private:
    int getLen(ListNode *root){
        int len=0;
        while(root){
            len++;
            root=root->next;
        }
        return len;
    }
};
