18. 4Sum
/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
*/
Solution 1:dfs TLE
class Solution {
public:
    void helper(set<vector<int>> &res,vector<int>& nums,bool *visit,vector<int> temp,int sum,int target,int start){
        if(temp.size()==4){
            if(sum==target)
                res.insert(temp);
            return;
        }
        for(int i=start;i<nums.size();i++){
            if(!visit[i]){
                visit[i]=true;
                temp.push_back(nums[i]);
                helper(res,nums,visit,temp,sum+nums[i],target,i+1);
                visit[i]=false;
                temp.pop_back();
            }
        }
    }
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int len=nums.size();
        if(len==0)
            return {};
        sort(nums.begin(),nums.end());
        bool visit[len]={0};
        set<vector<int>> res;
        helper(res,nums,visit,{},0,target,0);
        return vector<vector<int>>(res.begin(),res.end());
    }
};


Solution 2:
class Solution {
public:
    // 与 3Sum 一样的思想 排序后 固定前两个数 后两数根据和的情况进行选择
    // 利用set进行存储结果
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int len=nums.size();
        set<vector<int> > res;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < len - 3; i++) {
            for (int j = i + 1; j < len - 2; j++) {
                int left = j + 1, right = len - 1;
                while (left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        vector<int> out;
                        out.push_back(nums[i]);
                        out.push_back(nums[j]);
                        out.push_back(nums[left]);
                        out.push_back(nums[right]);
                        res.insert(out);
                        ++left; --right;
                    } else if (sum < target) ++left;
                    else --right;
                }
            }
        }
        return vector<vector<int> > (res.begin(), res.end());
    }
};


Solution 3:
class Solution {
public:
    // 手动去除重复的元组 不用set 并加入一些剪枝操作
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        if(n<4)
            return {};
        sort(nums.begin(),nums.end());
        if(nums[0]+nums[1]+nums[2]+nums[3]>target||nums[n-1]+nums[n-2]+nums[n-3]+nums[n-4]<target)
            return {};
        vector<vector<int>> res;
        for(int i=0;i<n-3;i++){
            if(i>0&&nums[i-1]==nums[i]) continue; // 元组第一个元素是nums[i]的所有可能情况已经在搜索nums[i-1]时包含了
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break; // 后续的更大都不可能了
            if(nums[i]+nums[n-1]+nums[n-2]+nums[n-3]<target) continue; // 需要更大的第一个元素
            for(int j=i+1;j<n-2;j++){
                if(j>i+1&&nums[j-1]==nums[j]) continue; //同理
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break; // 后续的更大都不可能了
            if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target) continue; // 需要更大的第一个元素
                int sum2=target-nums[i]-nums[j];
                int left=j+1,right=n-1;
                while(left<right){
                    int curSum=nums[left]+nums[right];
                    if(sum2==curSum){
                        vector<int> cand(4);
                        cand[0]=nums[i],cand[1]=nums[j],cand[2]=nums[left],cand[3]=nums[right];
                        res.push_back(cand);
                        left++;right--;
                        // 避免重复
                        while(left<right&&nums[left-1]==nums[left])left++;
                        while(left<right&&nums[right+1]==nums[right])right--;
                    }else if(sum2>curSum){
                        left++;
                        while(left<right&&nums[left-1]==nums[left])left++;
                    }else{
                        right--;
                        while(left<right&&nums[right+1]==nums[right])right--;
                    }
                }
            }
        }
        return res;
    }
};
