69. Sqrt(x)

/*
Implement int sqrt(int x).

Compute and return the square root of x.
*/

Solution 1:
class Solution {
public:
    int mySqrt(int x) {
        if(x==0)
            return 0;
        int left=1,right=x,ans;
        while(left<=right){
            int mid = left + (right - left) / 2;
            if (mid <= x / mid) {
                left = mid + 1;
                ans = mid;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }
};


Solution 2:
class Solution {
public:
    int mySqrt(int x) {
        long low=0,high=x,mid,pro;
        while(low<=high){
            mid=low+(high-low)/2;
            pro=mid*mid;
            if(pro==x)
                return mid;
            else if(pro>x)
                high=mid-1;
            else
                low=mid+1;
        }
        return low-1;
    }
};

Solution 3:
class Solution {
public:
    int mySqrt(int x) {
        if(x==0||x==1)
            return x;
        long start=1,end=x,mid, pro;
        while(start+1<end){
            mid=start+(end-start)/2;
            pro=mid*mid;
            if(pro==x){
                return mid;
            }else if(pro>x){
                end=mid;
            }else{
                start=mid;
            }
        }
        if(end*end<=x)
            return end;
        else
            return start;
    }
};

update: 利用除法可以不用long
class Solution {
public:
    int mySqrt(int x) {
        if(x==0||x==1)
            return x;
        int start=1,end=x,mid,r;
        while(start+1<end){
            mid=start+(end-start)/2;
            r=x/mid;
            if(mid==r){
                return mid;
            }else if(mid>r){
                end=mid;
            }else{
                start=mid;
            }
        }
        if(end<=x/end)
            return end;
        else
            return start;
    }
};

class Solution {
public:
    //第一个乘积>=x的
    int mySqrt(int x) {
        if(x<2){
            return x;
        }
        int start=0,end=x;
        while(start<=end){
            int mid=start+(end-start)/2;
            int div=x/mid;
            if(div==mid){
                return mid;
            }
            else if(div>mid){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        //退出循环时start指向第一个平方>x的数 所以结果需要-1
        return start-1;
    }
};
