498. Diagonal Traverse

/*
Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.
*/

Solution:
class Solution {
public:
    /*
    If out of bottom border (row >= m) then row = m - 1; col += 2; change walk direction.
    if out of right border (col >= n) then col = n - 1; row += 2; change walk direction.
    if out of top border (row < 0) then row = 0; change walk direction.
    if out of left border (col < 0) then col = 0; change walk direction.
    Otherwise, just go along with the current direction.
    */
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        int row=matrix.size();
        if(row==0)
            return {};
        int col=matrix[0].size();
        int cnt=row*col;
        vector<int>res;
        int dx[2]={-1,1};
        int dy[2]={1,-1};
        int i=0,j=0,d=0;//初始方向为向右上
        for(int k=0;k<cnt;k++){
            res.push_back(matrix[i][j]);
            i+=dx[d];
            j+=dy[d];
            
            
            if(i>=row){
                i=row-1;
                j+=2;
                d=1-d;
            }
            if(j>=col){
                i+=2;
                j=col-1;
                d=1-d;
            }
            if(i<0){
                i=0;
                d=1-d;//变方向
            }
            if(j<0){
                j=0;
                d=1-d;
            }           
        }
        return res;
    }
};


Solution 2:
class Solution {
public:
    /*
        模拟:每一次行进的路线都是对角线 x+y=k x,y分别是元素的横纵坐标
        当k%2==0时 朝上走
        当k%2==1时 朝下走
    */
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        int M=matrix.size();
        if(M==0)
            return {};
        int N=matrix[0].size();
        int r=0,c=0,total=M*N;
        vector<int> res;
        for(int i=0;i<total;i++){
            res.push_back(matrix[r][c]);
            if((r+c)&1){
                //向下走
                // if else 的顺序很重要 向上走的情况也是同理
                // 必须先r==M-1 因为有时候同时满足 r==M-1&&c==0
                // 此时应该按照 r==M-1的情况行动
                if(r==M-1){
                    c++;
                }
                else if(c==0){
                    r++;
                }
                else{
                    r++;c--;    
                }
            }else{
                // 向上走
                if(c==N-1){
                    r++;
                }
                else if(r==0){
                    c++;
                }
                else{
                    r--;c++;
                }
            }
        }
        return res;
    }
};

Solution 3:
class Solution {
public:
    //对角线遍历 m*n的矩阵有m+n-1条对角线 且解析式分别为 x+y=k k=0.1.2...m+n-2
    //按照对角线遍历,且默认按照一个方向（向右上或向左下）遍历,然后按照需要翻转
    //按照解析式确定每一条对角线遍历的起始位置
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if(matrix.empty()||matrix[0].empty()){
            return res;
        }
        int m=matrix.size(),n=matrix[0].size();
        for(int k=0;k<m+n-1;k++){
            int begin_pos=res.size();
            //默认按照向右上方遍历的顺序加入 
            for(int x=min(k,m-1),y=k-x;x>=0&&y<n;x--,y++){
                res.push_back(matrix[x][y]);
            }
            //如果实际的遍历顺序是向左下遍历 那么需要翻转
            if(k&1){
                reverse(res.begin()+begin_pos,res.end());      
            }
        }
        return res;
    }
};

update:
class Solution {
public:
    //每次都在对角线上走 x+y=step
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        if(matrix.empty()||matrix[0].empty()){
            return {};
        }
        vector<int> res;
        int m=matrix.size(),n=matrix[0].size();
        int x=0,y=0,step=1;
        while(step<m+n){
            cout<<step<<" "<<x<<" "<<y<<endl;
            if(step&1){
                //向上走
                while(x>=0&&y<n){
                    res.push_back(matrix[x][y]);
                    x--;
                    y++;
                }
                //更新新一条对角线的x,y起始位置 注意判断的先后顺序
                if(y>=n){
                    y=n-1;
                    x=step-y;
                }
                else{
                    x=0;
                    y=step;
                }
            }
            else{
                //向下走
                while(x<m&&y>=0){
                    res.push_back(matrix[x][y]);
                    x++;
                    y--;
                }
                if(x>=m){
                    x=m-1;
                    y=step-x;
                }
                else{
                    y=0;
                    x=step-y;
                }
            }
            step++;
        }
        return res;
    }
};
