413. Arithmetic Slices
/*
A sequence of number is called arithmetic if it consists of at least three elements and if the difference between
any two consecutive elements is the same.

For example, these are arithmetic sequence:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.
1, 1, 2, 5, 7

A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.

A slice (P, Q) of array A is called arithmetic if the sequence:
A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.

The function should return the number of arithmetic slices in the array A.

Example:
A = [1, 2, 3, 4]
return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.
*/

Solution 1:
class Solution {
public:
    int cnt=0;
    int numberOfArithmeticSlices(vector<int>& A) {
        int size=A.size();
        if(size<3)
            return 0;
        cnt=0;
        for(int i=2;i<size;i++)
            extendArithmeticSlices(A,i);
        return cnt;
    }
    //以A[last]为结尾的ArithmeticSlices个数
    void extendArithmeticSlices(vector<int> &A,int last){
        while(last>=2&&A[last]-A[last-1]==A[last-1]-A[last-2]){
            cnt++;
            last--;
        }
    }
};

Solution 2:DP
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        int size=A.size();
        if(size<3)
            return 0;
        int dp[size]={0};//以A[i]结尾的ArithmeticSlices的个数
        int sum=0;
        for(int i=2;i<size;i++){
            if(A[i]-A[i-1]==A[i-1]-A[i-2])
                dp[i]=dp[i-1]+1;
            sum+=dp[i];
        }
        return sum;
    }
   
};

改写
class Solution {
public:
    // dp[i]=dp[i-1]+1 when i>=2 && nums[i]-nums[i-1]==nums[i-2]-nums[i-1]
    // dp[i]以nums[i]结尾的arithmetic slices个数
    int numberOfArithmeticSlices(vector<int>& A) {
        int n=A.size();
        if(n<3)
            return 0;
        int ans=0;
        int pre=0;
        for(int i=2;i<n;i++){
            if(A[i]-A[i-1]==A[i-1]-A[i-2])
                pre=pre+1;
            else
                pre=0;
            ans+=pre;
        }
        return ans;
    }
};

Solution 3:
class Solution {
public:
    /*
        长度为n的合法arithmetic slices共包含 (n-1)(n-2)/2的合法串
        For example, if your sequence was 2,4,6,8,10, then you have the following sub sequences formed:
        2,4,6, 4,6,8, 6,8,10: 3 sub sequences, or rather 5-2 sequences
        2,4,6,8, 4,6,8,10: 2 sub sequences
        2,4,6,8,10: 1 sub sequence
        Thus the total number of sequences is 3+2+1 or in other words, the sum from 1..n-2, which is (n-1)*(n-2)/2
    */
    int numberOfArithmeticSlices(vector<int>& A) {
        int n=A.size();
        if(n<3)
            return 0;
        int ans=0;
        int len=2;
        for(int i=2;i<n;i++){
            if(A[i]-A[i-1]==A[i-1]-A[i-2])
                len++;
            else{
                if(len>2)
                    ans+=(len-1)*(len-2)/2;
                len=2;
            }
        }
        // rear合法的arithmetic slice
        if(len>2)
            ans+=(len-1)*(len-2)/2;
        return ans;
    }
};
