15. 3Sum
/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/
Solution 1:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int len=nums.size();
        if(len==0)
            return {};
        sort(nums.begin(),nums.end());
        set<vector<int>> res;
        for(int i=0;i<len-2;i++){
            int low=i+1,high=len-1;
            while(low<high){
                int sum=nums[i]+nums[low]+nums[high];
                if(sum==0){
                    res.insert({nums[i],nums[low],nums[high]});
                    low++;
                    high--;
                }
                else if(sum>0)
                    high--;
                else
                    low++;
            }
        }
        return vector<vector<int>>(res.begin(),res.end());
    }
};

Solution 2:
class Solution {
public:
    // 不用set  手动去重+剪枝
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        if(n<3)
            return {};
        sort(nums.begin(),nums.end());
        if(nums[0]+nums[1]+nums[3]>0||nums[n-1]+nums[n-2]+nums[n-3]<0)
            return {};
        vector<vector<int>> res;
        for(int i=0;i<n-2;i++){
            // 三元组的第一个元素是nums[i]的所有可能组合在nums[i-1]时就已经尝试过了
            if(i>0&&nums[i]==nums[i-1]) continue; 
            if(nums[i]+nums[i+1]+nums[i+2]>0) break; //nums[i]太大了
            if(nums[i]+nums[n-1]+nums[n-2]<0) continue; // nums[i]太小了
            int left=i+1,right=n-1;
            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];
                if(sum==0){
                    vector<int> v({nums[i],nums[left],nums[right]});
                    res.push_back(v);
                    left++,right--;
                    // 避免重复元组
                    while(left<right&&nums[left]==nums[left-1])left++;
                    while(left<right&&nums[right]==nums[right+1])right--;
                }else if(sum>0){
                    right--;
                    while(left<right&&nums[right]==nums[right+1])right--;
                }else{
                    left++;
                    while(left<right&&nums[left]==nums[left-1])left++;
                }
            }
        }
        return res;
    }
};


update:去掉剪枝操作反而更快..
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        int n=nums.size();
        if(n==0)
            return res;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-2;i++){
            if(i!=0&&nums[i]==nums[i-1]) continue;
            int j=i+1,k=n-1;
            int target=0-nums[i],sum;
            while(j<k){
                sum=nums[j]+nums[k];
                if(sum==target){
                    res.push_back(vector<int>({nums[i],nums[j],nums[k]}));
                    j++;k--;
                    while(j<k&&nums[j]==nums[j-1]) j++;
                    while(j<k&&nums[k]==nums[k+1]) k--;
                }
                else if(sum<target){
                    j++;
                }else{
                    k--;
                }
            }
        }
        return res;
    }
};
