718. Maximum Length of Repeated Subarray

/*
Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.

Example 1:
Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].
Note:
  1 <= len(A), len(B) <= 1000
  0 <= A[i], B[i] < 100
*/

Solution 1:
class Solution {
public:
    /*
        idea类似LCS dp[i][j]为以A[i] B[j]结尾的最长公共子数组长度
        dp[i][j]=dp[i-1][j-1]+1 if A[i-1]==B[j-1]
        dp[i][j]=0 if A[i-1]!=B[j-1]
        初始化 dp[i][0]=0 dp[0][j]=0
    */
    int findLength(vector<int>& A, vector<int>& B) {
        int lena=A.size(),lenb=B.size();
        if(lena==0||lenb==0)
            return 0;
        vector<vector<int>> dp(lena+1,vector<int>(lenb+1,0));
        int maxLen=0;
        for(int i=1;i<=lena;i++){
            for(int j=1;j<=lenb;j++){
                if(A[i-1]!=B[j-1])continue; // dp[i][j]=0 初始化已经完成
                dp[i][j]=dp[i-1][j-1]+1;
                maxLen=max(maxLen,dp[i][j]);
            }
        }
        return maxLen;
    }
};

update:
class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int n1=A.size();
        int n2=B.size();
        if(n1==0||n2==0){
            return 0;
        }
        vector<vector<int>> dp(n1,vector<int>(n2,0));//dp[i][j]表示以A[i],B[j]结尾的最长重复子数组长度
        int res=0;
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                if(A[i]!=B[j]) continue;
                dp[i][j]=1;
                if(i>0&&j>0){
                    dp[i][j]+=dp[i-1][j-1];
                }
                res=max(res,dp[i][j]);
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        idea类似LCS dp[i][j]为以A[i] B[j]结尾的最长公共子数组长度
        dp[i][j]=dp[i-1][j-1]+1 if A[i-1]==B[j-1]
        dp[i][j]=0 if A[i-1]!=B[j-1]
        初始化 dp[i][0]=0 dp[0][j]=0
        可以优化一下空间 每一次都只依赖前一轮状态
    */
    int findLength(vector<int>& A, vector<int>& B) {
        int lena=A.size(),lenb=B.size();
        if(lena==0||lenb==0)
            return 0;
        vector<int> dp(lenb+1,0);
        int maxLen=0;
        for(int i=1;i<=lena;i++){
            // 要逆序更新 否则本轮更新了dp[j] 下一次更新dp[j+1]时利用的就是被覆盖过的数据
            for(int j=lenb;j>=1;j--){
                if(A[i-1]!=B[j-1])
                    dp[j]=0;
                else{
                    dp[j]=dp[j-1]+1;
                    maxLen=max(maxLen,dp[j]);   
                }
            }
        }
        return maxLen;
    }
};
