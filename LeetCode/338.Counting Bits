338. Counting Bits
/*
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's 
in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:
  It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
  Space complexity should be O(n).
  Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
*/

Solution 1:naive
class Solution {
public:
    // 直接对每一个数字i 计算i的二进制表示包含几个1
    vector<int> countBits(int num) {
        vector<int> v;
        v.push_back(0);
        int i=1;
        while(i<=num){
            int cnt=0;
            int temp=i;
            while(temp>0){
                if(temp%2)
                    cnt++;
                temp/=2;
            }
            v.push_back(cnt);
            i++;
        }
        return v;
    }
};

Solution 2:trick
class Solution {
public:
    //f[i]=f[i>>1]+i&1;
    // i可以看成是i/2左移一位 加上末尾或0或1的变化
    vector<int> countBits(int num) {
        vector<int> v(num+1,0);
        for(int i=1;i<=num;i++){
            v[i]=v[i>>1]+(i&1);
        }
        return v;
    }
};
