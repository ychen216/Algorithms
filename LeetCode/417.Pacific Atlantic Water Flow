417. Pacific Atlantic Water Flow

/*
Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:
  The order of returned grid coordinates does not matter.
  Both m and n are less than 150.
Example:
Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).

*/

Solution 1:
class Solution {
public:
    /*
        题意:矩阵左边和上边是太平洋 右边和下面是大西洋 寻找水既能流到太平洋又能流到大西洋的元素陆地集合
        要找能够同时到达两类边界的所有坐标，那么转换一下思维，是找从两类边界逆向出发能到达目的地的交集
        该题的意思在边界的点能够流向 对应边界的海洋 可以以这些点做dfs或bfs 然后求两个集合的交集
    */
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {
        int m=matrix.size();
        if(m==0)
            return {};
        int n=matrix[0].size();
        if(n==0)
            return {};
        // 两个数组分别记录能够到达的位置
        vector<vector<bool>> pacific(m,vector<bool>(n,false));
        vector<vector<bool>> atlantic(m,vector<bool>(n,false));
        for(int i=0;i<m;i++){
            dfs(matrix,pacific,m,n,i,0,INT_MIN);
            dfs(matrix,atlantic,m,n,i,n-1,INT_MIN);
        }
        for(int j=0;j<n;j++){
            dfs(matrix,pacific,m,n,0,j,INT_MIN);
            dfs(matrix,atlantic,m,n,m-1,j,INT_MIN);
        }
        vector<pair<int,int>> res;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j]&&atlantic[i][j])
                    res.push_back({i,j});
            }
        }
        return res;
    }
private:
    int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};
    void dfs(vector<vector<int>>& matrix,vector<vector<bool>>& visit,int m,int n,int x,int y,int preHeight){
        // matrix[x][y]<preHeight说明不能从xx,yy流到 pre position
        if(x<0||x>=m||y<0||y>=n||visit[x][y]||matrix[x][y]<preHeight)
            return;
        visit[x][y]=true;
        for(int i=0;i<4;i++){
            int xx=x+dx[i];
            int yy=y+dy[i];
            dfs(matrix,visit,m,n,xx,yy,matrix[x][y]);
        }
    }
};

Solution 2:
class Solution {
public:
    /*
        题意:矩阵左边和上边是太平洋 右边和下面是大西洋 寻找水既能流到太平洋又能流到大西洋的元素陆地集合
        要找能够同时到达两类边界的所有坐标，那么转换一下思维，是找从两类边界逆向出发能到达目的地的交集
        该题的意思在边界的点能够流向 对应边界的海洋 可以以这些点做dfs或bfs 然后求两个集合的交集
    */
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {
        int m=matrix.size();
        if(m==0)
            return {};
        int n=matrix[0].size();
        if(n==0)
            return {};
        // 两个数组分别记录能够到达的位置
        vector<vector<bool>> pacific(m,vector<bool>(n,false));
        vector<vector<bool>> atlantic(m,vector<bool>(n,false));
        queue<pair<int,int>> qp;
        queue<pair<int,int>> qa;
        for(int i=0;i<m;i++){
            qp.push({i,0});
            qa.push({i,n-1});
            pacific[i][0]=atlantic[i][n-1]=true;
        }
        for(int j=0;j<n;j++){
            qp.push({0,j});
            qa.push({m-1,j});
            pacific[0][j]=atlantic[m-1][j]=true;
        }
        
        bfs(matrix,qp,pacific);
        bfs(matrix,qa,atlantic);
        vector<pair<int,int>> res;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j]&&atlantic[i][j])
                    res.push_back({i,j});
            }
        }
        return res;
    }
private:
    int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};
    void bfs(vector<vector<int>>& matrix,queue<pair<int,int>> &q,vector<vector<bool>>& visit){
        int m=matrix.size(),n=matrix[0].size();
        while(!q.empty()){
            auto cur=q.front();
            q.pop();
            for(int i=0;i<4;i++){
                int x=cur.first+dx[i];
                int y=cur.second+dy[i];
                if(x<0||x>=m||y<0||y>=n||visit[x][y]||matrix[x][y]<matrix[cur.first][cur.second])
                    continue;
                visit[x][y]=true; 
                q.push({x,y});
            }
        }
    }
};
