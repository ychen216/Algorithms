3. Longest Substring Without Repeating Characters
/*
Given a string, find the length of the longest substring without repeating characters.

Examples:
  Given "abcabcbb", the answer is "abc", which the length is 3.
  Given "bbbbb", the answer is "b", with the length of 1.
  Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, 
  "pwke" is a subsequence and not a substring.
*/

Solution 1:
class Solution {
public:
    // 双指针
    int lengthOfLongestSubstring(string s) {
        int n=s.length();
        if(n<2)
            return n;
        int left,right,maxLen=1;
        unordered_map<char,int> mmp;//记录区间里每个字母出现的次数
        for(left=right=0;right<n;right++){
            // 每一次将right元素加入
            mmp[s[right]]++;
            while(left<right&&mmp[s[right]]>1){
                mmp[s[left++]]--;
            }
            maxLen=max(right-left+1,maxLen);
        }
        return maxLen;
    }
};

update:双指针 利用set来保存区间里出现过的字符
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int left,right,maxLen=0;
        unordered_set<char> charSet;//存储该区间已经出现过的字符
        for(left=0,right=0;right<s.length();right++){
            while(left<right&&charSet.find(s[right])!=charSet.end()){
                charSet.erase(s[left]);
                left++;
            }
            charSet.insert(s[right]);
            maxLen=max(maxLen,right-left+1);
        }
        return maxLen;
    }
};

Solution 2:
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len=s.length();
        if(len<2)
            return len;
        vector<int> dict(256, -1);//字符出现下标的前一位
        int maxLen = 0, start = -1;
        for (int i = 0; i<len; i++) {
            if (dict[s[i]] > start)
                start = dict[s[i]];
            dict[s[i]] = i;
            maxLen = max(maxLen, i - start);
        }
        return maxLen;
    }
};

update:
class Solution {
public:
    // 双指针
    int lengthOfLongestSubstring(string s) {
        int n=s.length();
        if(n<2)
            return n;
        int left,right,maxLen=1;
        unordered_map<char,int> mmp;//记录每一个字符上一次出现的位置
        for(left=right=0;right<n;right++){
            // 如果right在区间内已经出现在i位置 那么区间要移动到[i+1,right]这样才能保证不重复
            if(mmp.find(s[right])!=mmp.end()&&mmp[s[right]]>=left)
                left=mmp[s[right]]+1;
            mmp[s[right]]=right;
            maxLen=max(right-left+1,maxLen);
        }
        return maxLen;
    }
};
