390. Elimination Game

/*
There is a list of sorted integers from 1 to n. Starting from left to right, remove the first number and every other number 
afterward until you reach the end of the list.

Repeat the previous step again, but this time from right to left, remove the right most number and every other number 
from the remaining numbers.

We keep repeating the steps again, alternating left to right and right to left, until a single number remains.

Find the last number that remains starting with a list of length n.

Example:
Input:
n = 9,
1 2 3 4 5 6 7 8 9
2 4 6 8
2 6
6
Output:
6
*/

Solution:
class Solution {
public:
    /*
        https://leetcode.com/problems/elimination-game/discuss/87119/JAVA:-Easiest-solution-O(logN)-with-explanation
        idea:update and record valid head in each turn. when the total number becomes 1, head is the only number left.
        When will head be updated?
            if we move from left
            if we move from right and the total remaining number % 2 == 1
                like 2 4 6 8 10, we move from 10, we will take out 10, 6 and 2, head is deleted and move to 4
                like 2 4 6 8 10 12, we move from 12, we will take out 12, 8, 4, head is still remaining 2
         相邻元素之间的距离每一轮都扩大两倍
    */
    int lastRemaining(int n) {
        int remain=n;
        int head=1,step=1;// step是针对head更新的不长 或者说是 有效的相邻元素之差
        bool left2right=true;
        while(remain>1){
            // update head
            if(left2right||remain&1){
                head+=step;
            }
            remain>>=1; // remain/=2
            step<<=1; // step*=2
            left2right=!left2right;
        }
        return head;
    }
};

update:解释
class Solution {
public:
    /*
        记录下每一轮的起始元素head和该轮的步长step(指该轮有效元素之间的距离)当剩下的元素只有一个时，起始元素就是最后的结果
        1.当上一轮是从左向右消除时 或者 2.上一轮是从右向左消除且上一轮剩下的元素个数是奇数时：
        下一轮的起始元素是上一轮起始元素+step head'=head+step
        否则 head'=head
        同时每一轮留下的元素个数为该轮有效元素的一半,步长为该轮步长的两倍 
        remain'=remain/2 step'=2*step    
    */
    int lastRemaining(int n) {
        int head=1,step=1,remain=n;//第一轮的起始元素、步长、持有的有效元素个数
        bool left2right=true;//第一轮消除的方向
        while(remain>1){
            //利用上一轮的数据 更新当前轮的状态
            if(left2right||remain&1){
                head+=step;
            }
            step<<=1;
            remain>>=1;
            left2right=!left2right;
        }
        return head;
    }
};


Solution 2:
class Solution {
public:
    /*
        没理解
        https://leetcode.com/problems/elimination-game/discuss/87128/C-1-line-solution-with-explanation
        After first elimination, all the numbers left are even numbers.
        Divide by 2, we get a continuous new sequence from 1 to n / 2.
        For this sequence we start from right to left as the first elimination.
        Then the original result should be two times the mirroring result of lastRemaining(n / 2).
        中文的解释https://blog.csdn.net/MebiuW/article/details/52713918
    */
    int lastRemaining(int n) {
        return n==1 ? 1 : 2 * (n/2 + 1 - lastRemaining(n/2));
    }
};
