378. Kth Smallest Element in a Sorted Matrix
/*
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.
Note: 
You may assume k is always valid, 1 ≤ k ≤ n2.
*/

Solution:
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n=matrix.size();
        int first[n]={0};//表示每一行还未选中且最小的元素的下标
        int min_value;
        //寻找k次
        for(int i=0;i<k;i++){
            min_value=INT_MAX;
            int targetRow=-1;
            //只要比较每一行最小的元素
            for(int j=0;j<n;j++){
                if(first[j]<n&&matrix[j][first[j]]<min_value){
                    targetRow=j;
                    min_value=matrix[j][first[j]];
                }
            }
            //更新选中行的最小元素下标
            first[targetRow]++;
        }
        return min_value;
    }
};

Solution 2: Heap
class Solution {
public:
    /*
       用大根堆来存储当前最小的k个数字，然后遍历矩阵
       如果遍历位置数字大于等于堆顶元素，跳过该行继续遍历,否则将数字存入堆中并删除堆顶数字（保证堆中有k个数字）
       最终堆顶数字即是第k小的数字
    */
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n=matrix.size();
        priority_queue<int> pq;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(pq.size()<k)pq.push(matrix[i][j]);
                else{
                    if(pq.top()<=matrix[i][j])
                        break;
                    else{
                        pq.push(matrix[i][j]);
                        pq.pop();
                    }
                }
            }
        }
        return pq.top();
    }
};

update:
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        priority_queue<int> pq;
        for(auto&row:matrix){
            for(auto&cell:row){
                pq.push(cell);
                // 维护一个大小为k的最大堆 存着当前最小的k个数
                if(pq.size()>k){
                    pq.pop();
                    //后续的元素只会>=cell 如果栈顶元素(当前最大的元素)<=cell 后续的元素就不可能是最小的k的元素了
                    if(pq.top()<=cell){
                        break;
                    }
                }
            }
        }
        return pq.top();
    }
};

Solution 3: Binary Search
class Solution {
public:
    /*
        同时利用每一行每一列排序好的特点 左上角和右下角一定是矩阵中最大和最小的元素
        利用二分搜索 每次统计矩阵中小于等于中间值的数字个数cnt 拿它和k比较来确定第k小的数字在左半部分还是右半部分
    */
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int low=matrix[0][0],high=matrix.back().back();
        while(low<high){
            int mid=low+(high-low)/2;
            int cnt=0;
            // 统计每一行<=mid 的数字个数
            // upper_bound 利用二分查找返回的是有序数组中第一个>mid的元素的iterator
            for(auto &row:matrix)
                cnt+=upper_bound(row.begin(),row.end(),mid)-row.begin();
            // kth smallest element must be bigger than mid
            if(cnt<k)
                low=mid+1;
            else
                high=mid;
        }
        return low;
    }
};

update:
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int low=matrix[0][0],high=matrix.back().back();
        while(low<high){
            int mid=low+(high-low)/2;
            int cnt=0;
            // 逐行统计<=mid的元素个数累加起来 cnt既是所有<=mid的元素个数也说明了mid是第几小的数
            for(auto&row:matrix){
                cnt+=upper_bound(row.begin(),row.end(),mid)-row.begin();
                if(cnt>k)
                    break;
            }
            if(cnt<k)
                low=mid+1;
            else
                high=mid;
        }
        return low;
    }
};
