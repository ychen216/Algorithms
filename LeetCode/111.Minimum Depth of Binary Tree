111. Minimum Depth of Binary Tree

/*
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        if(root->left==NULL&&root->right==NULL)
            return 1;
        
        if(root->left&&root->right)
            return 1+min(minDepth(root->left),minDepth(root->right));
        if(root->left)
            return 1+minDepth(root->left);
        if(root->right)
            return 1+minDepth(root->right);
    }   
};

or 效率低一些

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        int left=minDepth(root->left);
        int right=minDepth(root->right);
        if(left==0||right==0)
            return left+right+1;//至多只有left,right中的一个生效
        return min(left,right)+1;
    }
};
