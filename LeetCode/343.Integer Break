343. Integer Break
/*
Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. 
Return the maximum product you can get.

For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).

Note: You may assume that n is not less than 2 and not larger than 58.
*/

Solution 1:
class Solution {
public:
    // dp[i]:i拆分成至少两个正数能获得的最大乘积
    // dp[1]=1
    // dp[i]=max(dp[i],x*y,dp[x]*dp[y],x*dp[y],y*dp[x]); 其中x+y=i
    // 分别表示拆解为2个数x,y x继续拆解 y继续拆解 组成的四种情况
    // 上式可以改写为 dp[i]=max(dp[i],max(x,dp[x])*max(y,dp[y]))
    int integerBreak(int n) {
        vector<int> dp(n+1,0);
        dp[0]=dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=1;j<=i/2;j++){
                dp[i]=max(dp[i],max(j,dp[j])*max(i-j,dp[i-j]));
            }
        }
        return dp[n];
    }
};

Solution 2: Math
class Solution {
public:
    //math http://www.cnblogs.com/zywscq/p/5415303.html
    int integerBreak(int n) {
        if(n==2)
            return 1;
        if(n==3)
            return 2;
        //2和3 3更靠近e
        int res=1;
        while(n>4){
            res*=3;
            n-=3;
        }
        res*=n;
        return res;
    }
};
