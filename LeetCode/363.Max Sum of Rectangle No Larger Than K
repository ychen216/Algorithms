363. Max Sum of Rectangle No Larger Than K

/*
Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.

Example:
Given matrix = [
  [1,  0, 1],
  [0, -2, 3]
]
k = 2
The answer is 2. Because the sum of rectangle [[0, 1], [-2, 3]] is 2 and 2 is the max number no larger than k (k = 2).

Note:
The rectangle inside the matrix must have an area > 0.
What if the number of rows is much larger than the number of columns?
*/

Solution 1:
class Solution {
public:
    //暴力枚举 利用数组sum[i][j]记录矩形(0, 0)到(i, j)的和 然后遍历这个矩形(右下角坐标是i,j)中所有的子矩形 计算其和跟K相比
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        if(matrix.empty()||matrix[0].empty())
            return 0;
        int row=matrix.size(),col=matrix[0].size();
        vector<vector<int>> sum(row,vector<int>(col,0));
        int res=INT_MIN;
        for(int r=0;r<row;r++){
            for(int c=0;c<col;c++){
                int t=matrix[r][c];
                if(r>0) t+=sum[r-1][c];
                if(c>0) t+=sum[r][c-1];
                if(r>0&&c>0) t-=sum[r-1][c-1];
                sum[r][c]=t;
                
                //枚举以(r,c)为右下角的矩形
                for(int i=0;i<=r;i++){
                    for(int j=0;j<=c;j++){
                        int area=sum[r][c];
                        if(i>0) area-=sum[i-1][c];
                        if(j>0) area-=sum[r][j-1];
                        if(i>0&&j>0) area+=sum[i-1][j-1];
                        if(area<=k) res=max(res,area);
                    }
                }
            }
        }
        return res;
    }
};

Solution 2:

class Solution {
public:
    /*
    参考http://blog.csdn.net/wdlsjdl2/article/details/51907396思想
    https://www.cnblogs.com/grandyang/p/5617660.html 解法二实现
    将二维求最大子矩阵转化为求一维最大连续子段和 
    */
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        if (matrix.empty()||matrix[0].empty()) return 0;
        int row = matrix.size(), col = matrix[0].size(), res = INT_MIN;
         //枚举最大子矩阵的列区间[l,r]
        for (int l = 0; l < col; ++l) {
            vector<int> sums(row, 0);//记录l~r列之间每一行的元素之和 这样就转化为求 row个元素的最大连续子段和
            for (int r = l; r < col; ++r) {
                for (int i = 0; i < row; ++i) {
                    sums[i] += matrix[i][r];
                }

                // Find the max subarray no more than K 
                set<int> accuSet;
                accuSet.insert(0);//curSum==k的情况
                int curSum = 0, curMax = INT_MIN;
                for (int sum : sums) {
                    curSum += sum;
                    set<int>::iterator it = accuSet.lower_bound(curSum - k);
                    if (it != accuSet.end()) curMax = max(curMax, curSum - *it);
                    accuSet.insert(curSum);
                }
                res = max(res, curMax);
            }
        }
        return res;
    }
};
