768. Max Chunks To Make Sorted II

/*
----------------------------------------------------------------------------------------------------------------------------
This question is the same as "Max Chunks to Make Sorted" except the integers of the given array are not necessarily distinct, 
the input array could be up to length 2000, and the elements could be up to 10**8.
------------------------------------------------------------------------------------------------------------------------------

Given an array arr of integers (not necessarily distinct), we split the array into some number of "chunks" (partitions),
and individually sort each chunk.  After concatenating them, the result equals the sorted array.
What is the most number of chunks we could have made?

Example 1:
Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.

Example 2:
Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].
However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.
Note:
  arr will have length in range [1, 2000].
  arr[i] will be an integer in range [0, 10**8].
*/

Solution:
class Solution {
public:
    /*
    一个数或者一个区间可以分割 必须是这个区间里的数都恰好处在排序后的他们应该在的区间
    那么如何判断一个区间里的数正好处在他们应该在的区间? 如果这个区间左边的数都小于或等于区间右边的数那么他们就处在可以正确的位置
    实现上可以使用两个数组记录i左边最大的元素 和i右边最小的元素
    */
    int maxChunksToSorted(vector<int>& arr) {
        int n=arr.size();
        if(n==1)
            return 1;
        vector<int> maxLeft(n,INT_MIN);
        vector<int> minRight(n,INT_MAX);
        maxLeft[0]=arr[0];
        for(int i=1;i<n;i++)
            maxLeft[i]=max(maxLeft[i-1],arr[i]);
        minRight[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--)
            minRight[i]=min(minRight[i+1],arr[i]);
        int res=0;
        for(int i=0;i<n-1;i++)
            if(maxLeft[i]<=minRight[i+1])//是否能在第i个元素后面切
                res++;
        return res+1;//最后一个元素的位置一定可以切
    }
};
