466. Count The Repetitions
/*
Define S = [s,n] as the string S which consists of n connected strings s. For example, ["abc", 3] ="abcabcabc".

On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc” can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.

You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where S1=[s1,n1] and S2=[s2,n2]. Find the maximum integer M such that [S2,M] can be obtained from S1.

Example:

Input:
s1="acb", n1=4
s2="ab", n2=2

Return:
2
*/

Solution 1:
class Solution {
    /*
    暴力法计算出 s1,n1包含k个s2 最后结果为k/n2
    */
    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
        char []s=s1.toCharArray();
        char []t=s2.toCharArray();
        int cnt1=0,cnt2=0,i=0,j=0;
        while(cnt1<n1){
            if(s[i]==t[j]){
                j++;
                if(j==t.length){
                    j=0;
                    cnt2++;
                }
            }
            i++;
            if(i==s.length){
                cnt1++;
                i=0;
            }
        }
        return cnt2/n2;
    }
}

update:解释 C++版本的会超时
class Solution {
public:
    /*
        定义S1=[s1,n1]代表S1由n1个s1拼接起来,e.g.s1="abc" n1=4 S1="abcabcabcabc"
        题目问：对S1=[s1,n1]最多可以构造出多少个S2=[s2,n2]
        构造的手段：可以从S1中删除一些字符
        那么这个问题可以转化为S1中包含多少个S2序列，可以构造出S1,S2寻找
        但是这里的S1,S2很特殊我们不需要构造出来 可以节省空间
        我们可以check在n1个s1中有多少个s2序列 假设有k个,那么S1最多可以构造出k/n2个S2
    */
    int getMaxRepetitions(string s1, int n1, string s2, int n2) {
        int len1=s1.length(),len2=s2.length();
        int cnt1=0,cnt2=0,p1=0,p2=0;//cnt1已经使用的s1数量,cnt2已经构造的s2个数,p1,p2分别是s1,s2的指针
        while(cnt1<n1){
            if(s1[p1]==s2[p2]){
                p2++;
                if(p2==len2){
                    p2=0;
                    cnt2++;
                }
            }
            p1++;
            if(p1==len1){
                p1=0;
                cnt1++;
            }
        }
        return cnt2/n2;
    }
};
