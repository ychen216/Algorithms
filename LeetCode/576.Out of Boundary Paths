576. Out of Boundary Paths
/*
There is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.

Example 1:
Input:m = 2, n = 2, N = 2, i = 0, j = 0
Output: 6
Explanation:

Example 2:
Input:m = 1, n = 3, N = 3, i = 0, j = 1
Output: 12
Explanation:

Note:
Once you move the ball out of boundary, you cannot move it back.
The length and height of the grid is in range [1,50].
N is in range [0,50].
*/

Solution:
class Solution {
public:
    //DP dp[step][i][j] 从i,j走step步到出边界的路径数 注意要用long 或者unsigned
    int findPaths(int m, int n, int N, int i, int j) {
        unsigned int dp[N + 1][m][n] = {};
        for(int step = 1; step <= N; step++){
            for(int row = 0; row < m; row++){
                for(int col = 0; col < n; col++){
                    // the value come from four directoion
                    // if one value comes from boundary: 1
                    //      dp[step - 1][row - 1][col] 
                    //      + dp[step - 1][row + 1][col] 
                    //      + dp[step - 1][row][col - 1] 
                    //      + dp[step - 1][row][col + 1]
                    dp[step][row][col] =  ((row == 0?       1 : dp[step - 1][row - 1][col]) 
                                        + (row == m - 1?    1 : dp[step - 1][row + 1][col])
                                        + (col == 0?        1 : dp[step - 1][row][col - 1])
                                        + (col == n - 1?    1 : dp[step - 1][row][col + 1])) % 1000000007;
                }
            }
        }
        return dp[N][i][j];
    }
};

update:
class Solution {
public:
    /*
         DP 
         dp[step][i][j]表示从i,j至多走step步到出边界的路径数 注意要用long 或者unsigned
         如果(i,j)是四个方向的边界之一 那么path就+1, 否则dp[step][i][j]由上下左右各走一步dp[step-1][i+dx][j+dy]能得到的路径总和:
         dp[step][i][j]=((row == 0? 1 : dp[step - 1][row - 1][col]) 
                        + (row == m - 1? 1 : dp[step - 1][row + 1][col])
                        + (col == 0? 1 : dp[step - 1][row][col - 1])
                        + (col == n - 1? 1 : dp[step - 1][row][col + 1])) % 1000000007;
        同时每一次状态更新只涉及到step-1 可以将空间降到O(n*m)
    */
    int findPaths(int m, int n, int N, int sx, int sy) {
        long MOD=1e9+7;
        vector<vector<vector<long>>> dp(2,vector<vector<long>>(m,vector<long>(n,0)));
        int preIndex=0; // 指明上一个状态step-1在dp的哪一个维度
        for(int k=1;k<=N;k++){
            int curIndex=1-preIndex;
            for(int i=0;i<m;i++){
                for(int j=0;j<n;j++){
                    dp[curIndex][i][j]=0;
                    // 上走一步
                    if(i==0)
                        dp[curIndex][i][j]++;
                    else
                        dp[curIndex][i][j]+=dp[preIndex][i-1][j];
                    // 下走一步
                    if(i==m-1)
                        dp[curIndex][i][j]++;
                    else
                        dp[curIndex][i][j]+=dp[preIndex][i+1][j];
                    // 左
                    if(j==0)
                        dp[curIndex][i][j]++;
                    else
                        dp[curIndex][i][j]+=dp[preIndex][i][j-1];
                    // 右
                    if(j==n-1)
                        dp[curIndex][i][j]++;
                    else
                        dp[curIndex][i][j]+=dp[preIndex][i][j+1];
                    dp[curIndex][i][j]%=MOD;
                }
            }
            preIndex=curIndex;
        }
        return dp[preIndex][sx][sy];
    }
};
