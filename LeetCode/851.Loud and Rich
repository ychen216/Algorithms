851. Loud and Rich

/*
In a group of N people (labelled 0, 1, 2, ..., N-1), each person has different amounts of money, and different levels of quietness.

For convenience, we'll call the person with label x, simply "person x".

We'll say that richer[i] = [x, y] if person x definitely has more money than person y.  Note that richer may only be a subset of valid observations.

Also, we'll say quiet[x] = q if person x has quietness q.

Now, return answer, where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]), among all people who definitely have equal to or more money than person x.

 
Example 1:
Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
Explanation: 

answer[0] = 5.
Person 5 has more money than 3, which has more money than 1, which has more money than 0.
The only person who is quieter (has lower quiet[x]) is person 7, but
it isn't clear if they have more money than person 0.

answer[7] = 7.
Among all people that definitely have equal to or more money than person 7
(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])
is person 7.
The other answers can be filled out with similar reasoning.

Note:
  1 <= quiet.length = N <= 500
  0 <= quiet[i] < N, all quiet[i] are different.
  0 <= richer.length <= N * (N-1) / 2
  0 <= richer[i][j] < N
  richer[i][0] != richer[i][1]
  richer[i]'s are all different.
  The observations in richer are all logically consistent.
*/

Solution 1:
class Solution {
public:
    /*  
        题目的要求是 对于每一个person_i 输出所有equal or richer than i 的人中最安静的人的id
        构造一个有向图 然后dfs
    */
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int n=quiet.size();
        vector<vector<int>> graph(n,vector<int>(n,0));
        // 构造图 穷的->富的
        for(auto &v: richer){
            graph[v[1]][v[0]]=1;
        }
        // 初始化结果
        vector<int> res;
        for(int i=0;i<n;i++)
            res.push_back(i);
        
        // dfs
        for(int i=0;i<n;i++){
            dfs(i,graph,quiet,res);
        }
        return res;
    }
private:
    // 找到equal or richer than id 的人中最安静的人的id
    int dfs(int id,vector<vector<int>> &graph,vector<int>&quiet,vector<int>&res){
        for(int i=0;i<quiet.size();i++){
            if(graph[id][i]==1){
                int quietId=dfs(i,graph,quiet,res);
                if(quiet[res[id]]>quiet[quietId])
                    res[id]=quietId;
                graph[id][i]=-1;// 避免重复回溯
            }
        }
        return res[id];
    }
};

Solution 2:
class Solution {
public:
    /*  
        题目的要求是 对于每一个person_i 输出所有equal or richer than i 的人中最安静的人的id
        构造一个有向图 然后dfs
        改进:利用map存储有向图 而不是邻接矩阵,同时改进初始化结果的操作使其可以利用memorized dfs
    */
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int n=quiet.size();
        unordered_map<int,vector<int>> graph;
        // 构造图 穷的->富的
        for(auto &v: richer){
            graph[v[1]].push_back(v[0]);
        }
        vector<int> res(n,-1);
        // dfs
        for(int i=0;i<n;i++){
            dfs(i,graph,quiet,res);
        }
        return res;
    }
private:
    // 返回equal or richer than id 的人中最安静的人的id
    int dfs(int id,unordered_map<int,vector<int>> &graph,vector<int>&quiet,vector<int>&res){
        if(res[id]>=0)
            return res[id];
        // 初始化
        res[id]=id;
        for(auto &i:graph[id]){
            int quietId=dfs(i,graph,quiet,res);
            if(quiet[res[id]]>quiet[quietId])
                res[id]=quietId;
        }
        return res[id];
    }
};
