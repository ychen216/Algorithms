62. Unique Paths

/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid 
(marked 'Finish' in the diagram below).

How many possible unique paths are there?
Note: m and n will be at most 100.
*/

solution:DP
class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m==1||n==1)
            return 1;
        int dp[m][n]={0};
        for(int i=0;i<m;i++)
            dp[i][0]=1;
        for(int j=0;j<n;j++)
            dp[0][j]=1;
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};

Solution 2:
class Solution {
public:
    // update 观察到每一次更新都只涉及到上一行和改行 可以将空间减少到O(n)
    // dp[i][j]=dp[i-1][j]+dp[i][j-1] ==> dp[j]=dp[j]+dp[j-1];
    int uniquePaths(int m, int n) {
        if(m==1||n==1)
            return 1;
        vector<int> dp(n,0);
        // init第一行只有一种到达方式
        for(int j=0;j<n;j++)
            dp[j]=1;
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                dp[j]=dp[j]+dp[j-1];
            }
        }
        return dp[n-1];
    }
};
