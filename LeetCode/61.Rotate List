61. Rotate List
/*
Given a list, rotate the list to the right by k places, where k is non-negative.

Example:
  Given 1->2->3->4->5->NULL and k = 2,
  return 4->5->1->2->3->NULL.
*/

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL)
            return NULL;
        //计算链表长度
        int len=1;
        ListNode *tail=head,*newHead=head;
        while(tail->next){
            tail=tail->next;
            len++;
        }
        //连成一个环
        tail->next=head;
        if(k%=len){
            
            for(int i=0;i<len-k;i++)
                tail=tail->next;
        }
        newHead=tail->next;
        tail->next=NULL;
        return newHead;
    }
};

Solution 2:跟上一个一样的思路
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head||!head->next||k==0) // 空节点或一个节点 那么怎么选择都是自己
            return head;
        int len=0;
        ListNode *cur=head;
        ListNode *last=NULL; //记录最后一个节点
        while(cur){
            len++;
            last=cur;
            cur=cur->next;
        }
        k=k%len;
        if(k==0) // k是len的整数倍相当于不旋转
            return head;
        int needGo=len-k;
        ListNode *feakNode=new ListNode(0);
        feakNode->next=head;
        cur=feakNode;
        // cur找到新的头结点的前一个节点
        for(int i=0;i<needGo;i++){
            cur=cur->next;
        }
        // 拼接
        ListNode *newHead=cur->next;
        cur->next=NULL;
        last->next=feakNode->next;
        return newHead;
    }
};

update:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head)
            return head;
        int len=0;
        ListNode *cur=head;
        while(cur){
            len++;
            cur=cur->next;
        }
        k=k%len;
        if(k==0)
            return head;
        ListNode *feakHead=new ListNode(0);
        feakHead->next=head;
        ListNode *fast=feakHead,*slow=feakHead;
        for(int i=0;i<k;i++){
            fast=fast->next;
        }
        while(fast->next){
            slow=slow->next;
            fast=fast->next;
        }
        //slow->next是截断的后半部分链表的表头 fast是后半部分最后一个节点
        ListNode *head2=slow->next;
        slow->next=NULL;
        fast->next=feakHead->next;
        feakHead->next=head2;
        return feakHead->next;
    }
};
