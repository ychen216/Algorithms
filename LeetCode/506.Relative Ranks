506. Relative Ranks

/*
Given scores of N athletes, find their relative ranks and the people with the top three highest scores, 
who will be awarded medals: "Gold Medal", "Silver Medal" and "Bronze Medal".

Example 1:
Input: [5, 4, 3, 2, 1]
Output: ["Gold Medal", "Silver Medal", "Bronze Medal", "4", "5"]
Explanation: The first three athletes got the top three highest scores, so they got "Gold Medal", "Silver Medal" and "Bronze Medal". 
For the left two athletes, you just need to output their relative ranks according to their scores.
Note:
  N is a positive integer and won't exceed 10,000.
  All the scores of athletes are guaranteed to be unique.
*/

Solution: Compile Error
int copy[10001];
int indexx[10001];
bool cmp(int& i, int& j){
    return copy[i-1]>=copy[j-1];
}
class Solution {
public:
    
    vector<string> findRelativeRanks(vector<int>& nums) {
        int size=nums.size();
        for(int i=0;i<size;i++){
            indexx[i]=i+1;
            copy[i]=nums[i];
        }
        sort(indexx,indexx+size,cmp);
        vector<string> vec;
        for(int i=0;i<size;i++)
            if(indexx[i]==1)
                vec.push_back("Gold Medal");
            else if(indexx[i]==2)
                vec.push_back("Silver Medal");
            else if(indexx[i]==3)
                vec.push_back("Bronze Medal");
            else
                vec.push_back(""+indexx[i]);
        return vec;
    }
};

Solution2:
class Solution {
public:
    
    vector<string> findRelativeRanks(vector<int>& nums) {
        int size=nums.size();
        map<int,int> m;
        for(int i=0;i<size;i++){
            m[nums[i]]=i;
        }
        vector<string> vec(m.size(),"");
        int index=1;
        for(map<int,int>::reverse_iterator it=m.rbegin();it!=m.rend();it++){
            if(index==1)
                vec[it->second]="Gold Medal";
            else if(index==2)
                vec[it->second]="Silver Medal";
            else if(index==3)
                vec[it->second]="Bronze Medal";
            else
                vec[it->second]=to_string(index);
            index++;
        }
        return vec;
    }
};


Solution 3:
class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& nums) {
        int n=nums.size();
        vector<pair<int,int>> mmp;//分数和下标的映射
        for(int i=0;i<n;i++)
            mmp.push_back({nums[i],i});
        // 按照分数从大到小排序
        sort(mmp.begin(),mmp.end(),[&](auto &p1,auto &p2){return p1.first>=p2.first;});
        vector<string> res(n,"");
        for(int i=0;i<n;i++){
            if(i==0)
                res[mmp[i].second]="Gold Medal";
            else if(i==1)
                res[mmp[i].second]="Silver Medal";
            else if(i==2)
                res[mmp[i].second]="Bronze Medal";
            else
                res[mmp[i].second]=to_string(i+1);
        }
        return res;
    }
};

Solution 4:
class Solution {
public:
    // 利用分数对排名间接排序
    vector<string> findRelativeRanks(vector<int>& nums) {
        int n=nums.size();
        vector<int> pos(n);
        //记录每一个分数原来的index 然后利用分数对该index排序 
        //eg. score: 3 1 2 origin pos: 0 1 2
        //排序后 pos: 0 2 1
        for(int i=0;i<n;i++)
            pos[i]=i;
        sort(pos.begin(),pos.end(),[&](int i,int j){return nums[i]>=nums[j];});
        vector<string> res(n);
        string rank;
        for(int i=0;i<n;i++){
            if(i==0){
               rank="Gold Medal";
            }
            else if(i==1){
                rank="Silver Medal";
            }
            else if(i==2){
                rank="Bronze Medal";
            }
            else{
                rank=to_string(i+1);
            }
            res[pos[i]]=rank;
        }
        return res;
    }
};
