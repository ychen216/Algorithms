749. Contain Virus
/*
A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as a 2-D array of cells, where 0 represents uninfected cells, and 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.

Can you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.

Example 1:
Input: grid = 
[[0,1,0,0,0,0,0,1],
 [0,1,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,0]]
Output: 10
Explanation:
There are 2 contaminated regions.
On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:

[[0,1,0,0,0,0,1,1],
 [0,1,0,0,0,0,1,1],
 [0,0,0,0,0,0,1,1],
 [0,0,0,0,0,0,0,1]]

On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.
Example 2:
Input: grid = 
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.
Example 3:
Input: grid = 
[[1,1,1,0,0,0,0,0,0],
 [1,0,1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.
Note:
The number of rows and columns of grid will each be in the range [1, 50].
Each grid[i][j] will be either 0 or 1.
Throughout the described process, there is always a contiguous viral region that will infect strictly more uncontaminated squares in the next round.
*/

Solution:
class Solution {
public:
    /*
        模拟+贪心
        1）遍历各个细菌群，找出下一步受感染最多的一个细菌群
        2）将这个群里的细菌用墙隔离起来（实现中就是将cells的值置为-1,设为不活动细胞）
        3）模拟其余细菌群的扩展过程，修改cells的值
        重复上面3个步骤，直到找不出需要进一步隔离的细菌群即可
    */
    
    int containVirus(vector<vector<int>>& grid) {
        int ans = 0;
        //模拟传播过程 知道没有能继续传播的病毒
        while (true) {
            int walls = model(grid);
            if (walls == 0) break;
            ans += walls;
        }
        return ans;
    }
private:
    int model(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), N = 100;
        vector<unordered_set<int>> virus, toInfect;//接下来要感染的区域,当前已经感染的连通区域
        vector<vector<int>> visited(m, vector<int>(n, 0));
        vector<int> walls;//不同连通区域需要建立的墙
        //遍历不同连通病毒区域
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && visited[i][j] == 0) {
                    virus.push_back(unordered_set<int>());
                    toInfect.push_back(unordered_set<int>());
                    walls.push_back(0);
                    dfs(grid, visited, virus.back(), toInfect.back(), walls.back(), i, j);
                }
            }
        }
        //找到现有活动的病毒下一轮传播过程中 受感染面积最大的部分
        int maxArea = 0, idx = -1;
        for (int i = 0; i < toInfect.size(); i++) {
            if (toInfect[i].size() > maxArea) {
                maxArea = toInfect[i].size();
                idx = i;
            }
        }
        //没有可以继续感染的地方
        if (idx == -1) return 0;
        //下一轮感染面积最大的区域建立墙 并将墙中的病毒设为不活动 并模拟其他未建墙的部分病毒进一步传播
        for (int i = 0; i < toInfect.size(); i++) {
            if (i != idx) {
                //下一步传播
                for (int key : toInfect[i]) 
                    grid[key/N][key%N] = 1;
            }
            else {
                //设置为不活动
                for (int key: virus[i]) 
                    grid[key/N][key%N] = -1;
            }
        }
        return walls[idx];
    }
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& visited, unordered_set<int>& virus, unordered_set<int>& toInfect, int& wall, int row, int col) {
        int m = grid.size(), n = grid[0].size(), N = 100;
        if (row < 0 || row >= m || col < 0 || col >= n || visited[row][col] == 1) return;
        if (grid[row][col] == 1) {
            //原感染区域
            visited[row][col] = 1;
            virus.insert(row*N + col);
            vector<int> dir = {0, -1, 0, 1, 0};
            for (int i = 0; i < 4; i++)
                dfs(grid, visited, virus, toInfect, wall, row+dir[i], col+dir[i+1]);
        }
        else if (grid[row][col] == 0) {
            //下一步要感染  这一步不能设为visit 其他病毒区域可能也会感染到该位置
            wall++;
            toInfect.insert(row*N + col);
        }
    }
    
};
