518. Coin Change 2

/*
You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

Note: You can assume that
  0 <= amount <= 5000
  1 <= coin <= 5000
  the number of coins is less than 500
  the answer is guaranteed to fit into signed 32-bit integer
 
Example 1:
Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
 
Example 2:
Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
 
Example 3:
Input: amount = 10, coins = [10] 
Output: 1

*/

Solution:
class Solution {
public:
    // 完全背包问题
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount+1,0);
        dp[0]=1;
        for(auto coin:coins){
            for(int i=coin;i<=amount;i++)
                dp[i]+=dp[i-coin];
        }
        return dp[amount];
    }
};

update:一种错误想法的解释
class Solution {
public:
    /*  
        首先要认清题目是要求组合数而不是排列数
        以下是一种错误的方法：
        dp[i]为积攒到i coin的方案数
        dp[i]=sum(dp[i-coin[j]]) for all j
        for i=1 to amount
            for coin in coins:
                dp[i]+=dp[i-coin]
        这种方法是不行的 因为这是计算排列的方法认为1 3和3 1是不同的，而这一题要计算的是组合数
        比如在计算dp[4]时(1,3)会计算两次dp[4]=dp[4-1=3]+dp[4-3=1]而实际他们只应该被计算一次
        这时候要用无限背包的思想计算
        for coin in coins
            for i=coin to amount:
                dp[i]+=dp[i-coin]    
    */
    int change(int amount, vector<int>& coins) {
        if(amount<0){
            return 0;
        }
        vector<int> dp(amount+1,0);
        dp[0]=1;
        for(auto &coin:coins){
            for(int i=coin;i<=amount;i++){
                dp[i]+=dp[i-coin];
            }
        }
        return dp[amount];
    }
};

update:无穷背包问题二维状态和归约为一维状态的解释

This is a classic knapsack problem. Honestly, I'm not good at knapsack problem, it's really tough for me.

dp[i][j] : the number of combinations to make up amount j by using the first i types of coins
State transition:
  1.not using the ith coin, only using the first i-1 coins to make up amount j, then we have dp[i-1][j] ways.
  2.using the ith coin, since we can use unlimited same coin, we need to know how many ways to make up amount j - coins[i-1] by using first i coins(including ith), which is dp[i][j-coins[i-1]]
Initialization: dp[i][0] = 1

Once you figure out all these, it's easy to write out the code:

public int change(int amount, int[] coins) {
    int[][] dp = new int[coins.length+1][amount+1];
    dp[0][0] = 1;

    for (int i = 1; i <= coins.length; i++) {
        dp[i][0] = 1;
        for (int j = 1; j <= amount; j++) {
            dp[i][j] = dp[i-1][j] + (j >= coins[i-1] ? dp[i][j-coins[i-1]] : 0);
        }
    }
    return dp[coins.length][amount];
}

Now we can see that dp[i][j] only rely on dp[i-1][j] and dp[i][j-coins[i]], then we can optimize the space by only using one-dimension array.

public int change(int amount, int[] coins) {
    int[] dp = new int[amount + 1];
    dp[0] = 1;
    for (int coin : coins) {
        for (int i = coin; i <= amount; i++) {
            dp[i] += dp[i-coin];
        }
    }
    return dp[amount];
}
