52. N-Queens II
/*
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.
*/
Solution:
class Solution {
public:
    int cnt;
    void travel(vector<int>&C,int row){
        if(row==C.size()){
            cnt++;
            return;
        }
        //找一个合适的列
        for(int i=0;i<C.size();i++){
            C[row]=i;
            //加入row行元素后 检查是否合法
            bool ok=true;
            for(int j=0;j<row;j++){
                if(C[j]==C[row]||abs(j-row)==abs(C[j]-C[row])){
                    ok=false;
                    break;
                }
            }
            if(ok)
                travel(C,row+1);
        }
    }
    int totalNQueens(int n) {
        if(n<=1)
            return n;
        vector<int> C(n,0);
        cnt=0;
        travel(C,0);
        return cnt;
    }
};
