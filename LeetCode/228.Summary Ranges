228. Summary Ranges
/*
Given a sorted integer array without duplicates, return the summary of its ranges.

Example 1:
Input: [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Example 2:
Input: [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
*/

Solution:
class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        int len=nums.size();
        if(len==0)
            return {};
        vector<string> res;
        int start=0,end=0;
        for(int i=1;i<len;i++){
            if(nums[i]==nums[i-1]+1)
                end=i;
            else{
                if(start==end)
                    res.push_back(to_string(nums[start]));
                else
                    res.push_back(to_string(nums[start])+"->"+to_string(nums[end]));
                start=end=i;
            }
        }
        //加入最后一个
        if(start==end)
            res.push_back(to_string(nums[start]));
        else
            res.push_back(to_string(nums[start])+"->"+to_string(nums[end]));
        
        return res;
    }
};

update:
class Solution {
public:
    // 双指针
    vector<string> summaryRanges(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return {};
        vector<pair<int,int>> index; // 一个区间的左右边界
        int left,right;
        for(left=0,right=0;right<n;right++){
            if(left<right&&nums[right]!=nums[right-1]+1){
                index.push_back({left,right-1});
                left=right;
            }
        }
        // 不要漏了最后一个
        index.push_back({left,right-1});
        vector<string> res;
        for(auto &p:index){
            if(p.first==p.second)
                res.push_back(to_string(nums[p.first]));
            else
                res.push_back(to_string(nums[p.first])+"->"+to_string(nums[p.second]));
        }
        return res;
    }
};

update: 节省空间 将结果in-place生成 不再存储下来
class Solution {
public:
    // 双指针
    vector<string> summaryRanges(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return {};
        vector<string> res;
        int left,right; // 一个区间的左右边界
        for(left=0,right=0;right<n;right++){
            if(left<right&&nums[right]!=nums[right-1]+1){
                if(left==right-1)
                    res.push_back(to_string(nums[left]));
                else
                    res.push_back(to_string(nums[left])+"->"+to_string(nums[right-1]));           left=right;
            }
        }
        // 不要漏了最后一个
        if(left==right-1)
            res.push_back(to_string(nums[left]));
        else
            res.push_back(to_string(nums[left])+"->"+to_string(nums[right-1]));
        return res;
    }
};
