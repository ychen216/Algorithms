402. Remove K Digits
/*
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
*/
Solution:
class Solution {
public:
    /*
    首先这是一个贪心问题，即我们可以将问题转化为，一个长度为N的数字里面，删除哪个数可以使得数变得最小： 
    如何删除: 
    1、因为数字开头不允许是0，当第二位是0的情况下下，这时候我们删除了第一位数，那么至少可以使数字小两个量级，而其他位置最多也就是小一个数量级，所以这种情况毫无疑问删除第一个，后面打头的0也自动消解 
    2、否则，我们从头开始找，找到第一个下降的数，如 1234553，那么最后一个3前面的5就是，删除它得到的数字是最小的。
    如果在递增序列里删除字符，删除后，后续字符代替被删除字符会使得在缩小一位的条件下更大
    */
    string removeKdigits(string num, int k) {
        int len=num.size();
        int newLen=len-k;
        char st[len];
        int stLen=0;
        for(int i=0;i<len;i++){
            //递减情况的前一个数 从栈中移除
            while(stLen>0&&st[stLen-1]>num[i]&&k>0){
                stLen--;
                k--;
            }
            st[stLen++]=num[i];
        }
        //删除前导0
        int p=0;
        while(p<newLen&&st[p]=='0')p++;
        if(p==newLen)
            return "0";
        return string(st+p,st+newLen);
    }
};

update:
class Solution {
public:
    /* 
        可以认为是长度为n的字符串 每次删除一个字符 获得最小的数字 删除k次
        每次删除第一个下降(最后一个上升)的数字(第一个是因为我们希望数字的高位尽可能小) 如果是递增序列 那么就从后向前删除
        eg. 12346578 k=3 第一次删除6 下降序列65 这个8位数删除一个数字后得到7位数 
        1234不管删除哪一个数字都会使得后面更大的数字23456替换当前位置 得到该位更大的结果
        删除57也是一样的道理 
        有两个第一个下降(最后一个上升)的数字6,8 我们删除第一个也就是6 这样高位会尽量小
        删除6或8得到的结果分别是 1234578 < 12346578
        可以利用栈来保存一个递增序列
    */
    string removeKdigits(string num, int k) {
        int len = num.length();
        //corner case
        if(k==len)        
            return "0";
            
        stack<char> st;
        int i =0;
        while(i<len){
            //whenever meet a digit which is less than the previous digit, discard the previous one
            while(k>0 && !st.empty() && st.top()>num[i]){
                st.pop();
                k--;
            }
            st.push(num[i]);
            i++;
        }
        
        // corner case like "1111" "12345"
        while(k>0){
            st.pop();
            k--;            
        }
        
        //construct the number from the stack
        int resLen=st.size();
        string res(resLen,'0');
        i=0;
        while(!st.empty()){
            res[resLen-i-1]=st.top();
            st.pop();
            i++;
        }
        
        //remove all the 0 at the head
        i=0;
        while(resLen>1&&res[i]=='0')i++;
        // corner case like "100" k=1 return "0"
        if(i==resLen)
            return "0";
        return res.substr(i);
    }
};

update:
class Solution {
public:
    /*
        可以认为是长度为n的字符串,每次删除一个字符来获得最小的数字 删除k次
        每次删除第一个下降(最后一个上升)的数字(第一个是因为我们希望数字的高位尽可能小) 
        如果是递增序列 eg.12345 那么就从末位向前删除 否则删除前面的任何一位比如3那么后一位替补上来的4>3这样得到的数在该位就不是最小的 1245>1234 第三位最小的情况是3
        eg. 12346578 k=3  第一个下降序列65 删除6得到1234578 
        1234不管删除哪一个数字都会使得后面更大的数字23456替换当前位置 得到该位更大的结果
        删除57也是一样的道理 
        有两个第一个下降(最后一个上升)的数字6,8 我们删除第一个也就是6 这样高位会尽量小
        删除6或8得到的结果分别是 1234578 < 12346578
        可以利用栈来保存一个递增序列
        同时要考虑到如果在删完k个字符之前就已经构成递增序列了 我们需要继续从递增序列的末尾逐渐删除剩下的k个元素
        还要考虑到前导0的情况
    */
    string removeKdigits(string num, int k) {
        int n=num.size();
        stack<char> st;
        st.push('0');//哨兵 避免处理空栈的情况(包括第一个元素入栈以及k==n会将所有元素删除形成空栈的情况)
        int i=0;
        //删除下降的数字
        while(i<n){
            while(k>0&&st.top()>num[i]){
                st.pop();
                k--;
            }
            st.push(num[i++]);
        }
        
        //已经不存在下降pair 从尾部删除元素 eg 12345 1111
        while(k>0){
            st.pop();
            k--;
        }
        string res;
        while(!st.empty()){
            res=st.top()+res;
            st.pop();
        }
        int p=res.find_first_not_of('0');
        if(p==string::npos){
            return "0";
        }
        return res.substr(p); 
        
    }
};
