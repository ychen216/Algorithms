373. Find K Pairs with Smallest Sums

/*
You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:
Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3
Return: [1,2],[1,4],[1,6]
The first 3 pairs are returned from the sequence:
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:
Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2
Return: [1,1],[1,1]
The first 2 pairs are returned from the sequence:
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

Example 3:
Given nums1 = [1,2], nums2 = [3],  k = 3 
Return: [1,3],[2,3]
All possible pairs are returned from the sequence:
[1,3],[2,3]
*/

Solution 1:
class Solution {
public:
    /*
        暴力解 找出所有的对 排序后删除多余的部分
        因为nums1,nums2是有序的 所以k个pair必然由nums1的前min(k,#nums1)和nums2的前min(k,#nums2)元素组合而成
        所以可以直接对这些元素两两组合 排序后得到前k个
    */
    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<pair<int, int>> res;
        for (int i = 0; i < min((int)nums1.size(), k); ++i) {
            for (int j = 0; j < min((int)nums2.size(), k); ++j) {
                res.push_back({nums1[i], nums2[j]});
            }
        }
        sort(res.begin(), res.end(), [](pair<int, int> &a, pair<int, int> &b){return a.first + a.second < b.first + b.second;});
        if (res.size() > k) res.erase(res.begin() + k, res.end());
        return res;
    }
};


Solution 2:
class Solution {
public:
    //类似丑数 记录nums1[i]下一次要和nums2中下标为index[i]的数配对
    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<pair<int, int>> res;
        int size = min(k, int(nums1.size() * nums2.size()));
        vector<int> idx(nums1.size(), 0);
        for (int i = 0; i < size; ++i) {
            int t = 0, sum = INT_MAX;
            for (int j = 0; j < nums1.size(); ++j) {
                if (idx[j] < nums2.size() && sum >= nums1[j] + nums2[idx[j]]) {
                    t = j;
                    sum = nums1[j] + nums2[idx[j]];
                }
            }
            res.push_back({nums1[t], nums2[idx[t]]});
            ++idx[t];
        }
        return res;
    }
};


Solution 3:
class Solution {
public:
    /*
        参考 https://leetcode.com/problems/find-k-pairs-with-smallest-sums/discuss/84551/simple-Java-O(KlogK)-solution-with-explanation
       Basic Idea: Use min_heap to keep track on next minimum pair sum, and we only need to maintain K possible candidates in the data structure.
       因为nums1,nums2是有序的 所以k个pair必然由nums1的前min(k,#nums1)和nums2的前min(k,#nums2)元素组合而成
       好好思考 想象一下过程
    */
    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        if(k==0||nums1.size()==0||nums2.size()==0) // 任何一个数组都不能为空
            return {};
        priority_queue<vector<int>,vector<vector<int>>,cmp> pq; //min_heap
        // 初始化 将nums1的元素和nums2[0]的组合放入队列中成为候选的min(k,nums1.size())个pair 最小的组合{nums1[0],nums2[0]}必然包含在里面
        for(int i=0;i< min(k, (int)nums1.size());i++){
            vector<int> v(3);
            v[0]=nums1[i];v[1]=nums2[0];v[2]=0; // {nums1[i],nums2[0],0}三元组 第三个元素指明和哪一个nums2元素匹配了
            pq.push(v);
        }
        vector<pair<int,int>> res;
        while(k-->0&&!pq.empty()){
            // pq每次出队的都是和最小的pair
            vector<int> cur=pq.top();
            pq.pop();
            res.push_back({cur[0],cur[1]});
            // nums1的元素继续和nums2的元素拓展组成较大的pair
            if(cur[2]==nums2.size()-1) continue; //nums1[i]在nums2中没有可以继续扩展的元素了
            //vector<int> next(3);
            //next[0]=cur[0],next[1]=nums2[cur[2]+1],next[2]=cur[2]+1;
            //可以不用再生成一次 直接在原来的数组上改
            cur[2]++;
            cur[1]=nums2[cur[2]];
            pq.push(cur);
        }
        return res;
    }
private:
    struct cmp{
        // 定义优先级小 最小堆 大的元素优先级小
        bool operator()(const vector<int>&v1,const vector<int> &v2){
            return v1[0]+v1[1] > v2[0]+v2[1];
        }  
    };
};

update:
class Solution {
public:
    struct Node{
        int a,b,id;//a:num1,b:num2,id:b在num2中的下标
        Node(int aa,int bb,int ii):a(aa),b(bb),id(ii){}
        //最小堆 大的优先级小
        bool operator < (const Node &n)const{
            return a+b > n.a+n.b;
        }
    };
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        if(nums1.empty()||nums2.empty()){
            return {};
        }
        vector<vector<int>> res;
        int n1=nums1.size();
        int n2=nums2.size();
        int n=min(n1*n2,k);
        priority_queue<Node> pq;
        for(int i=0;i<n1;i++){
            pq.push(Node(nums1[i],nums2[0],0));
        }
        while(k-->0 && !pq.empty()){
            auto node=pq.top();
            pq.pop();
            res.push_back({node.a,node.b});
            if(node.id==n2-1) continue;
            node.id++;
            pq.push(Node(node.a,nums2[node.id],node.id));
        }
        return res;
    }
};
