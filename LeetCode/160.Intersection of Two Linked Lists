160. Intersection of Two Linked Lists

/*
Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:
  If the two linked lists have no intersection at all, return null.
  The linked lists must retain their original structure after the function returns.
  You may assume there are no cycles anywhere in the entire linked structure.
  Your code should preferably run in O(n) time and use only O(1) memory.
*/

Solution 1:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    // 有交集的两个链 必然从交点到链尾都是共享的 
    // 得到两个链的长度差k 长的链表向前移动k步使其尾部对齐
    // 然后同步向后走 若节点相同则为交点
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA||!headB)
            return NULL;
        ListNode *pa=headA,*pb=headB;
        int lena=0,lenb=0;
        while(pa){
            lena++;
            pa=pa->next;
        }
        while(pb){
            lenb++;
            pb=pb->next;
        }
        int k=abs(lena-lenb);
        // 令pa指向长的链表
        if(lena<lenb){
            pa=headB;
            pb=headA;
        }
        else{
            pa=headA;
            pb=headB;
        }
        while(k){
            pa=pa->next;
            k--;
        }
        while(pa){
            if(pa==pb)
                return pa;
            pa=pa->next;
            pb=pb->next;
        }
        return NULL;
    }
};

相同思路但是更巧妙
class Solution {
public:
    //考虑A和B一样长 那么只要一步一步比较两个链的每一个节点 看是否存在交集即可
    //AB长度不一样的情况，假设B.len-A.len=2 那么A先走到链尾 这时使A的指针指向B的头指针
    //那么B走到链尾时 A指向B的第二个节点，B指向A的头指针 此时AB所指向的链长度相等 按照一步一步比较即可
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA&&headB){
            ListNode *p=headA;
            ListNode *q=headB;
            while(p&&q&&p!=q){
                p=p->next;
                q=q->next;
                if(p==q)
                    return p;
                if(p==NULL)p=headB;
                if(q==NULL)q=headA;
            }
            return p;
        }
        return NULL;
    }
};


Solution 2：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    // 有交集的两个链 必然从交点到链尾都是共享的 
    // 可以利用栈结构得到最后一个相同的节点即为交点 时间O(n) 空间O(n)
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA||!headB)
            return NULL;
        stack<ListNode *>stA,stB;
        ListNode *pa=headA,*pb=headB;
        // 链表分别入栈 尾部对齐
        while(pa){
            stA.push(pa);
            pa=pa->next;
        }
        while(pb){
            stB.push(pb);
            pb=pb->next;
        }
        // 找到相交的第一个节点
        ListNode *intersection=NULL;
        while(!stA.empty()&&!stB.empty()){
            if(stA.top()!=stB.top())
                break;
            intersection=stA.top();
            stA.pop();stB.pop();
        }
        return intersection;
    }
};
