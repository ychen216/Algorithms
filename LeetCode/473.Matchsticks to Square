473. Matchsticks to Square
/*
Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.

Example 1:
Input: [1,1,2,2,2]
Output: true

Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.
Example 2:
Input: [3,3,3,3,4]
Output: false

Explanation: You cannot find a way to form a square with all the matchsticks.
Note:
The length sum of the given matchsticks is in the range of 0 to 10^9.
The length of the given matchstick array will not exceed 15.

*/

Solution:
class Solution {
public:
    bool dfs(vector<int>&nums,bool *visit,int sum,int target,int start,int k){
        if(k==0)
            return true;
        if(sum>target)
            return false;
        if(sum==target)
            return dfs(nums,visit,0,target,0,k-1);
        for(int i=start;i<nums.size();i++){
            if(!visit[i]){
                visit[i]=true;
                if(dfs(nums,visit,sum+nums[i],target,i+1,k))
                    return true;
                visit[i]=false;
            }
        }
        return false;
    }
    
    bool makesquare(vector<int>& nums) {
        int size=nums.size();
        if(size<4)
            return false;
        int totalLen=0;
        for(auto &n:nums)
            totalLen+=n;
        if(totalLen%4!=0)
            return false;
        int edgeLen=totalLen/4;
        bool visit[size]={0};
        return dfs(nums,visit,0,edgeLen,0,4);
    }
};

update:
class Solution {
public:
    /*
        一个数组给了火柴长度 问是否能利用这所有的火柴组成正方形
        即 是否能组成四个长度相同的线段
    */
    bool makesquare(vector<int>& nums) {
        int n=nums.size();
        if(n<4)
            return false;
        int sum=0;
        for(auto num:nums)
            sum+=num;
        if(sum%4!=0)
            return false;
        vector<bool> visit(n,false);
        return helper(nums,visit,0,sum/4,0,4);
    }
private:
    // start也是必要的剪枝操作 每次一组的元素都从前往后添加 不走回头路
    bool helper(vector<int> &nums, vector<bool> &visit, int curSum, int target, int start, int k){
        if(k==1)
            return true;
        if(curSum>target) // 必要的剪枝操作 不然超时
            return false;
        if(curSum==target){
            return helper(nums,visit,0,target,0,k-1);
        }
        for(int i=start;i<nums.size();i++){
            if(visit[i]) continue;
            visit[i]=true;
            if(helper(nums,visit,curSum+nums[i],target,i+1,k))
                return true;
            visit[i]=false;
        }
        return false;
    }
};

update:解释
class Solution {
public:
    bool makesquare(vector<int>& nums) {
        int n=nums.size();
        if(n<4){
            return false;
        }
        int sum=0;
        for(auto &num:nums){
            sum+=num;
        }
        if(sum%4!=0){
            return false;
        }
        int edge=sum/4;
        vector<bool> visit(n,false);
        return helper(nums,visit,0,0,edge,4);
    }
private:
    //判断是否可以将nums分成k组 每组的元素和都是target
    bool helper(vector<int> &nums,vector<bool> &visit,int start,int curSum,int target,int k){
        //之前的k-1的和都是target且nums的元素和为k*target所以最后一组的和必然为target
        if(k==1){
            return true;
        }
        //当前和==target说明已经找到了一组满足条件的 继续从头寻找剩下的k-1组
        if(curSum==target){
            return helper(nums,visit,0,0,target,k-1);
        }
        int n=nums.size();
        //已经到尽头了 不能再加入了 该组不满足条件
        if(start>=n){
            return false;
        }
        for(int i=start;i<n;i++){
            if(visit[i]) continue;
            if(nums[i]+curSum>target) continue;
            visit[i]=true;
            if(helper(nums,visit,i+1,curSum+nums[i],target,k)){
                return true;
            }
            visit[i]=false;
        }
        return false;
    }
};

Solution 2:
class Solution {
public:
    bool dfs(vector<int>&nums,vector<int>&sum,int target,int index){
        if(index==nums.size()){
            if(sum[0]==target&&sum[1]==target&&sum[2]==target)//成立时 sum[3]一定等于target
                return true;
            return false;
        }
        for(int i=0;i<4;i++){
            if(sum[i]+nums[index]<=target){
                sum[i]+=nums[index];
                if(dfs(nums,sum,target,index+1))
                    return true;
                sum[i]-=nums[index];
            }
        }
        return false;
    }
    
    bool makesquare(vector<int>& nums) {
        int size=nums.size();
        if(size<4)
            return false;
        int totalLen=0;
        for(auto &n:nums)
            totalLen+=n;
        if(totalLen%4!=0)
            return false;
        int edgeLen=totalLen/4;
        vector<int> sum(4,0);
        return dfs(nums,sum,edgeLen,0);
    }
};
