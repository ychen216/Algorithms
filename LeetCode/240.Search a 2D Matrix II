240. Search a 2D Matrix II

/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.
*/

Solution:
class Solution {
public:
    /*
    初始化搜索的位置为右上角p
    如果target大于当前位置 由于行元素是递增的 那么不可能在这一行搜索到
    如果target小于当前位置 由于列元素是递增的 那么不可能在该列继续搜索到
    复杂度为O(m+n)
    */
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        if(row==0)
            return false;
        int col=matrix[0].size();
        if(col==0)
            return false;
        int i=0,j=col-1;
        while(i<row&&j>=0){
            if(matrix[i][j]==target)
                return true;
            else if(matrix[i][j]<target)
                i++;
            else
                j--;
        }
        return false;
    }
};240. Search a 2D Matrix II
