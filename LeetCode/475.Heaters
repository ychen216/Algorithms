475. Heaters

/*
Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.

Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters 
so that all houses could be covered by those heaters.

So, your input will be the positions of houses and heaters seperately, and your expected 
output will be the minimum radius standard of heaters.

Note:
Numbers of houses and heaters you are given are non-negative and will not exceed 25000.
Positions of houses and heaters you are given are non-negative and will not exceed 10^9.
As long as a house is in the heaters' warm radius range, it can be warmed.
All the heaters follow your radius standard and the warm radius will the same.
Example 1:
Input: [1,2,3],[2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.
Example 2:
Input: [1,2,3,4],[1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.

*/

Solution 1:
class Solution {
public:
    //为每一个house寻找离它最近的heater计算距离d  所有距离d中最大的就是radius
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        int heater_num=heaters.size();
        int house_num=houses.size();
        sort(heaters.begin(),heaters.end());
        int radius=INT_MIN;
        for(int i=0;i<house_num;i++){
            int j;
            //找到离houses[i]最近的至多两个heater
            for(j=0;j<heater_num;j++){
                if(heaters[j]>=houses[i])
                    break;
            }
            int left=INT_MAX,right=INT_MAX;
            if(j<heater_num)
                right=heaters[j]-houses[i];
            if(j>0)
                left=houses[i]-heaters[j-1];
            radius=max(radius,min(left,right));
        }
        return radius;
    }
};

Solution 2:
class Solution {
public:
    //为每一个house寻找离它最近的heater计算距离d  所有距离d中最大的就是radius
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        int heater_num=heaters.size();
        int house_num=houses.size();
        sort(heaters.begin(),heaters.end());
        sort(houses.begin(),houses.end());
        int radius=0;
        //为每一个house确定他的heater 将house分配给离他最近的heater
        for(int i=0,j=0;i<house_num;i++){
            //例子house=[1,1,999,999,999],heater=[499,500,501]
            //找到离houses[i]最近heater
            //离第i+1house最近的heater一定坐标不小于 离第i个house最近的heater
            while(j+1<heater_num&&abs(heaters[j+1]-houses[i])<=abs(heaters[j]-houses[i]))
                j++;
            radius=max(radius,abs(heaters[j]-houses[i]));
        }
        return radius;
    }
};

Solution 3:
public class Solution {
    //只对heater排序 利用二分查找为每一个house找到离他最近的heater 来确定radius
    public int findRadius(int[] houses, int[] heaters) {
        Arrays.sort(heaters);
        int result = Integer.MIN_VALUE;
        
        for (int house : houses) {
            int index = Arrays.binarySearch(heaters, house);
            if (index < 0) {
        	index = -(index + 1);
            }
            int dist1 = index - 1 >= 0 ? house - heaters[index - 1] : Integer.MAX_VALUE;
            int dist2 = index < heaters.length ? heaters[index] - house : Integer.MAX_VALUE;
        
            result = Math.max(result, Math.min(dist1, dist2));
        }
        
        return result;
    }
}
