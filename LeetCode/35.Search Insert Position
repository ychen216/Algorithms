35. Search Insert Position

/*
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

*/

Solution 1: O(n)
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int size=nums.size();
        for(int i=0;i<size;i++){
            if(target<=nums[i])
                return i;
        }
        //target大于最大的数
        return size;
    }
};

Solution 2：O(lgn)
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int size=nums.size();
        int low=0,high=size-1;
        int mid;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target)
                return mid;
            else if(target<nums[mid])
                high=mid-1;
            else
                low=mid+1;
        }
        return low;
    }
};
改写
class Solution {
public:
    // 找到值则返回下标 找不到则返回第一个比该数大的数的下标
    int searchInsert(vector<int>& nums, int target) {
        int i=0,j=nums.size()-1;
        while(i<=j){
            int mid=i+(j-i)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>target)
                j=mid-1;
            else
                i=mid+1;
        }
        return i;
    }
};

update:
class Solution {
public:
    //找到第一个>=target的位置
    int searchInsert(vector<int>& nums, int target) {
        int start=0,end=nums.size()-1,mid;
        //数组为空直接返回位置0
        if(start>end){
            return 0;
        }
        //找到第一个>=target的位置
        while(start+1<end){
            mid=start+(end-start)/2;
            if(nums[mid]>=target){
                end=mid;
            }else{
                start=mid;
            }
        }
        //可能不存在>=target的位置 那么要在最后一个位置nums.size()插入
        if(nums[start]>=target){
            return start;
        }else if(nums[end]>=target){
            return end;
        }else{
            return end+1;
        }
    }
};

直接用stl找到第一个>=target的数字
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        auto it=lower_bound(nums.begin(),nums.end(),target);
        if(it==nums.end()){
            return nums.size();
        }
        return (int)(it-nums.begin());
    }
};
