365. Water and Jug Problem
/*
You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.

If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.

Operations allowed:

Fill any of the jugs completely with water.
Empty any of the jugs.
Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.
Example 1: (From the famous "Die Hard" example)

Input: x = 3, y = 5, z = 4
Output: True
Example 2:

Input: x = 2, y = 6, z = 5
Output: False
*/
Solution 1：
class Solution {
public:
    /* 
        BFS  记录每次操作 两个水杯的容量状态
        为了避免对unordered_set中pair类型定义hash函数 我们将{x,y}映射为kx+y 其中k=y+1 且类型要为long long 因为x,y的乘积范围超过int long eg.x=104597 y=104623
        同时记录状态时一定要是以联合的形式记录 eg.{1,2}代表第一个杯子有1L且第二个杯子有2L. 
        不能是visitx[1]=true visity[2]=true这样分开记录 因为我们需要判断的是:{1,2}是否同时出现过,而不是是否出现过杯子1里有1L且杯子2里有2L的情况(可能杯子1在上一次操作中1L,杯子2在上上次操作中2L也会有visitx[1]==visity[2]==1)
    */
    bool canMeasureWater(int x, int y, int z) {
        //要获得的水比两个杯子的容积都大
        if(z>x+y)
            return false;
        privateKey=y+1;
        unordered_set<long long> visit;
        queue<pair<int,int>> q;
        q.push({0,0});
        visit.insert(0);
        while(!q.empty()){
            pair<int,int> pre=q.front();
            q.pop();
            if(pre.first==z||pre.second==z||pre.first+pre.second==z)
                return true;
            //fill full water x
            addNode(x,pre.second,visit,q);
            //fill full water y
            addNode(pre.first,y,visit,q);
            //empty x
            addNode(0,pre.second,visit,q);
            //empty y
            addNode(pre.first,0,visit,q);
            //pour x to y
            int tempy=pre.second+min(pre.first,y-pre.second);
            int tempx=pre.first-min(pre.first,y-pre.second);
            addNode(tempx,tempy,visit,q);
            //pour y to x
            tempx=pre.first+min(x-pre.first,pre.second);
            tempy=pre.second-min(pre.second,x-pre.first);
            addNode(tempx,tempy,visit,q);
        }
        return false;
    }
private:
    long long privateKey;
    void addNode(int x,int y, unordered_set<long long>&visit,queue<pair<int,int>>&q){
        long long key=getKey(x,y); //注意返回类型long long
        if(visit.find(key)!=visit.end())
            return;
        q.push({x,y});
        visit.insert(key);
    }
    long long getKey(int x,int y){
        return privateKey*x+y;
    }
};

Solution 2:
class Solution {
public:
    /*
        这道问题其实可以转换为有一个很大的容器，我们有两个杯子，容量分别为x和y，问我们通过用两个杯子往里倒水，和往出舀水，问能不能使容器中的水刚好为z升。
        那么我们可以用一个公式来表达：
        z = m * x + n * y
        其中m，n为x,y舀水和倒水的次数，正数表示往里舀水，负数表示往外倒水，那么题目中的例子可以写成: 4 = (-2) * 3 + 2 * 5，即3升的水罐往外倒了两次水，5升水罐往里舀了两次水。
        那么问题就变成了对于任意给定的x,y,z，存不存在m和n使得上面的等式成立。根据裴蜀定理，ax + by = d的解为 d = gcd(x, y)，那么我们只要只要z % d == 0，上面的等式就有解，所以问题就迎刃而解了，我们只要看z是不是x和y的最大公约数的倍数就行了，别忘了还有个限制条件x + y >= z，因为x和y不可能称出比它们之和还多的水
    */
    //两个瓶子可能量出的水是两个瓶子容量最大公约数的倍数。所以只要判断z是否可以被x，y的最大公约数整除即可。
    bool canMeasureWater(int x, int y, int z) {
        if(x+y<z)
            return false;
        int g=gcd(x,y);
        return z==0||z%g==0;
    }
    int gcd(int x,int y){
        return y==0?x:gcd(y,x%y);
    }
};
