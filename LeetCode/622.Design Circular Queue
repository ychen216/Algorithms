622. Design Circular Queue

/*
Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Your implementation should support following operations:

MyCircularQueue(k): Constructor, set the size of the queue to be k.
Front: Get the front item from the queue. If the queue is empty, return -1.
Rear: Get the last item from the queue. If the queue is empty, return -1.
enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.
deQueue(): Delete an element from the circular queue. Return true if the operation is successful.
isEmpty(): Checks whether the circular queue is empty or not.
isFull(): Checks whether the circular queue is full or not.
 

Example:
  MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3
  circularQueue.enQueue(1);  // return true
  circularQueue.enQueue(2);  // return true
  circularQueue.enQueue(3);  // return true
  circularQueue.enQueue(4);  // return false, the queue is full
  circularQueue.Rear();  // return 3
  circularQueue.isFull();  // return true
  circularQueue.deQueue();  // return true
  circularQueue.enQueue(4);  // return true
  circularQueue.Rear();  // return 4
 
Note:
  All values will be in the range of [0, 1000].
  The number of operations will be in the range of [1, 1000].
Please do not use the built-in Queue library.
*/

Solution:
class MyCircularQueue {
public:
    // 数组中要浪费一个空间 来保证检查empty和full操作
    /** Initialize your data structure here. Set the size of the queue to be k. */
    MyCircularQueue(int k) {
        v=vector<int>(k+1);
        size=k+1;
        front=0;
        tail=0;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int value) {
        if(isFull())
            return false;
        tail=(tail+1)%size;
        v[tail]=value;
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
        if(isEmpty())
            return false;
        front=(front+1)%size;
        return true;
    }
    
    /** Get the front item from the queue. */
    int Front() {
        if(isEmpty())
            return -1;
        return v[(front+1)%size];
    }
    
    /** Get the last item from the queue. */
    int Rear() {
        if(isEmpty())
            return -1;
        return v[tail];
    }
    
    /** Checks whether the circular queue is empty or not. */
    bool isEmpty() {
        return front==tail;
    }
    
    /** Checks whether the circular queue is full or not. */
    bool isFull() {
        return (tail+1)%size==front;
    }
private:
    vector<int> v;
    int size;
    int front; // 第一个元素的前一个位置
    int tail; // 当前最后一个元素的下标
};
