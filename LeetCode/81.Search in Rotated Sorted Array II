81. Search in Rotated Sorted Array II
/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.
*/

Solution:
class Solution {
public:
    /*因为存在重复元素
    A[start] <= A[mid] 条件就不能确定[start mid]区间为递增有序序列，我们就把该条件分成两个子条件：
    A[start] < A[mid] 则 [start mid]区间为递增有序序列
    A[start] = A[mid] 则[start mid]区间不能确定，那就start++，往下一步看看即可。
    */
    bool search(vector<int>& nums, int target) {
        int high=nums.size()-1,low=0;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
                return true;
            //左边是有序递增序列
            if(nums[low]<nums[mid]){
                //目标存在于左边
                if(target>=nums[low]&&target<nums[mid])
                    high=mid-1;
                else
                    low=mid+1;
            }
            //右边是有序递增序列
            else if(nums[low]>nums[mid]){
                //目标存在于右边
                if(target>nums[mid]&&target<=nums[high])
                    low=mid+1;
                else
                    high=mid-1;
            }
            else{
                //nums[low]==nums[mid]
                low++;
            }
        }
        return false;
    }
};

update:
class Solution {
public:
    /*
        利用二分搜索 
        利用mid和low元素之间的比较 确定一个非递减区间
        然后判断target是否在非递减区间内
        由于存在重复元素 利用A[start] <= A[mid]条件就不能确定[low mid]区间为非递减有序序列，我们就把该条件分成两个子条件：
        A[low] < A[mid] 则 [low mid]区间为非递减有序序列
        A[low] = A[mid] 则[low mid]区间不能确定，那就low++，往下一步看看即可
        A[low] > A[mid] 则 [mid,high]区间为非递减有序序列
    */
    bool search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1,mid;
        while(low<=high){
            mid=low+((high-low)>>1);
            if(nums[mid]==target)
                return true;
            // mid左侧是一个非递减区间
            if(nums[mid]>nums[low]){
                // 确定target在[start,mid-1]
                if(target<nums[mid]&&target>=nums[low])
                    high=mid-1;
                else
                    low=mid+1;
            }
            // mid右侧是非递减区间
            else if(nums[mid]<nums[low]){
                // eg 5 6 1 1 3 4
                if(target>nums[mid]&&target<=nums[high])
                    low=mid+1;
                else
                    high=mid-1;
            }
            else // nums[mid]==nums[low]
                low++;
        }
        return false;
    }
};

update 另一个模板
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int start=0,end=nums.size()-1,mid;
        if(start>end){
            return false;
        }
        while(start+1<end){
            mid=start+(end-start)/2;
            if(nums[mid]==target){
                return true;
            }
            if(nums[mid]<nums[end]){
                if(nums[mid]<target&&target<=nums[end]){
                    start=mid;
                }else{
                    end=mid;
                }
            }else if(nums[mid]>nums[end]){
                if(nums[mid]>target&&nums[start]<=target){
                    end=mid;
                }else{
                    start=mid;
                }
            }else{
                //nums[mid]==nums[end]不能确定区间内的增减情况 无法缩小一半范围
                end--;
            }
        }
        if(nums[start]==target||nums[end]==target){
            return true;
        }
        return false;
    }
};
