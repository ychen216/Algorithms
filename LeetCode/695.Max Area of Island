695. Max Area of Island

/*
Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
Example 2:
[[0,0,0,0,0,0,0,0]]
Given the above grid, return 0.
Note: The length of each dimension in the given grid does not exceed 50.
*/

Solution 1:
class Solution {
public:
    bool visit[51][51];
    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,-1,1};
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        if(!row&&!col)
            return 0;
        memset(visit,0,sizeof(visit));
        int maxArea=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]){
                    int temp=dfs(i,j,row,col,grid);
                    maxArea=maxArea<temp?temp:maxArea;
                }
            }
        }
        return maxArea;
    }
    int dfs(int i,int j,int r,int c,vector<vector<int>>& grid){
        int area=1;
        visit[i][j]=true;
        for(int k=0;k<4;k++){
            int x=i+dx[k];
            int y=j+dy[k];
            if(x>=0&&x<r&&y>=0&&y<c&&!visit[x][y]&&grid[x][y])
                area+=dfs(x,y,r,c,grid);
        }
        return area;
    }
};


Solution 2:不使用visit 直接在原数组上改动
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int row=grid.size();
        if(row==0)
            return 0;
        int col=grid[0].size();
        int maxArea=0,curArea;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j,row,col,curArea=0);
                    maxArea=max(maxArea,curArea);
                }
            }
        }
        return maxArea;
    }
    
private:
    int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};
    void dfs(vector<vector<int>>&grid,int i,int j,int row,int col,int &curArea){
        curArea++;
        grid[i][j]=0;
        for(int k=0;k<4;k++){
            int x=i+dx[k];
            int y=j+dy[k];
            if(x<0||x>=row||y<0||y>=col||grid[x][y]==0)continue;
            dfs(grid,x,y,row,col,curArea);
        }
    }
};

不使用引用或全局变量 利用返回值
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        if(grid.empty()||grid[0].empty()){
            return 0;
        }
        int row=grid.size();
        int col=grid[0].size();
        int res=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==0) continue;
                res=max(res,dfs(grid,i,j,row,col));
            }
        }
        return res;
    }
private:
    int dfs(vector<vector<int>>& grid, int x,int y,int row,int col){
        if(x<0||x>=row||y<0||y>=col||grid[x][y]==0){
            return 0;
        }
        int area=1;
        grid[x][y]=0;
        area+=dfs(grid,x-1,y,row,col);
        area+=dfs(grid,x+1,y,row,col);
        area+=dfs(grid,x,y-1,row,col);
        area+=dfs(grid,x,y+1,row,col);
        return area;
    }
};
