904. Fruit Into Baskets

/*
In a row of trees, the i-th tree produces fruit with type tree[i].

You start at any tree of your choice, then repeatedly perform the following steps:

Add one piece of fruit from this tree to your baskets.  If you cannot, stop.
Move to the next tree to the right of the current tree.  If there is no tree to the right, stop.
Note that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.

You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.

What is the total amount of fruit you can collect with this procedure?

Example 1:
Input: [1,2,1]
Output: 3
Explanation: We can collect [1,2,1].

Example 2:
Input: [0,1,2,2]
Output: 3
Explanation: We can collect [1,2,2].
If we started at the first tree, we would only collect [0, 1].

Example 3:
Input: [1,2,3,2,2]
Output: 4
Explanation: We can collect [2,3,2,2].
If we started at the first tree, we would only collect [1, 2].

Example 4:
Input: [3,3,3,1,2,1,1,2,3,3,4]
Output: 5
Explanation: We can collect [1,2,1,1,2].
If we started at the first tree or the eighth tree, we would only collect 4 fruits.

Note:
  1 <= tree.length <= 40000
  0 <= tree[i] < tree.length

*/

Solution 1:
class Solution {
public:
    // 滑动窗口 找出最长的子数组 满足子数组最多只包含两种不同元素
    int totalFruit(vector<int>& tree) {
        unordered_map<int,int> mmp; // number,count in current subarray
        int start=0,end,res=0;
        for(end=0;end<tree.size();end++){
            mmp[tree[end]]++;
            while(mmp.size()>2){
                mmp[tree[start]]--;
                if(mmp[tree[start]]==0)
                    mmp.erase(tree[start]);
                start++;
            }
            res=max(res,end-start+1);
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        标准的sliding window题 但是可以用另一种方法做
        参考 https://leetcode.com/problems/fruit-into-baskets/discuss/170745/Problem:-Longest-Subarray-With-2-Elements
        利用两个变量a,b表示此前遇到的最后两种不同类型的tree
        Loop all fruit c in tree,
        Note that a and b are the last two different types of fruit that we met,
        c is the current fruit type,
        so it's something like "....aaabbbc..."

        Case 1 c == b:
        fruit c already in the basket,
        and it's same as the last type of fruit
        cur += 1
        count_b += 1

        Case 2 c == a:
        fruit c already in the basket,
        but it's not same as the last type of fruit
        cur += 1
        count_b = 1
        a = b, b = c

        Case 3 c != b && c!= a:
        fruit c not in the basket,
        cur = count_b + 1
        count_b = 1
        a = b, b = c

        Of course, in each turn we need to update res = max(res, cur)
    */
    int totalFruit(vector<int>& tree) {
        // 最后两种不同的tree种类a,b 当前subarray长度 最后一种水果b连续出现的次数
        int a=-1,b=-1,curLen=0,cntb=0;
        int res=0;
        for(int i=0;i<tree.size();i++){
            if(tree[i]==b){
                curLen++;
                cntb++;
            }
            else if(tree[i]==a){
                curLen++;
                cntb=1;
                a=b;
                b=tree[i];
            }
            else{
                curLen=cntb+1;
                cntb=1;
                a=b;
                b=tree[i];
            }
            res=max(res,curLen);
        }
        return res;
    }
};
