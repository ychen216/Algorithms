410. Split Array Largest Sum
/*
Given an array which consists of non-negative integers and an integer m, you can split the array into
m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:
1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2
Output:
18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
*/

Solution:
class Solution {
    /*
    整体利用二分查找的思想
    区间元素之和的最大值 在区间[数组元素最大值,数组元素之和]
    利用二分查找找到可能的最大值k,再进一步判断k的有效性 即是否可以按照k合理的划分数组为m个区间
    */
public: 
    int splitArray(vector<int>& nums, int m) {
        long sum=0;
        int maxElement=0;
        for(auto& num:nums){
            sum+=num;
            maxElement=max(maxElement,num);
        }
        return (int)binarySearch(nums,m,sum,maxElement);
    }
private:
    //二分查找 可能的最大值
    long binarySearch(vector<int>&nums,int m,long high,long low){
        long mid=0;
        while(low<high){
            mid=low+(high-low)/2;
            if(isValid(nums,m,mid)){
                high=mid;
            }
            else
                low=mid+1;
        }
        return high;
    }
    
    //判断按照给定的值,能否合法的划分数组 
    bool isValid(vector<int>&nums,int m,long key){
        long sum=0;
        int cnt=1;
        for(auto& num:nums){
            sum+=num;
            if(sum>key){
                sum=num;
                cnt++;
                //划分多于m个 则key太小不合法
                if(cnt>m)
                    return false;
            }
        }
        return true;
    }
};

update:
class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        long start=INT_MIN,end=0,mid;
        for(long num:nums){
            start=max(num,start);
            end+=num;
        }
        while(start<end){
            mid=start+(end-start)/2;
            int group=check(nums,mid);
            //以mid来划分nums
            if(group>m){
                start=mid+1;
            }
            else if(group<m){
                end=mid-1;
            }
            else{
                end--;
            }
        }
        return start;
    }
private:
    int check(vector<int> &nums,int sum_limit){
        if(nums.size()==0){
            return 0;
        }
        long cur_sum=0,group=1;
        for(auto num:nums){
            cur_sum+=num;
            if(cur_sum>sum_limit){
                group++;
                cur_sum=num;
            }
        }
        return group;
    }
};
update:二分查找新模板
class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        long start=0,end=0,mid;
        for(auto &num:nums){
            end=end+(long)num;
            start=max((int)start,num);
        }
        //二分查找找到满足条件的最小maxSum
        while(start+1<end){
            mid=start+(end-start)/2;
            //能够分成<=m个subarray 说明maxSum太大了
            if(isvalid(nums,mid,m)){
                end=mid;
            }
            else{
                //分成>m个subarray 说明maxSum太小了
                start=mid;
            }
        }
        if(isvalid(nums,start,m)){
            return start;
        }
        return end;
    }
private:
    //在subarray最大和为maxSum时 是否能够将nums分为<=k个subarray
    bool isvalid(vector<int>& nums,long maxSum,int k){
        long sum=0,cnt=1;
        for(auto &num:nums){
            sum=sum+num;
            if(sum>maxSum){
                sum=num;
                cnt++;
                if(cnt>k){
                    return false;
                }
            }
        }
        return true;
    }
};

Solution 2：
class Solution {
public:
    /*
        题目求：将nums划分成m个子数组，求子数组中最大和的最小值
        dp[i][j]表示将[0,j-1]这j个数字划分成i个subarray时的最小的最大sum of subarray
        dp[i][j]依赖于:j所在的子数组的前一个子数组的末尾元素k 即前i-1个子数组由前k个元素组成
        dp[i][j]依赖于dp[i-1][k]和sum(k+1,j)的大小
        dp[i][j]=min(max(dp[i-1][k],sum(k+1,j))) 1<=k<j
        dp[0][0]=0;
    */
    int splitArray(vector<int>& nums, int m) {
        int n=nums.size();
        vector<long> sum(n+1,0);
        vector<vector<long>> dp(m+1,vector<long>(n+1,INT_MAX));
        dp[0][0]=0;
        for(int i=1;i<=n;i++){
            sum[i]=sum[i-1]+nums[i-1];
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                for(int k=0;k<j;k++){
                    long maxSum=max(dp[i-1][k],sum[j]-sum[k]);
                    dp[i][j]=min(dp[i][j],maxSum);
                }
            }
        }
        return dp[m][n];
    }
};
