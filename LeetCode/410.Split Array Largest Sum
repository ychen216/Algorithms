410. Split Array Largest Sum
/*
Given an array which consists of non-negative integers and an integer m, you can split the array into
m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:
1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2
Output:
18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
*/

Solution:
class Solution {
    /*
    整体利用二分查找的思想
    区间元素之和的最大值 在区间[数组元素最大值,数组元素之和]
    利用二分查找找到可能的最大值k,再进一步判断k的有效性 即是否可以按照k合理的划分数组为m个区间
    */
public: 
    int splitArray(vector<int>& nums, int m) {
        long sum=0;
        int maxElement=0;
        for(auto& num:nums){
            sum+=num;
            maxElement=max(maxElement,num);
        }
        return (int)binarySearch(nums,m,sum,maxElement);
    }
private:
    //二分查找 可能的最大值
    long binarySearch(vector<int>&nums,int m,long high,long low){
        long mid=0;
        while(low<high){
            mid=low+(high-low)/2;
            if(isValid(nums,m,mid)){
                high=mid;
            }
            else
                low=mid+1;
        }
        return high;
    }
    
    //判断按照给定的值,能否合法的划分数组 
    bool isValid(vector<int>&nums,int m,long key){
        long sum=0;
        int cnt=1;
        for(auto& num:nums){
            sum+=num;
            if(sum>key){
                sum=num;
                cnt++;
                //划分多于m个 则key太小不合法
                if(cnt>m)
                    return false;
            }
        }
        return true;
    }
};
