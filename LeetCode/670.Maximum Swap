670. Maximum Swap

/*
Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. 
Return the maximum valued number you could get.

Example 1:
Input: 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.
Example 2:
Input: 9973
Output: 9973
Explanation: No swap.
Note:
The given number is in the range [0, 108]
*/

Solution:
class Solution {
public:
    /*
        最多交换两个数 构成最大的数
        我们很自然想到 优先将最高位换成较大的数 
        那么从低位选择一个比最高位大的数中最大的数x 有可能有多个x 那么我们要选择较低位的x 比如 1299 -> 9291 > 9219
        记录下每个数字出现的最低位的位置
    */
    int maximumSwap(int num) {
        string digit=to_string(num);
        vector<int> pos(10,-1);
        for(int i=0;i<digit.length();i++)
            pos[digit[i]-'0']=i;
        // 从高位找要替换的数字
        for(int i=0;i<digit.length();i++){
            // 找到比该位数字大的 且在低位的数字(在右侧)
            for(int k=9;k>digit[i]-'0';k--){
                if(pos[k]>i){
                    swap(digit[i],digit[pos[k]]);
                    return stoi(digit);
                }
            }
        }
        // 原数字已经是最大的 eg.9921
        return num;
    }
};
