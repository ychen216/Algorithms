763. Partition Labels
/*
A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
Note:
  S will have length in range [1, 500].
  S will consist of lowercase letters ('a' to 'z') only.
*/

Solution 1:
class Solution {
public:
    /*
        记录每一个字符最后出现的位置 每一个子区间的范围[c,d]必须保证所有字符最后出现的位置pos<=d
    */
    vector<int> partitionLabels(string S) {
        int n=S.length();
        int lastpos[26];//记录每一个字符最后出现的位置
        for(int i=0;i<n;i++)
            lastpos[S[i]-'a']=i;
        int start=0,last=0;
        vector<int> res;
        // i是区间的右边界
        for(int i=0;i<n;i++){
            last=max(last,lastpos[S[i]-'a']);
            if(last==i){
                res.push_back(last-start+1);
                start=last+1;
            }
        }
        return res;
    }
};

Solution 2:
class Solution {
public:
    /*
        记录每一个字符出现的次数 若某字符在一个区间出现那么该字符在该区间出现的次数必须是其在整个字符串中出现的次数
        这样才能保证该字符只在一个区间出现
    */
    vector<int> partitionLabels(string S) {
        int n=S.length();
        map<char,int> cnt;//记录每一个字符出现的次数
        for(int i=0;i<n;i++)
            cnt[S[i]]++;
        int start=0;
        vector<int> res;
        map<char,int> curCnt;
        //i是区间的右边界
        for(int i=0;i<n;i++){
            //加入新的字符
            if(curCnt.find(S[i])==curCnt.end()){
                curCnt[S[i]]=cnt[S[i]];
            }
            curCnt[S[i]]--;
            //该字符已全部出现 删除该字符
            if(curCnt[S[i]]==0)
                curCnt.erase(S[i]);
            if(curCnt.empty()){
                res.push_back(i-start+1);
                start=i+1;
            }
        }
        return res;
    }
};
