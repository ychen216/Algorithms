630. Course Schedule III

/*
There are n different online courses numbered from 1 to n. Each course has some duration(course length) t and closed on dth day. A course should be taken continuously for t days and must be finished before or on the dth day. You will start at the 1st day.

Given n online courses represented by pairs (t,d), your task is to find the maximal number of courses that can be taken.

Example:
Input: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]
Output: 3

Explanation: 
There're totally 4 courses, but you can take 3 courses at most:
First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.
Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. 
Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. 
The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.

Note:
  The integer 1 <= d, t, n <= 10,000.
  You can't take two courses simultaneously.
*/

Solution:
class Solution {
public:
    /*
        贪心思想 按照课程最晚结束时间从小到大排序 优先选择要求先结束的课程(贪心) 
        利用优先队列(最大堆)维护可以完成的课程的持续时间 当一门课程的实际结束时间超过最晚结束时间时,删除最耗费时间的课程
        ((贪心,为了尽可能的多上课,既然非要去掉一门课,那肯定是去掉耗时最长的课,这样省下来的时间说不定能多上几门课)
    */
    int scheduleCourse(vector<vector<int>>& courses) {
        sort(courses.begin(),courses.end(),[](const vector<int>&a,const vector<int>&b){return a[1]<b[1];});
        priority_queue<int>pq;//最大堆
        int time=0;
        for(auto &c:courses){
            time+=c[0];
            pq.push(c[0]);
            if(time>c[1]){
                time-=pq.top();
                pq.pop();
            }
        }
        return pq.size();
    }
};
