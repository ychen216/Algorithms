875. Koko Eating Bananas

/*
Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours.

Koko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour.

Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.

Return the minimum integer K such that she can eat all the bananas within H hours.

Example 1:
Input: piles = [3,6,7,11], H = 8
Output: 4

Example 2:
Input: piles = [30,11,23,4,20], H = 5
Output: 30

Example 3:
Input: piles = [30,11,23,4,20], H = 6
Output: 23

Note:
  1 <= piles.length <= 10^4
  piles.length <= H <= 10^9
  1 <= piles[i] <= 10^9
*/

Solution:
class Solution {
public:
    /*
        想要在H时间内吃完所有piles(piles.length <= H) 那么一小时吃一个pile必然满足需求 又想速度K尽可能小
        那么K的上界就是最大pile的香蕉数maxNum 这样可以保证1小时吃掉一个pile
        可以利用二分搜索在1~maxNum中查找最小的K
    */
    int minEatingSpeed(vector<int>& piles, int H) {
        int low=1,high=piles[0];
        for(int i=1;i<piles.size();i++)
            high=max(high,piles[i]);
        while(low<=high){
            int mid=low+(high-low)/2;
            int time=getEatTime(piles,mid);
            if(time<=H)// 还可以更慢一点
                high=mid-1;
            else
                low=mid+1;
        }
        return low;
    }
private:
    int getEatTime(vector<int>&piles, int speed){
        int t=0;
        for(auto pile:piles){
            t+=pile/speed;
            if(pile%speed!=0)
                t++;
        }
        return t;
    }
};
