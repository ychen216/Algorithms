57. Insert Interval

/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/

Solution:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        auto it=intervals.begin();
        //找到需要合并的第一个节点x 即newInterval.start>=x.end
        while(it!=intervals.end()&&(*it).end<newInterval.start)it++;
        //不断合并新区间和有交集的区间 直到不再有交集 x.start>newInterval.end
        while(it!=intervals.end()&&(*it).start<=newInterval.end){
            newInterval.start=min(newInterval.start,(*it).start);
            newInterval.end=max(newInterval.end,(*it).end);
            intervals.erase(it);//erase删除该节点后 it指向下一个位置
        }
        intervals.insert(it,newInterval);
        return intervals;
    }
};

update:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& ins, Interval newInt) {
        vector<Interval> res;
        int i=0,n=ins.size();
        //找到需要合并的第一个节点x 即newInterval.start>=x.end
        while(i<n&&ins[i].end<newInt.start){
            res.push_back(ins[i]);
            i++;
        }
        //不断合并新区间和有交集的区间 直到不再有交集 x.start>newInterval.end
        while(i<n&&ins[i].start<=newInt.end){
            newInt.start=min(newInt.start,ins[i].start);
            newInt.end=max(newInt.end,ins[i].end);
            i++;
        }
        res.push_back(newInt);
        while(i<n)
            res.push_back(ins[i++]);
        return res;
    }
};
