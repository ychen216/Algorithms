841. Keys and Rooms

/*
There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room. 

Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.

Initially, all the rooms start locked (except for room 0). 

You can walk back and forth between rooms freely.

Return true if and only if you can enter every room.

Example 1:
Input: [[1],[2],[3],[]]
Output: true
Explanation:  
  We start in room 0, and pick up key 1.
  We then go to room 1, and pick up key 2.
  We then go to room 2, and pick up key 3.
  We then go to room 3.  Since we were able to go to every room, we return true.

Example 2:
Input: [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can't enter the room with number 2.

Note:
  1 <= rooms.length <= 1000
  0 <= rooms[i].length <= 1000
  The number of keys in all rooms combined is at most 3000

*/

Solution 1:
class Solution {
public:
    // You can walk back and forth between rooms freely 
    // 所以到达一个房间后可以对其所有可以开的房间进行访问
    // 利用BFS 当队列为空时 判断是否所有房间都是open状态
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        vector<bool> visit(rooms.size(),false);
        queue<int> q;
        visit[0]=true;
        q.push(0);
        while(!q.empty()){
            int curVisit=q.front();
            q.pop();
            for(int i=0;i<rooms[curVisit].size();i++){
                if(!visit[rooms[curVisit][i]]){
                    visit[rooms[curVisit][i]]=true;
                    q.push(rooms[curVisit][i]);
                }
            }
        }
        for(int i=0;i<rooms.size();i++)
            if(!visit[i])
                return false;
        return true;
    }
};

为了提高效率可以利用set来存储访问过的room
 bool canVisitAllRooms(vector<vector<int>>& rooms) {
        unordered_set<int> visit;
        queue<int> q;
        q.push(0);
        visit.insert(0);
        while(!q.empty()){
            int curVisit=q.front();
            q.pop();
            for(int i=0;i<rooms[curVisit].size();i++){
                if(visit.find(rooms[curVisit][i])==visit.end()){
                    visit.insert(rooms[curVisit][i]);
                    q.push(rooms[curVisit][i]);
                }
            }
        }
        return visit.size()==rooms.size();
    }
    
 Solution 2:
 class Solution {
public:
    // dfs
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        unordered_set<int> visit;
        dfs(rooms,visit,0);
        return visit.size()==rooms.size();
    }
    
private:
    void dfs(vector<vector<int>>& rooms,unordered_set<int>&visit,int curVisit){
        visit.insert(curVisit);
        for(auto &i:rooms[curVisit]){
            if(visit.find(i)==visit.end())
                dfs(rooms,visit,i);
        }
    }
};
