375. Guess Number Higher or Lower II

/*
We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number I picked is higher or lower.

However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.

Example:

n = 10, I pick 8.

First round:  You guess 5, I tell you that it's higher. You pay $5.
Second round: You guess 7, I tell you that it's higher. You pay $7.
Third round:  You guess 9, I tell you that it's lower. You pay $9.

Game over. 8 is the number I picked.

You end up paying $5 + $7 + $9 = $21.
Given a particular n ≥ 1, find out how much money you need to have to guarantee a win.
*/

Solution:
class Solution {
public:
    /*
    DP 游戏的最佳策略是最小化你面临的最大可能损失
    比如已经知道 n 为 1-5 的情况，当 n 为 6 时，第一次猜，我们可以有 6 种猜法，分别选择 1,2,3,4,5 和 6，我们以猜 3 为例，比如说第一把猜了 3，那么如果猜的大了，那么我们接下去要求的是从 [1, 2] 中猜到正确数字所需要花费的最少 money，记为 x，如果猜的小了，那么我们接下去要求的是从 [4, 6] 中猜到正确数字所需要花费的最少 money，记为 y，如果刚好猜中，则结束。很显然，如果第一把猜 3，那么猜中数字至少需要花费的 money 为 3 + max(x, y, 0)，"至少需要的花费"，就要我们 "做最坏的打算，尽最大的努力"，即取最大值。这是第一把取 3 的情况，我们还需要考虑其他 5 种情况，然后六种情况再取个最小值，就是 n=6 至少需要的 money！
    dp[i][j]表示在[i,j]中找到正确值的最小开销
    dp[i][i]=0只有一个数必然能够猜中
    dp[i][j] = min (i<=k<=j) { k + max(dp[i][k-1], dp[k+1][j]) }
    */
    int getMoneyAmount(int n) {
        if(n==1)
            return 0;
        int dp[n+1][n+1];
        //初始化
        for(int i=1;i<=n;i++)
            dp[i][i]=0;
        for(int step=1;step<n;step++){
            for(int i=1;i+step<=n;i++){
                int j=i+step;//区间范围
                dp[i][j]=INT_MAX;
                for(int k=i;k<=j;k++)
                    dp[i][j]=min(dp[i][j],k+max(k-1>=i?dp[i][k-1]:0,k+1<=j?dp[k+1][j]:0));
            }
        }
        return dp[1][n];
    }
};
