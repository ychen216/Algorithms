513. Find Bottom Left Tree Value

/*
Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.
*/

Solution 1:
class Solution {
public:
    // BFS
    int findBottomLeftValue(TreeNode* root) {
        if(root==NULL)
            return NULL;
        queue<TreeNode *> q;
        q.push(root);
        int mostLeft=root->val;
        TreeNode *cur=NULL;
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                cur=q.front();
                q.pop();
                if(i==0)
                    mostLeft=cur->val;
                if(cur->left)
                    q.push(cur->left);
                if(cur->right)
                    q.push(cur->right);
            }
        }
        return mostLeft;
    }
};


Solution 2:trick 从右到左BFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    //BFS 从右到左扫描 则队列里的最后一个元素就是所求的
    int findBottomLeftValue(TreeNode* root) {
        if(root==NULL)
            return NULL;
        queue<TreeNode*> q;
        TreeNode *node=NULL;
        q.push(root);
        while(!q.empty()){
            node=q.front();
            q.pop();
            if(node->right)
                q.push(node->right);
            if(node->left)
                q.push(node->left);
        }
        return node->val;
    }
};
