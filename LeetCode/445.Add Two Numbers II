445. Add Two Numbers II
/*
You are given two non-empty linked lists representing two non-negative integers. 
The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
*/
Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //不能直接数字类型记录 链表代表的数值 可能很长会超过long
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==NULL&&l2==NULL)
            return NULL;
        stack<int> st1;
        stack<int> st2;
        while(l1){
            st1.push(l1->val);
            l1=l1->next;
        }
        while(l2){
            st2.push(l2->val);
            l2=l2->next;
        }
        ListNode *pre=NULL,*cur=NULL;
        int a,b,c=0,sum;
        while(!st1.empty()&&!st2.empty()){
            a=st1.top();
            st1.pop();
            b=st2.top();
            st2.pop();
            sum=a+b+c;
            cur=new ListNode(sum%10);
            c=sum/10;
            cur->next=pre;
            pre=cur;
        }
        while(!st1.empty()){
            a=st1.top();
            st1.pop();
            sum=a+c;
            cur=new ListNode(sum%10);
            c=sum/10;
            cur->next=pre;
            pre=cur;
        }
        while(!st2.empty()){
            a=st2.top();
            st2.pop();
            sum=a+c;
            cur=new ListNode(sum%10);
            c=sum/10;
            cur->next=pre;
            pre=cur;
        }
        if(c!=0){
            cur=new ListNode(c);
            cur->next=pre;
        }
        return cur;
    }
};
