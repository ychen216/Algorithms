 522. Longest Uncommon Subsequence II
/*
Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined 
as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of
the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. 
If the longest uncommon subsequence doesn't exist, return -1.

Example 1:
Input: "aba", "cdc", "eae"
Output: 3
Note:

All the given strings' lengths will not exceed 10.
The length of the given list will be in the range of [2, 50].

*/

Solution:
class Solution {
public:
    //最长不公共子序列必然是这些字符串中的一个 因为任何一个字符串的子序列必然是本字符串的公共子序列
    //所以只要考虑字符串中最长一个不是其他任何字符串的子序列即可
    //将字符串数组按照长度降序排列 找到最大的符合要求的字符串
    int findLUSlength(vector<string>& strs) {
        sort(strs.begin(),strs.end(),[&](string &s1,string&s2){return s1.length()>s2.length();});
        int size=strs.size();
        //遍历每一个字符串
        for(int i=0;i<size;i++){
            int notMatch=0;//非公共子序列的个数
            for(int j=0;j<size;j++){
                if(i!=j&&!isSubSequent(strs[i],strs[j]))
                    notMatch++;
            }
            if(notMatch==size-1)
                return strs[i].length();
        }
        return -1;
    }
    //判断s1是不是s2的子序列
    bool isSubSequent(const string &s1,const string &s2){
        int i=0,len1=s1.length();
        for(auto c:s2){
            if(i<len1&&c==s1[i])
                i++;
            if(i>=len1)
                return true;
        }
        return false;
    }
};
update:
class Solution {
public:
    int findLUSlength(vector<string>& strs) {
        sort(strs.begin(),strs.end(),[](string &a,string &b){
            return a.length()>b.length();
        });
        int res=-1;
        for(int i=0;i<strs.size();i++){
            bool ok=true;
            for(int j=0;j<strs.size();j++){
                if(i==j) continue;
                //i比j长 那么i必然不是j的subseqeuence
                //由于字符串排序了 所以也不会是后续串的subsequence
                if(strs[i].length()>strs[j].length()){
                    break;
                }
                //check长度>=i的串j 判断i是否是j的subseqence
                if(isSub(strs[i],strs[j])){
                    ok=false;
                    break;
                }
            }
            if(ok){
                res=strs[i].length();
                break;
            }
        }
        return res;
    }
private:
    //a是否是b的subsequence
    bool isSub(const string &a,const string &b){
        int lena=a.length(),lenb=b.length();
        if(lena==lenb){
            return a==b;
        }
        int i=0,j=0;
        while(i<lena&&j<lenb){
            if(a[i]==b[j]){
                i++;j++;
            }
            else{
                j++;
            }
        }
        return i==lena;//说明a是b的子序列
    }
};

Solution 2:
class Solution {
public:
    /*
        这里的Uncommon Subsequence Su指Su只是某一个字符串S的子序列，但不是任何其他字符串S'的子序列
        首先分析一下最长非公共子串的特征，假设有若干个字符串，其中最长非公共子串为Sm，它的长度为Sm.length()。从子串的定义上，我们可以知道Sm有两种可能的构成：
            1. Sm为某一个字符串本身。
            2. Sm为某一个小于父串长度的子串。
        我们可以证明Sm只能为第一种情况。 
        首先我们假设 2 是成立的，其中 Sm 的父串是 Sf，那么说明 Sf 是某一个更长字符串的字串，所以导致 Sf 本身不能最为最长非公共子串。
        而由于 Sf 是某一个字符串的字串，那么 Sm 理应也是这一个字符串的子串，因为他们是包含关系，所以 Sm 是最长非公共子串跟假设 2 是矛盾的。
        所以Uncommon Subsequence是n个字符串中的其中一个 我们可以按照字符串长度从大到小排序遍历找到LUS
        那么长度大的字符串S必然不会是长度小的字符串S'的子串 我们只需要验证S是否是长度不小于S的S''的子序列即可 
        但是要注意的是可能会有重复字符串 重复的字符串必然不可能是LUS eg. ['aaa','aaa','aa']正确长度应该是-1 而不是3
        为了排除重复元素的影响 利用map记录每个字符串出现的次数
    */
    int findLUSlength(vector<string>& strs) {
        unordered_map<string,int> counter;
        for(auto &s:strs)
            counter[s]++;
        vector<pair<string,int>> pairStrs;
        for(auto &p:counter)
            pairStrs.push_back(p);
        sort(pairStrs.begin(),pairStrs.end(),
             [&](const pair<string,int>&p1,const pair<string,int>&p2){
                 return p1.first.length() > p2.first.length();
             });
        for(int i=0,j=0;i<pairStrs.size();i++){
            // 必须是无重复的字符串才有可能是LUS
            if(pairStrs[i].second!=1) continue;
            // 比较i是否是长度不小于len(str[i])的字符串的子序列
            for(j=0;j<i;j++){
                // 验证strs[i]是否是strs[j]的子序列
                if(isSubsequence(pairStrs[i].first,pairStrs[j].first))
                    break;
            }
            if(j==i)
                return pairStrs[i].first.length();
        }
        return -1;
    }
private:
    // s1是否是s2的子序列
    bool isSubsequence(const string&s1, const string& s2){
        int p1=0,p2=0,len1=s1.length(),len2=s2.length();
        while(p1<len1&&p2<len2){
            if(s1[p1]==s2[p2])
                p1++;
            p2++;
        }
        return p1==len1;
    }
};
