 522. Longest Uncommon Subsequence II
/*
Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined 
as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of
the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. 
If the longest uncommon subsequence doesn't exist, return -1.

Example 1:
Input: "aba", "cdc", "eae"
Output: 3
Note:

All the given strings' lengths will not exceed 10.
The length of the given list will be in the range of [2, 50].

*/

Solution:
class Solution {
public:
    //最长不公共子序列必然是这些字符串中的一个 因为任何一个字符串的子序列必然是本字符串的公共子序列
    //所以只要考虑字符串中最长一个不是其他任何字符串的子序列即可
    //将字符串数组按照长度降序排列 找到最大的符合要求的字符串
    int findLUSlength(vector<string>& strs) {
        sort(strs.begin(),strs.end(),[&](string &s1,string&s2){return s1.length()>s2.length();});
        int size=strs.size();
        //遍历每一个字符串
        for(int i=0;i<size;i++){
            int notMatch=0;//非公共子序列的个数
            for(int j=0;j<size;j++){
                if(i!=j&&!isSubSequent(strs[i],strs[j]))
                    notMatch++;
            }
            if(notMatch==size-1)
                return strs[i].length();
        }
        return -1;
    }
    //判断s1是不是s2的子序列
    bool isSubSequent(const string &s1,const string &s2){
        int i=0,len1=s1.length();
        for(auto c:s2){
            if(i<len1&&c==s1[i])
                i++;
            if(i>=len1)
                return true;
        }
        return false;
    }
};
