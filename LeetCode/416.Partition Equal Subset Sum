416. Partition Equal Subset Sum

/*
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets 
such that the sum of elements in both subsets is equal.
Note:
Each of the array element will not exceed 100.
The array size will not exceed 200.
Example 1:
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: [1, 2, 3, 5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
*/

Solution 1:TLE DFS
class Solution {
public:
    bool helper(vector<int>&nums,int target,int start){
        if(target==0)
            return true;
        else if(target<0)
            return false;
        else{
            for(int i=start;i<nums.size();i++){
                if(helper(nums,target-nums[i],i+1))
                    return true;
            }
            return false;
        }
    }
    
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto &num:nums)
            sum+=num;
        //奇数
        if(sum%2)
            return false;
        return helper(nums,sum/2,0);
    }
};

update: TLE
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        if(n<2)
            return false;
        int sum=0;
        for(auto&num:nums)
            sum+=num;
        if(sum&1)
            return false;
        int target=sum/2;
        vector<bool> visit(n,false);
        return helper(nums,visit,0,target,0);
    }
private:
    bool helper(vector<int>&nums,vector<bool>&visit,int curSum,int target,int start){
        if(curSum>=target){
            if(curSum==target)
                return true;
            return false;
        }
        for(int i=start;i<nums.size();i++){
            if(visit[i]) continue;
            visit[i]=true;
            if(helper(nums,visit,curSum+nums[i],target,i+1))
                return true;
            visit[i]=false;
        }
        return false;
    }
};

Solution 2: DP
class Solution {
public:
    //对于每一个数的选择只有 选择或者不选 转化为01背包问题
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto &num:nums)
            sum+=num;
        //奇数
        if(sum%2)
            return false;
        int target=sum/2;
        bool dp[target+1];
        memset(dp,0,sizeof(dp));
        dp[0]=true;
        for(auto &num:nums){
            for(int j=target;j>=0;j--)
                if(num<=j)
                    dp[j]|=dp[j-num];
        }
        return dp[target];
    }
};

class Solution {
public:
    // 是否可以将一个数组分成两个子数组 他们的元素和相等
    // 利用0/1背包 看是否能构成容量恰好为 sum/2的背包
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto num:nums)
            sum+=num;
        if(sum&1)
            return false;
        int target=sum/2;
        vector<bool> dp(target+1,false);
        dp[0]=true;
        for(auto num:nums)
            for(int i=target;i>=num;i--)
                dp[i]=dp[i]||dp[i-num];
        return dp[target];
    }
};
