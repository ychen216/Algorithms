530. Minimum Absolute Difference in BST

/*
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:
Input:

   1
    \
     3
    /
   2

Output:
1
Explanation:
  The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
  Note: There are at least two nodes in this BST.
*/

Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    中序遍历BST后得到递增序列，两个节点之间的最小绝对距离一定存在于相邻的两个点之间
    */
    void inOrder(TreeNode* root,vector<int>&v){
        if(!root)
            return;
        inOrder(root->left,v);
        v.push_back(root->val);
        inOrder(root0>right,v);
    }
    int getMinimumDifference(TreeNode* root) {
        vector<int> vec;
        inOrder(root,vec);
        int size=vec.size();
        int minDis=INT_MAX;
        for(int i=1;i<size;i++){
            int temp=vec[i]-vec[i-1];
            if(temp<minDis)
                minDis=temp;
        }
        return minDis;
    }
};

Solution 2:
class Solution {
private:
    int minDis,pre;
public:   
    void inOrder(TreeNode* root){
        if(!root)
            return;
        inOrder(root->left);
        if(pre!=-1){
            minDis=min(minDis,root->val-pre);
        }
        pre=root->val;
        inOrder(root->right);
    }
    int getMinimumDifference(TreeNode* root) {
        minDis=INT_MAX;
        pre=-1;
        inOrder(root);
        return minDis;
    }
};

update:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        pre=NULL;
        minDis=INT_MAX;
        inorder(root);
        return minDis;
    }
private:
    TreeNode *pre=NULL;
    int minDis=INT_MAX;
    // 这里要注意preNode一定要用全局变量
    // minDis可以是全局变量也可以是inorder的引用参数
    // 中序遍历得到递增序列 访问的前一个节点就是小于该节点的前一个节点
    void inorder(TreeNode *root){
        if(!root){
            return;
        }
        inorder(root->left);
        if(pre){
            minDis=min(minDis,root->val-pre->val);
        }
        pre=root;
        inorder(root->right);
    }
};
