9. Palindrome Number

/*
Determine whether an integer is a palindrome. Do this without extra space.
*/

Solution 1:
class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0)//有负号
            return false;
        if(x<10)//[0,9]
            return true; 
        string s="";
        while(x>0){
            char c=(x%10)+'0';
            s=c+s;
            x/=10;
        }
        int left=0,right=s.length()-1;
        while(left<right){
            if(s[left++]!=s[right--])
                return false;
        }
        return true;
    }
};

update:
Solution 3:转化为字符串的回文问题
public:
    bool isPalindrome(int x) {
        string num=to_string(x);
        int i=0,j=num.length()-1;
        while(i<j){
            if(num[i]!=num[j])
                return false;
            i++;j--;
        }
        return true;
    }
};

Solution 2:
class Solution {
public:
    // 将数字翻转得到x' 判断x==x'
    bool isPalindrome(int x) {
        if(x<0)//有负号
            return false;
        if(x<10)//[0,9]
            return true; 
       int a=0,b=x;//求出x的倒置数 a=12334 b=43321
        while(b>0){
            a=a*10+b%10;
            b/=10;
        }
        return a==x;
    }
};


Solution 3：
class Solution {
public:
    /*
        不必将整个数字反转 只需要反转一半即可
        将x的后半部分进行翻转 与前半部分进行比较
        这样还有一个好处是不需要考虑完全翻转后可能会溢出的问题
        1234321 ->123 1234比较
        123321 -> 123 123比较
    */
    bool isPalindrome(int x) {
        // 负数不满足条件 且排除翻转后有前导0的情况
        if(x<0|| (x!=0 &&x%10==0)) 
            return false;
        int sum=0;
        while(x>sum){
            sum = sum*10+x%10;
            x = x/10;
        }
        return (x==sum)||(x==sum/10);
    }
};

update:
class Solution {
public:
    // 将数字翻转 但只比较翻转一半的结果
    bool isPalindrome(int x) {
        if(x<0||(x!=0&&x%10==0))
            return false;
        if(x<10)
            return true;
        // x>=10&&末尾非零
        int rev=0;
        while(x>rev){
            rev=rev*10+x%10;
            x/=10;
        }
        return rev==x||rev/10==x;
    }
};
