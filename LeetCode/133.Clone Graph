133. Clone Graph
/*
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
*/

Solution:
/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        unordered_map<int,UndirectedGraphNode*> nodeMap;
        return  clone(node,nodeMap);
    }
    
    UndirectedGraphNode* clone(UndirectedGraphNode* node,unordered_map<int,UndirectedGraphNode*>&nodeMap){
        if(node==NULL)
            return NULL;
        
        if(nodeMap.find(node->label)!=nodeMap.end())
            return nodeMap[node->label];
        UndirectedGraphNode *cloneNode=new UndirectedGraphNode(node->label);
        nodeMap[cloneNode->label]=cloneNode;
        for(auto& neighbor:node->neighbors){
            cloneNode->neighbors.push_back(clone(neighbor,nodeMap));
        }
        return cloneNode;
        
    }
};

Solution 2:BFS 两步克隆 先克隆点再克隆边
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;

    Node() {}

    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {
public:
    /*
        给定一张图的一个节点 克隆该图，可以分为两个步骤：
        1.克隆节点，建立新图和原图节点的映射关系
        2.克隆边
        1,2,都需要遍历整个图，推荐用BFS遍历
    */
    Node* cloneGraph(Node* node) {
        unordered_map<Node*,Node*> mmp;//既可以保存映射关系 也可以判断是否已经遍历过该节点起到visit数组的作用
        queue<Node*>q;
        //克隆点
        q.push(node);
        Node *newNode=new Node();
        newNode->val=node->val;
        mmp[node]=newNode;
        while(!q.empty()){
            auto cur=q.front();
            q.pop();
            //复制邻接节点
            for(auto neighbor:cur->neighbors){
                if(mmp.find(neighbor)==mmp.end()){
                    newNode=new Node();
                    newNode->val=neighbor->val;
                    mmp[neighbor]=newNode;
                    q.push(neighbor);
                }
            }
        }
        //克隆边
        for(auto &p:mmp){
            for(auto neighbor:p.first->neighbors){
                p.second->neighbors.push_back(mmp[neighbor]);
            }
        }
        return mmp[node];
    }
};
