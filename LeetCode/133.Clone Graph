133. Clone Graph
/*
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
*/

Solution:
/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        unordered_map<int,UndirectedGraphNode*> nodeMap;
        return  clone(node,nodeMap);
    }
    
    UndirectedGraphNode* clone(UndirectedGraphNode* node,unordered_map<int,UndirectedGraphNode*>&nodeMap){
        if(node==NULL)
            return NULL;
        
        if(nodeMap.find(node->label)!=nodeMap.end())
            return nodeMap[node->label];
        UndirectedGraphNode *cloneNode=new UndirectedGraphNode(node->label);
        nodeMap[cloneNode->label]=cloneNode;
        for(auto& neighbor:node->neighbors){
            cloneNode->neighbors.push_back(clone(neighbor,nodeMap));
        }
        return cloneNode;
        
    }
};
