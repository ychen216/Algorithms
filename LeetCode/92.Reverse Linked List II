92. Reverse Linked List II

/*
reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
*/
Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //参考http://blog.csdn.net/sunnyyoona/article/details/18821017
    //前m-1个不变，从第m+1个到第n个，依次删除，用尾插法插入到第m-1个节点后面。
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode *dummy=new ListNode(0);//作为虚拟节点 指向头指针
        dummy->next=head;
        
        ListNode *tail=dummy,*pre=NULL;//pre 要删除节点的前驱 
        //找到第m-1个节点
        for(int i=1;i<m;i++){
            tail=tail->next;
        }
        //tail指向第m-1个节点
        pre=tail->next;
        //尾插法
        for(int i=m+1;i<=n;i++){
            ListNode *d=pre->next;
            pre->next=d->next;
            d->next=tail->next;
            tail->next=d;
            
        }
        return dummy->next;
    }
};

Solution 2:
class Solution {
public:
    // m~n的节点利用头插法reverse
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* feakNode=new ListNode(0);
        feakNode->next=head;
        ListNode* pre=feakNode;//pre记录当前节点的前一个节点
        // pre走到第m-1个节点
        for(int i=1;i<m;i++){
            pre=pre->next;
        }
        ListNode *cur=pre->next, *last=pre->next;//cur为要reverse的节点 last为第一个reverse的节点 也就是reverse结束后在reverse链最后一个的节点
        pre->next=NULL;
        // 头插法 这时候的头结点是pre
        for(int i=m;i<=n;i++){
            ListNode* next=cur->next;
            cur->next=pre->next;
            pre->next=cur;
            cur=next;
        }
        //链接
        last->next=cur;
        return feakNode->next;
    }
};

update:
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode *feakHead=new ListNode(0);
        feakHead->next=head;
        ListNode *cur=feakHead;
        for(int i=1;i<m;i++)
            cur=cur->next;
        ListNode *rev=cur->next;
        ListNode *first=cur->next;//要反转的第一个元素 也是翻转完成的最后一个元素 要将该元素和剩下不需要翻转的链连接起来
        for(int i=m;i<=n;i++){
            ListNode *tmp=rev->next;
            rev->next=cur->next;
            cur->next=rev;
            rev=tmp;
        }
        first->next=rev;//完成翻转部分和不需要翻转部分的连接
        return feakHead->next;
    }
};

update:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(!head||!head->next){
            return head;
        }
        ListNode *feakHead=new ListNode(0);
        ListNode *cur=feakHead,*p=head;
        int i;
        for(i=1;i<m&&p;i++){
            cur->next=p;
            cur=cur->next;
            p=p->next;
        }
        //头插法reverse[m,n] 
        //第一个插入的节点是reverse后的最后一个节点last
        ListNode *last=p,*tmp=NULL;
        for(;i<=n&&p;i++){
            tmp=p->next;
            p->next=cur->next;
            cur->next=p;
            p=tmp;
        }
        //链接reverse后链表的最后一个节点和原链表剩下的部分
        cur=last;
        cur->next=p;
        return feakHead->next;
    }
};
