636. Exclusive Time of Functions
/*
Given the running logs of n functions that are executed in a nonpreemptive single threaded CPU, find the exclusive time of these functions.

Each function has a unique id, start from 0 to n-1. A function may be called recursively or by another function.

A log is a string has this format : function_id:start_or_end:timestamp. For example, "0:start:0" means function 0 starts from the very beginning of time 0. "0:end:0" means function 0 ends to the very end of time 0.

Exclusive time of a function is defined as the time spent within this function, the time spent by calling other functions should not be considered as this function's exclusive time. You should return the exclusive time of each function sorted by their function id.

Example 1:
Input:
n = 2
logs = 
["0:start:0",
 "1:start:2",
 "1:end:5",
 "0:end:6"]
Output:[3, 4]
Explanation:
Function 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. 
Now function 0 calls function 1, function 1 starts at time 2, executes 4 units of time and end at time 5.
Function 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. 
So function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.
Note:
Input logs will be sorted by timestamp, NOT log id.
Your output should be sorted by function id, which means the 0th element of your output corresponds to the exclusive time of function 0.
Two functions won't start or end at the same time.
Functions could be called recursively, and will always end.
1 <= n <= 100
*/

Solution:
class Solution {
    //利用栈
    public int[] exclusiveTime(int n, List<String> logs) {
        int []time=new int[n];
        Stack<Integer> st=new Stack<Integer>();
        int preTime=0;
        for(String log:logs){
            String []loginfo=log.split(":");
            if(st.isEmpty()==false){
                time[st.peek()]+=Integer.parseInt(loginfo[2])-preTime;
            }
            preTime=Integer.parseInt(loginfo[2]);
            //记录id
            if(loginfo[1].equals("start"))
                st.push(Integer.parseInt(loginfo[0]));
            else{
                time[st.pop()]++;
                preTime++;
            }
        }
        return time;
    }    
}

update: C++
class Solution {
public:
    /*
        题目给定一系列func的运行log 要求求出每一类func的独立运行时间(也就是排除func_i中调用其他func_j的时间)
        类似括号问题 start相当于一个 ( , end相当于一个 ). 后出现的start 一定先结束
        利用栈结构 保存还在运行的func id,只有当遇到end func_i才将i pop
        同时需要一个变量记录上一个时间节点 以便计算耗时
        注意 此题中时间的计算是闭区间 [start,end] time=end-start+1
    */
    vector<int> exclusiveTime(int n, vector<string>& logs) {
        vector<int> res(n,0);
        stack<int> st;// 记录还在运行的func id
        int preTime=-1;
        for(auto &log:logs){
            int index1=log.find(":");
            int index2=log.find_last_of(":");
            int id=stoi(log.substr(0,index1));
            int time=stoi(log.substr(index2+1));
            char type=log[index1+1]; // s为start e为end
            // 如果栈不为空 那么之前一定还有别的func在运行 增加该func的运行时间
            if(!st.empty())
                res[st.top()]+=time-preTime;
            preTime=time;
            if(type=='s'){
                st.push(id);
            }else{
                res[st.top()]++;
                st.pop();
                preTime++;
            }
        }
        return res;
    }
};
