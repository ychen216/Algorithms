68. Text Justification

/*
Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

Note:
  A word is defined as a character sequence consisting of non-space characters only.
  Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
  The input array words contains at least one word.

Example 1:
Input:
words = ["This", "is", "an", "example", "of", "text", "justification."]
maxWidth = 16
Output:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]

Example 2:
Input:
words = ["What","must","be","acknowledgment","shall","be"]
maxWidth = 16
Output:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
Explanation: Note that the last line is "shall be    " instead of "shall     be",
             because the last line must be left-justified instead of fully-justified.
             Note that the second line is also left-justified becase it contains only one word.

Example 3:
Input:
words = ["Science","is","what","we","understand","well","enough","to","explain",
         "to","a","computer.","Art","is","everything","else","we","do"]
maxWidth = 20
Output:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]

*/

Solution:
class Solution {
public:
    /*
        这道题是要做文本两端对齐。给定一些单词和每一行容许的最大长度maxWidth。
        要求将这些单词排列成多行，每一行都要求字符数为maxWidth,同时满足：
            1.每一行展示尽可能多的单词，如果本行还有剩余的长度则补充空格使得长度为maxWidth
            2.每一行的不同单词之间至少有一个空格分隔，同时单词之间的空格数应该尽可能分布均匀
              如果无法平均分配，则左侧slot的空格数应该多于右侧slot
            3.最后一行文本，应该靠左对齐且单词之间只有一个空格，多于的空格数padding在尾部
    */
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        int n=words.size();
        vector<string> res;
        int start=0,end;//表示现在要生成的行包含词表中[start,end)
        while(start<n){
            end=start+1;
            int curLen=words[start].length();
            //check该行能够放置的单词范围
            while(end<n){
                //后续每加入一个单词 还要增加至少一个空格
                if(curLen+words[end].length()+1>maxWidth) break;
                curLen+=words[end].length()+1;
                end++;
            }
            string line=words[start];
            //确定间隔slot数目以及每个slot需要额外增加的空格数
            int slot=end-start-1;
            int extraSpace=maxWidth-curLen;
            //如果该行是最后一行或者该行只有一个单词 多余的空格填充在末尾
            if(end==n||slot==0){
                for(int i=start+1;i<end;i++){
                    line.push_back(' ');
                    line.append(words[i]);
                }
                line.append(extraSpace,' ');
            }else{
                //需要将多余的空格均匀散布到slot中
                int extraSpaceInSlot=extraSpace/slot;
                int r=extraSpace%slot;//不能平均分配的 分配到前面的slot
                for(int i=start+1;i<end;i++){
                    line.append(extraSpaceInSlot,' ');
                    if(r>0){
                        line.push_back(' ');
                        r--;
                    }
                    line.push_back(' ');
                    line.append(words[i]);
                }
            }
            res.push_back(line);
            start=end;
        }
        return res;
    }
};
