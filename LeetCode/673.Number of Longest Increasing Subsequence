673. Number of Longest Increasing Subsequence
/*
Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.
*/

Solution:
class Solution {
public:
    /*
        最长公共子序列
        除了len[i]记录以i结尾的最长公共子序列长度
        还有cnt[i]记录以i结尾的LIS的个数
    */
    int findNumberOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> len(n,0), cnt(n,0);
        int maxLen=0;
        for(int i=0;i<n;i++){
            int curLen=1,curCnt=1; //记录当前以元素i结尾的LIS长度以及该长度LIS的个数
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    if(len[j]+1>curLen){
                        curLen=len[j]+1;
                        curCnt=cnt[j];
                    }
                    else if(len[j]+1==curLen){
                        curCnt+=cnt[j];
                    }
                }
            }
            len[i]=curLen;
            cnt[i]=curCnt;
            maxLen=max(maxLen,len[i]);
        }
        int res=0;
        for(int i=0;i<n;i++)
            if(len[i]==maxLen)
                res+=cnt[i];
        return res;
    }
};

可以将最后一个for循坏合并到找LIS的过程中
class Solution {
public:
    /*
        最长公共子序列
        除了len[i]记录以i结尾的最长公共子序列长度
        还有cnt[i]记录以i结尾的LIS的个数
    */
    int findNumberOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> len(n,0), cnt(n,0);
        int maxLen=0,res=0;
        for(int i=0;i<n;i++){
            int curLen=1,curCnt=1; //记录当前以元素i结尾的LIS长度以及该长度LIS的个数
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    if(len[j]+1>curLen){
                        curLen=len[j]+1;
                        curCnt=cnt[j];
                    }
                    else if(len[j]+1==curLen){
                        curCnt+=cnt[j];
                    }
                }
            }
            len[i]=curLen;
            cnt[i]=curCnt;
            if(maxLen==len[i])
                res+=cnt[i];
            else if(maxLen<len[i]){
                res=cnt[i];
                maxLen=len[i];
            }
        }
        return res;
    }
};

Solution 2: O(nlgn)
