120. Triangle
/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/
Solution:
class Solution {
public:
    //DP 从下往上
    int minimumTotal(vector<vector<int>>& triangle) {
        int row=triangle.size();
        //从倒数第二层开始
        for(int i=row-2;i>=0;i--){
            for(int j=0;j<=i;j++)
                triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1]);
        }
        return triangle[0][0];
    }
};

update:
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int r=triangle.size();
        if(r==0)
            return 0;
        if(r==1)
            return triangle[0][0];
        vector<int> dp;
        for(int i=0;i<r;i++)
            dp.push_back(triangle[r-1][i]);
        for(int i=r-2;i>=0;i--){
            for(int j=0;j<=i;j++)
                dp[j]=min(dp[j],dp[j+1])+triangle[i][j];
        }
        return dp[0];
    }
};
