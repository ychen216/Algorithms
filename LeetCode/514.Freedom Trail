514. Freedom Trail

/*
In the video game Fallout 4, the quest "Road to Freedom" requires players to reach a metal dial called the "Freedom Trail Ring", and use the dial to spell a specific keyword in order to open the door.

Given a string ring, which represents the code engraved on the outer ring and another string key, which represents the keyword needs to be spelled. You need to find the minimum number of steps in order to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at 12:00 direction. You need to spell all the characters in the string key one by one by rotating the ring clockwise or anticlockwise to make each character of the string key aligned at 12:00 direction and then by pressing the center button. 
At the stage of rotating the ring to spell the key character key[i]:
You can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. The final purpose of the rotation is to align one of the string ring's characters at the 12:00 direction, where this character must equal to the character key[i].
If the character key[i] has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you've finished all the spelling.
Example:


Input: ring = "godding", key = "gd"
Output: 4
Explanation:
 For the first key character 'g', since it is already in place, we just need 1 step to spell this character. 
 For the second key character 'd', we need to rotate the ring "godding" anticlockwise by two steps to make it become "ddinggo".
 Also, we need 1 more step for spelling.
 So the final output is 4.
Note:
  Length of both ring and key will be in range 1 to 100.
  There are only lowercase letters in both strings and might be some duplcate characters in both strings.
  It's guaranteed that string key could always be spelled by rotating the string ring.
*/

Solution:
class Solution {
public:
    /*dp[k][i]当前匹配到key的第k个字母，ring的第i个字母在12点方向
    dp[k][i] = min(dp[k][i], dp[k - 1][j] + min(abs(i - j), len(ring) - abs(i - j))) 满足key[k]==ring[i]且遍历ring[j]==key[k-1]的所有j
    其中k表示当前字符在key中的下标，i表示当前字符在ring中的下标，j表示上一个字符在ring中的下标
    最后要加上每一次按下button的操作 key.length()次
    */
    int findRotateSteps(string ring, string key) {
        int lenr=ring.length(),lenk=key.length();
        vector<vector<int>> dp(lenk,vector<int>(lenr,INT_MAX));
        for(int k=0;k<lenk;k++){
            for(int r=0;r<lenr;r++){
                if(ring[r]==key[k]){
                    if(k==0)
                        dp[k][r]=min(r,lenr-r);//匹配第一个字符
                    else{
                        for(int i=0;i<lenr;i++){
                            if(dp[k-1][i]!=INT_MAX)
                                dp[k][r]=min(dp[k][r],dp[k-1][i]+min(abs(r-i),lenr-abs(r-i)));//相对于上一个位置的顺时针,逆时针距离
                        }
                    }
                }
            }
        }
        int ans=dp[lenk-1][0];
        for(int i=1;i<lenr;i++)
            ans=min(ans,dp[lenk-1][i]);
        return ans+lenk;
    }
};

update:
class Solution {
public:
    /*
        相当于做两个字符串的匹配
        dp[k][i]当前匹配到key的第k个字母，ring的第i个字母在12点方向
        匹配第一个字符直接选择在ring上旋转：
        dp[0][i] = min(i,len(ring)-i) key[0]==ring[i]
        匹配后续字符需要基于前一个字符匹配后ring的状态：
        dp[k][i] = min(dp[k][i], dp[k - 1][j] + min(abs(i - j), len(ring) - abs(i - j))) 满足key[k]==ring[i]且遍历ring[j]==key[k-1]的所有j k>0
        其中k表示当前字符在key中的下标，i表示当前字符在ring中的下标，j表示上一个字符在ring中的下标
        最后要加上每一次按下button的操作 key.length()次
    */
    int findRotateSteps(string ring, string key) {
        int lenr=ring.length(),lenk=key.length();
        vector<vector<int>> dp(lenk,vector<int>(lenr,INT_MAX));
        for(int k=0;k<lenk;k++){
            for(int i=0;i<lenr;i++){
                if(key[k]!=ring[i]) continue;
                if(k==0){
                    dp[k][i]=min(i,lenr-i);
                }
                else{
                    for(int j=0;j<lenr;j++){
                        if(dp[k-1][j]!=INT_MAX){
                            dp[k][i]=min(dp[k][i],dp[k-1][j]+min(abs(i-j),lenr-abs(i-j)));
                        }
                    }
                }
            }
        }
        int res=dp[lenk-1][0];
        for(int i=1;i<lenr;i++){
            res=min(res,dp[lenk-1][i]);
        }
        return res+lenk;
    }
};
