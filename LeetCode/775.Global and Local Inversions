775. Global and Local Inversions
/*
We have some permutation A of [0, 1, ..., N - 1], where N is the length of A.

The number of (global) inversions is the number of i < j with 0 <= i < j < N and A[i] > A[j].

The number of local inversions is the number of i with 0 <= i < N and A[i] > A[i+1].

Return true if and only if the number of global inversions is equal to the number of local inversions.

Example 1:
Input: A = [1,0,2]
Output: true
Explanation: There is 1 global inversion, and 1 local inversion.

Example 2:
Input: A = [1,2,0]
Output: false
Explanation: There are 2 global inversions, and 1 local inversion.
Note:
  A will be a permutation of [0, 1, ..., A.length - 1].
  A will have length in range [1, 5000].
  The time limit for this problem has been reduced.
*/

Solution:
class Solution {
public:
    //利用归并排序求逆序数
    bool isIdealPermutation(vector<int>& A) {
        int n=A.size();
        if(n<2)
            return true;
        int local=0;
        for(int i=1;i<n;i++)
            if(A[i]<A[i-1])
                local++;
        global=0;
        getGlobal(A,0,n-1);
        return local==global;
    }

private:
    int global;
    void merge(vector<int>&A,int s,int mid,int e){
        int p1=s,q1=mid,p2=mid+1,q2=e;
        vector<int> temp;
        while(p1<=q1||p2<=q2){
            if(p2>q2||p1<=q1&&A[p1]<=A[p2]){
                temp.push_back(A[p1++]);
                global+=p2-mid-1;
            }else{
                temp.push_back(A[p2++]);
            }
        }
        for(int i=0;i<temp.size();i++)
            A[i+s]=temp[i];
    }
    void getGlobal(vector<int>&A,int i,int j){
        if(i<j){
            int mid=i+(j-i)/2;
            getGlobal(A,i,mid);
            getGlobal(A,mid+1,j);
            merge(A,i,mid,j);
        }
    }
};
