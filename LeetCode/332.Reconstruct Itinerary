332. Reconstruct Itinerary
/*
Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:
tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Return ["JFK", "MUC", "LHR", "SFO", "SJC"].
Example 2:
tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Return ["JFK","ATL","JFK","SFO","ATL","SFO"].
Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.
*/

Solution:
class Solution {
public:
    /*
    * 这道题给我们一堆飞机票，让我们建立一个行程单，如果有多种方法，取其中字母顺序小的那种方法。
    * 是关于有向图的边的遍历,每张机票都是有向图的一条边，我们需要找出一条经过所有边的路径，那么DFS是我们的不二选择。
    *就是找出欧拉路径  dfs每个结点 访问时节点入栈 如果一个节点已经访问结束出栈 则出栈的序列就是欧拉路径的序列Hierholzer's algorithm
    *同一个地点可以飞往另一个地点多次 所以存储的时候用muitiset 保持字母序的前提下还能有重复
    */
    map<string,multiset<string>> edges;
    vector<string> route;
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
        edges.clear();
        route.clear();
        for(auto &p:tickets){
            edges[p.first].insert(p.second);
        }
        dfs("JFK");
        return vector<string>(route.rbegin(),route.rend());
    }
    
    void dfs(string from){
        while(edges[from].size()>0){
            auto it=edges[from].begin();
            string to=*it;
            edges[from].erase(it);
            dfs(to);
        }
        route.push_back(from);
    }
};


update:解释
class Solution {
public:
    /*
        参考：https://zxi.mytechroad.com/blog/graph/leetcode-332-reconstruct-itinerary/
        重新安排行程，使得给出的所有航班都得经过一次。如果出现多条可行的路径，那么优先选择的字典序最小的航班路径。出发点一定是JFK，而且题目保证了最少有一个可行的遍历路径。
        这道题的本质是计算一个最"小"的欧拉路径(Eulerian path)。对于一个节点（当然先从JFK开始)，贪心地访问最小的邻居，访问过的边全部删除。
        idea:sort children + post order travel
        将ticket以JFK为根节点构建树，构建时按照孩子节点的字符序大小顺序构建，一旦构建，就删除两个节点之间的边
        然后遍历的时候按照后序遍历，先访问所有孩子节点 再访问根节点，最后将后序遍历的结果reverse即为所求
    */
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
        unordered_map<string,multiset<string>> graph;
        for(auto &path:tickets){
            graph[path.first].insert(path.second);
        }
        vector<string> res;
        travel("JFK",graph,res);
        return vector<string>(res.rbegin(),res.rend());
    }
private:
    void travel(string root,unordered_map<string,multiset<string>> &graph,vector<string> &res){
        //后序遍历 先访问所有孩子
        while(graph[root].size()>0){
            auto first=graph[root].begin();
            string child=*first;
            graph[root].erase(first);
            travel(child,graph,res);
        }
        res.push_back(root);
    }
};

update:也可以用deque双端队列保存图 deque支持从前后两个方向插入和删除
class Solution {
public:
    /*
        参考：https://zxi.mytechroad.com/blog/graph/leetcode-332-reconstruct-itinerary/
        重新安排行程，使得给出的所有航班都得经过一次。如果出现多条可行的路径，那么优先选择的字典序最小的航班路径。出发点一定是JFK，而且题目保证了最少有一个可行的遍历路径。
        这道题的本质是计算一个最"小"的欧拉路径(Eulerian path)。对于一个节点（当然先从JFK开始)，贪心地访问最小的邻居，访问过的边全部删除。
        idea:sort children + post order travel
        将ticket以JFK为根节点构建树，构建时按照孩子节点的字符序大小顺序构建，一旦构建，就删除两个节点之间的边
        然后遍历的时候按照后序遍历，先访问所有孩子节点 再访问根节点，最后将后序遍历的结果reverse即为所求
    */
    vector<string> findItinerary(vector<pair<string, string>> tickets) {
        unordered_map<string,deque<string>> graph;
        for(auto &path:tickets){
            graph[path.first].push_back(path.second);
        }
        for(auto &p:graph){
            auto &path=p.second;
            sort(path.begin(),path.end());
        }
        vector<string> res;
        travel("JFK",graph,res);
        return vector<string>(res.rbegin(),res.rend());
    }
private:
    void travel(string root,unordered_map<string,deque<string>> &graph,vector<string> &res){
        //后序遍历 先访问所有孩子
        while(!graph[root].empty()){
            auto first=graph[root].front();
            graph[root].pop_front();
            travel(first,graph,res);
        }
        res.push_back(root);
    }
};
